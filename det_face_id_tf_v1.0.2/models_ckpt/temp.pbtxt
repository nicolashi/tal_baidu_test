node {
  name: "Variable/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Variable/Assign"
  op: "Assign"
  input: "Variable"
  input: "Variable/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Variable/read"
  op: "Identity"
  input: "Variable"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "phase_train"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "image_paths"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "labels"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "FIFOQueueV2"
  op: "FIFOQueueV2"
  attr {
    key: "capacity"
    value {
      i: 200000
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FIFOQueueV2_EnqueueMany"
  op: "QueueEnqueueManyV2"
  input: "FIFOQueueV2"
  input: "image_paths"
  input: "labels"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "FIFOQueueV2_Dequeue"
  op: "QueueDequeueV2"
  input: "FIFOQueueV2"
  attr {
    key: "component_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "unstack"
  op: "Unpack"
  input: "FIFOQueueV2_Dequeue"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 3
    }
  }
}
node {
  name: "ReadFile"
  op: "ReadFile"
  input: "unstack"
}
node {
  name: "decode_image/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image/Substr"
  op: "Substr"
  input: "ReadFile"
  input: "decode_image/Substr/pos"
  input: "decode_image/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image/is_jpeg/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image/is_jpeg/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image/is_jpeg/Substr"
  op: "Substr"
  input: "ReadFile"
  input: "decode_image/is_jpeg/Substr/pos"
  input: "decode_image/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image/is_jpeg/Equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "decode_image/is_jpeg/Equal"
  op: "Equal"
  input: "decode_image/is_jpeg/Substr"
  input: "decode_image/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image/cond_jpeg/Switch"
  op: "Switch"
  input: "decode_image/is_jpeg/Equal"
  input: "decode_image/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image/cond_jpeg/switch_t"
  op: "Identity"
  input: "decode_image/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image/cond_jpeg/switch_f"
  op: "Identity"
  input: "decode_image/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image/cond_jpeg/pred_id"
  op: "Identity"
  input: "decode_image/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image/cond_jpeg/check_jpeg_channels/x"
  op: "Const"
  input: "^decode_image/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/check_jpeg_channels/y"
  op: "Const"
  input: "^decode_image/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/check_jpeg_channels"
  op: "NotEqual"
  input: "decode_image/cond_jpeg/check_jpeg_channels/x"
  input: "decode_image/cond_jpeg/check_jpeg_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image/cond_jpeg/Assert/Const"
  op: "Const"
  input: "^decode_image/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/Assert/Assert"
  op: "Assert"
  input: "decode_image/cond_jpeg/check_jpeg_channels"
  input: "decode_image/cond_jpeg/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "decode_image/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^decode_image/cond_jpeg/Assert/Assert"
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "decode_image/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "ReadFile"
  input: "decode_image/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/is_png/y"
  op: "Const"
  input: "^decode_image/cond_jpeg/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\211PN"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/is_png"
  op: "Equal"
  input: "decode_image/cond_jpeg/is_png/Switch"
  input: "decode_image/cond_jpeg/is_png/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image/cond_jpeg/is_png/Switch"
  op: "Switch"
  input: "decode_image/Substr"
  input: "decode_image/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image/Substr"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/Switch"
  op: "Switch"
  input: "decode_image/cond_jpeg/is_png"
  input: "decode_image/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/switch_t"
  op: "Identity"
  input: "decode_image/cond_jpeg/cond_png/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/switch_f"
  op: "Identity"
  input: "decode_image/cond_jpeg/cond_png/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/pred_id"
  op: "Identity"
  input: "decode_image/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/DecodePng"
  op: "DecodePng"
  input: "decode_image/cond_jpeg/cond_png/DecodePng/Switch_1:1"
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/DecodePng/Switch"
  op: "Switch"
  input: "ReadFile"
  input: "decode_image/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/DecodePng/Switch_1"
  op: "Switch"
  input: "decode_image/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/is_gif/y"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "GIF"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/is_gif"
  op: "Equal"
  input: "decode_image/cond_jpeg/cond_png/is_gif/Switch"
  input: "decode_image/cond_jpeg/cond_png/is_gif/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/is_gif/Switch"
  op: "Switch"
  input: "decode_image/cond_jpeg/is_png/Switch"
  input: "decode_image/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image/Substr"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Switch"
  op: "Switch"
  input: "decode_image/cond_jpeg/cond_png/is_gif"
  input: "decode_image/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  op: "Identity"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  op: "Identity"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/pred_id"
  op: "Identity"
  input: "decode_image/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  op: "NotEqual"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  op: "NotEqual"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  op: "LogicalAnd"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Assert/Const"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  op: "Assert"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif"
  op: "DecodeGif"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1:1"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/Assert/Assert"
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  op: "Switch"
  input: "decode_image/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1"
  op: "Switch"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Substr/pos"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Substr/len"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Substr"
  op: "Substr"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/Substr/pos"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  op: "Switch"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "BM"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/is_bmp"
  op: "Equal"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/Substr"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Const"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  op: "Assert"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/is_bmp"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/check_channels/x"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/check_channels/y"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/check_channels"
  op: "NotEqual"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/check_channels/x"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/check_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Const"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  op: "Const"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  op: "Assert"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/check_channels"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  op: "DecodeBmp"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  input: "^decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/cond_gif/Merge"
  op: "Merge"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image/cond_jpeg/cond_png/Merge"
  op: "Merge"
  input: "decode_image/cond_jpeg/cond_png/cond_gif/Merge"
  input: "decode_image/cond_jpeg/cond_png/DecodePng"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image/cond_jpeg/Merge"
  op: "Merge"
  input: "decode_image/cond_jpeg/cond_png/Merge"
  input: "decode_image/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/ExpandDims"
  op: "ExpandDims"
  input: "decode_image/cond_jpeg/Merge"
  input: "resize_image_with_crop_or_pad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad/assert_positive/Const"
  input: "resize_image_with_crop_or_pad/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad/ExpandDims"
  input: "^resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad/sub/x"
  input: "resize_image_with_crop_or_pad/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Neg"
  op: "Neg"
  input: "resize_image_with_crop_or_pad/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/floordiv"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad/Neg"
  input: "resize_image_with_crop_or_pad/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Maximum"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad/floordiv"
  input: "resize_image_with_crop_or_pad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/floordiv_1"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad/sub"
  input: "resize_image_with_crop_or_pad/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Maximum_1"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad/floordiv_1"
  input: "resize_image_with_crop_or_pad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad/sub_1/x"
  input: "resize_image_with_crop_or_pad/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Neg_1"
  op: "Neg"
  input: "resize_image_with_crop_or_pad/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/floordiv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/floordiv_2"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad/Neg_1"
  input: "resize_image_with_crop_or_pad/floordiv_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Maximum_2"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad/floordiv_2"
  input: "resize_image_with_crop_or_pad/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/floordiv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/floordiv_3"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad/sub_1"
  input: "resize_image_with_crop_or_pad/floordiv_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Maximum_3"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad/floordiv_3"
  input: "resize_image_with_crop_or_pad/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Minimum"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad/Minimum/x"
  input: "resize_image_with_crop_or_pad/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Minimum_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Minimum_1"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad/Minimum_1/x"
  input: "resize_image_with_crop_or_pad/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad/Maximum"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad/Maximum_2"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "resize_image_with_crop_or_pad/Minimum_1"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Greater"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Greater_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Greater_1"
  op: "Greater"
  input: "resize_image_with_crop_or_pad/Minimum"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Greater_1"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/add"
  op: "Add"
  input: "resize_image_with_crop_or_pad/Minimum_1"
  input: "resize_image_with_crop_or_pad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/unstack:2"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_4/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_4/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_4/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/add_1"
  op: "Add"
  input: "resize_image_with_crop_or_pad/Minimum"
  input: "resize_image_with_crop_or_pad/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/unstack:1"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_5/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_5/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_5/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad/control_dependency"
  input: "^resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_4/Assert"
  input: "^resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_5/Assert"
  input: "^resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad/Maximum_2"
  input: "resize_image_with_crop_or_pad/Maximum"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/0"
  input: "resize_image_with_crop_or_pad/Minimum"
  input: "resize_image_with_crop_or_pad/Minimum_1"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/sub/x"
  input: "resize_image_with_crop_or_pad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/sub"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/sub_2"
  op: "Sub"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/sub_2/x"
  input: "resize_image_with_crop_or_pad/Maximum_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/sub_3"
  op: "Sub"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/sub_2"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad/Maximum_3"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad/Maximum_1"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  input: "^resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/stack/1"
  input: "resize_image_with_crop_or_pad/Maximum_3"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad/Maximum_1"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/stack/6"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Shape_2"
  op: "Shape"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/unstack_1"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/control_dependency_1"
  op: "Identity"
  input: "resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad/Squeeze"
  op: "Squeeze"
  input: "resize_image_with_crop_or_pad/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "per_image_standardization/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad/Squeeze"
      }
    }
  }
}
node {
  name: "per_image_standardization/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "per_image_standardization/Prod"
  op: "Prod"
  input: "per_image_standardization/Shape"
  input: "per_image_standardization/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization/Cast"
  op: "Cast"
  input: "per_image_standardization/control_dependency"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "per_image_standardization/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization/Mean"
  op: "Mean"
  input: "per_image_standardization/Cast"
  input: "per_image_standardization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization/Square"
  op: "Square"
  input: "per_image_standardization/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization/Mean_1"
  op: "Mean"
  input: "per_image_standardization/Square"
  input: "per_image_standardization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization/Square_1"
  op: "Square"
  input: "per_image_standardization/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization/sub"
  op: "Sub"
  input: "per_image_standardization/Mean_1"
  input: "per_image_standardization/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization/Relu"
  op: "Relu"
  input: "per_image_standardization/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization/Sqrt"
  op: "Sqrt"
  input: "per_image_standardization/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization/Cast_1"
  op: "Cast"
  input: "per_image_standardization/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "per_image_standardization/Rsqrt"
  op: "Rsqrt"
  input: "per_image_standardization/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization/Maximum"
  op: "Maximum"
  input: "per_image_standardization/Sqrt"
  input: "per_image_standardization/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization/Sub"
  op: "Sub"
  input: "per_image_standardization/Cast"
  input: "per_image_standardization/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization"
  op: "RealDiv"
  input: "per_image_standardization/Sub"
  input: "per_image_standardization/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadFile_1"
  op: "ReadFile"
  input: "unstack:1"
}
node {
  name: "decode_image_1/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_1/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_1/Substr"
  op: "Substr"
  input: "ReadFile_1"
  input: "decode_image_1/Substr/pos"
  input: "decode_image_1/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_1/is_jpeg/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_1/is_jpeg/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_1/is_jpeg/Substr"
  op: "Substr"
  input: "ReadFile_1"
  input: "decode_image_1/is_jpeg/Substr/pos"
  input: "decode_image_1/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_1/is_jpeg/Equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "decode_image_1/is_jpeg/Equal"
  op: "Equal"
  input: "decode_image_1/is_jpeg/Substr"
  input: "decode_image_1/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/Switch"
  op: "Switch"
  input: "decode_image_1/is_jpeg/Equal"
  input: "decode_image_1/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/switch_t"
  op: "Identity"
  input: "decode_image_1/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/switch_f"
  op: "Identity"
  input: "decode_image_1/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/pred_id"
  op: "Identity"
  input: "decode_image_1/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/check_jpeg_channels/x"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/check_jpeg_channels/y"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/check_jpeg_channels"
  op: "NotEqual"
  input: "decode_image_1/cond_jpeg/check_jpeg_channels/x"
  input: "decode_image_1/cond_jpeg/check_jpeg_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/Assert/Const"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/Assert/Assert"
  op: "Assert"
  input: "decode_image_1/cond_jpeg/check_jpeg_channels"
  input: "decode_image_1/cond_jpeg/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "decode_image_1/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^decode_image_1/cond_jpeg/Assert/Assert"
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "ReadFile_1"
  input: "decode_image_1/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_1"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/is_png/y"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\211PN"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/is_png"
  op: "Equal"
  input: "decode_image_1/cond_jpeg/is_png/Switch"
  input: "decode_image_1/cond_jpeg/is_png/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/is_png/Switch"
  op: "Switch"
  input: "decode_image_1/Substr"
  input: "decode_image_1/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_1/Substr"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/Switch"
  op: "Switch"
  input: "decode_image_1/cond_jpeg/is_png"
  input: "decode_image_1/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/switch_t"
  op: "Identity"
  input: "decode_image_1/cond_jpeg/cond_png/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/switch_f"
  op: "Identity"
  input: "decode_image_1/cond_jpeg/cond_png/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/pred_id"
  op: "Identity"
  input: "decode_image_1/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/DecodePng"
  op: "DecodePng"
  input: "decode_image_1/cond_jpeg/cond_png/DecodePng/Switch_1:1"
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/DecodePng/Switch"
  op: "Switch"
  input: "ReadFile_1"
  input: "decode_image_1/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_1"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/DecodePng/Switch_1"
  op: "Switch"
  input: "decode_image_1/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_1/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_1"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/is_gif/y"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "GIF"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/is_gif"
  op: "Equal"
  input: "decode_image_1/cond_jpeg/cond_png/is_gif/Switch"
  input: "decode_image_1/cond_jpeg/cond_png/is_gif/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/is_gif/Switch"
  op: "Switch"
  input: "decode_image_1/cond_jpeg/is_png/Switch"
  input: "decode_image_1/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_1/Substr"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Switch"
  op: "Switch"
  input: "decode_image_1/cond_jpeg/cond_png/is_gif"
  input: "decode_image_1/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/switch_t"
  op: "Identity"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/switch_f"
  op: "Identity"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/pred_id"
  op: "Identity"
  input: "decode_image_1/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  op: "NotEqual"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  op: "NotEqual"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  op: "LogicalAnd"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Assert/Const"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  op: "Assert"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/DecodeGif"
  op: "DecodeGif"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1:1"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/Assert/Assert"
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  op: "Switch"
  input: "decode_image_1/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_1/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_1"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1"
  op: "Switch"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_1"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Substr/pos"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Substr/len"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Substr"
  op: "Substr"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/Substr/pos"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  op: "Switch"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_1"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "BM"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/is_bmp"
  op: "Equal"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/Substr"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Assert_1/Const"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  op: "Assert"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/is_bmp"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_channels/x"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_channels/y"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_channels"
  op: "NotEqual"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_channels/x"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Assert_2/Const"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  op: "Const"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  op: "Assert"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/check_channels"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  op: "DecodeBmp"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  input: "^decode_image_1/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/cond_gif/Merge"
  op: "Merge"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/DecodeGif"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/cond_png/Merge"
  op: "Merge"
  input: "decode_image_1/cond_jpeg/cond_png/cond_gif/Merge"
  input: "decode_image_1/cond_jpeg/cond_png/DecodePng"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_1/cond_jpeg/Merge"
  op: "Merge"
  input: "decode_image_1/cond_jpeg/cond_png/Merge"
  input: "decode_image_1/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/ExpandDims"
  op: "ExpandDims"
  input: "decode_image_1/cond_jpeg/Merge"
  input: "resize_image_with_crop_or_pad_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_1/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_1/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_1/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_1/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_1/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_1/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_1/ExpandDims"
  input: "^resize_image_with_crop_or_pad_1/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_1/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_1/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_1/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_1/sub/x"
  input: "resize_image_with_crop_or_pad_1/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Neg"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_1/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/floordiv"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_1/Neg"
  input: "resize_image_with_crop_or_pad_1/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Maximum"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_1/floordiv"
  input: "resize_image_with_crop_or_pad_1/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/floordiv_1"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_1/sub"
  input: "resize_image_with_crop_or_pad_1/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Maximum_1"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_1/floordiv_1"
  input: "resize_image_with_crop_or_pad_1/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_1/sub_1/x"
  input: "resize_image_with_crop_or_pad_1/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Neg_1"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_1/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/floordiv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/floordiv_2"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_1/Neg_1"
  input: "resize_image_with_crop_or_pad_1/floordiv_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Maximum_2"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_1/floordiv_2"
  input: "resize_image_with_crop_or_pad_1/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/floordiv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/floordiv_3"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_1/sub_1"
  input: "resize_image_with_crop_or_pad_1/floordiv_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Maximum_3"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_1/floordiv_3"
  input: "resize_image_with_crop_or_pad_1/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Minimum"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_1/Minimum/x"
  input: "resize_image_with_crop_or_pad_1/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Minimum_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Minimum_1"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_1/Minimum_1/x"
  input: "resize_image_with_crop_or_pad_1/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_1/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_1/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_1/Maximum"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_1/Maximum_2"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_1/Minimum_1"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Greater"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Greater_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Greater_1"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_1/Minimum"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Greater_1"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/add"
  op: "Add"
  input: "resize_image_with_crop_or_pad_1/Minimum_1"
  input: "resize_image_with_crop_or_pad_1/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/unstack:2"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_4/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_4/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_4/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/add_1"
  op: "Add"
  input: "resize_image_with_crop_or_pad_1/Minimum"
  input: "resize_image_with_crop_or_pad_1/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/unstack:1"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_5/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_5/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_5/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_1/control_dependency"
  input: "^resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_4/Assert"
  input: "^resize_image_with_crop_or_pad_1/crop_to_bounding_box/Assert_5/Assert"
  input: "^resize_image_with_crop_or_pad_1/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_1/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_1/Maximum_2"
  input: "resize_image_with_crop_or_pad_1/Maximum"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/stack_1/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/stack_1/0"
  input: "resize_image_with_crop_or_pad_1/Minimum"
  input: "resize_image_with_crop_or_pad_1/Minimum_1"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/stack_1/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/sub/x"
  input: "resize_image_with_crop_or_pad_1/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/sub"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/sub_2"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/sub_2/x"
  input: "resize_image_with_crop_or_pad_1/Maximum_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/sub_3"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/sub_2"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_1/Maximum_3"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_1/Maximum_1"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_1/crop_to_bounding_box/Slice"
  input: "^resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_1/pad_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_1/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_1/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/stack/1"
  input: "resize_image_with_crop_or_pad_1/Maximum_3"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_1/Maximum_1"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/stack/6"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Shape_2"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/unstack_1"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_1/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/control_dependency_1"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_1/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_1/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_1/Squeeze"
  op: "Squeeze"
  input: "resize_image_with_crop_or_pad_1/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_1/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_1/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_1/Squeeze"
      }
    }
  }
}
node {
  name: "per_image_standardization_1/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_1/Prod"
  op: "Prod"
  input: "per_image_standardization_1/Shape"
  input: "per_image_standardization_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_1/Cast"
  op: "Cast"
  input: "per_image_standardization_1/control_dependency"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "per_image_standardization_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_1/Mean"
  op: "Mean"
  input: "per_image_standardization_1/Cast"
  input: "per_image_standardization_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_1/Square"
  op: "Square"
  input: "per_image_standardization_1/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_1/Mean_1"
  op: "Mean"
  input: "per_image_standardization_1/Square"
  input: "per_image_standardization_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_1/Square_1"
  op: "Square"
  input: "per_image_standardization_1/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_1/sub"
  op: "Sub"
  input: "per_image_standardization_1/Mean_1"
  input: "per_image_standardization_1/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_1/Relu"
  op: "Relu"
  input: "per_image_standardization_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_1/Sqrt"
  op: "Sqrt"
  input: "per_image_standardization_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_1/Cast_1"
  op: "Cast"
  input: "per_image_standardization_1/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "per_image_standardization_1/Rsqrt"
  op: "Rsqrt"
  input: "per_image_standardization_1/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_1/Maximum"
  op: "Maximum"
  input: "per_image_standardization_1/Sqrt"
  input: "per_image_standardization_1/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_1/Sub"
  op: "Sub"
  input: "per_image_standardization_1/Cast"
  input: "per_image_standardization_1/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_1"
  op: "RealDiv"
  input: "per_image_standardization_1/Sub"
  input: "per_image_standardization_1/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadFile_2"
  op: "ReadFile"
  input: "unstack:2"
}
node {
  name: "decode_image_2/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_2/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_2/Substr"
  op: "Substr"
  input: "ReadFile_2"
  input: "decode_image_2/Substr/pos"
  input: "decode_image_2/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_2/is_jpeg/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_2/is_jpeg/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_2/is_jpeg/Substr"
  op: "Substr"
  input: "ReadFile_2"
  input: "decode_image_2/is_jpeg/Substr/pos"
  input: "decode_image_2/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_2/is_jpeg/Equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "decode_image_2/is_jpeg/Equal"
  op: "Equal"
  input: "decode_image_2/is_jpeg/Substr"
  input: "decode_image_2/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/Switch"
  op: "Switch"
  input: "decode_image_2/is_jpeg/Equal"
  input: "decode_image_2/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/switch_t"
  op: "Identity"
  input: "decode_image_2/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/switch_f"
  op: "Identity"
  input: "decode_image_2/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/pred_id"
  op: "Identity"
  input: "decode_image_2/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/check_jpeg_channels/x"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/check_jpeg_channels/y"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/check_jpeg_channels"
  op: "NotEqual"
  input: "decode_image_2/cond_jpeg/check_jpeg_channels/x"
  input: "decode_image_2/cond_jpeg/check_jpeg_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/Assert/Const"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/Assert/Assert"
  op: "Assert"
  input: "decode_image_2/cond_jpeg/check_jpeg_channels"
  input: "decode_image_2/cond_jpeg/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "decode_image_2/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^decode_image_2/cond_jpeg/Assert/Assert"
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "ReadFile_2"
  input: "decode_image_2/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_2"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/is_png/y"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\211PN"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/is_png"
  op: "Equal"
  input: "decode_image_2/cond_jpeg/is_png/Switch"
  input: "decode_image_2/cond_jpeg/is_png/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/is_png/Switch"
  op: "Switch"
  input: "decode_image_2/Substr"
  input: "decode_image_2/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_2/Substr"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/Switch"
  op: "Switch"
  input: "decode_image_2/cond_jpeg/is_png"
  input: "decode_image_2/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/switch_t"
  op: "Identity"
  input: "decode_image_2/cond_jpeg/cond_png/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/switch_f"
  op: "Identity"
  input: "decode_image_2/cond_jpeg/cond_png/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/pred_id"
  op: "Identity"
  input: "decode_image_2/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/DecodePng"
  op: "DecodePng"
  input: "decode_image_2/cond_jpeg/cond_png/DecodePng/Switch_1:1"
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/DecodePng/Switch"
  op: "Switch"
  input: "ReadFile_2"
  input: "decode_image_2/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_2"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/DecodePng/Switch_1"
  op: "Switch"
  input: "decode_image_2/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_2/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_2"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/is_gif/y"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "GIF"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/is_gif"
  op: "Equal"
  input: "decode_image_2/cond_jpeg/cond_png/is_gif/Switch"
  input: "decode_image_2/cond_jpeg/cond_png/is_gif/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/is_gif/Switch"
  op: "Switch"
  input: "decode_image_2/cond_jpeg/is_png/Switch"
  input: "decode_image_2/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_2/Substr"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Switch"
  op: "Switch"
  input: "decode_image_2/cond_jpeg/cond_png/is_gif"
  input: "decode_image_2/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/switch_t"
  op: "Identity"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/switch_f"
  op: "Identity"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/pred_id"
  op: "Identity"
  input: "decode_image_2/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  op: "NotEqual"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  op: "NotEqual"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  op: "LogicalAnd"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Assert/Const"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  op: "Assert"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/DecodeGif"
  op: "DecodeGif"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1:1"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/Assert/Assert"
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  op: "Switch"
  input: "decode_image_2/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_2/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_2"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1"
  op: "Switch"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_2"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Substr/pos"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Substr/len"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Substr"
  op: "Substr"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/Substr/pos"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  op: "Switch"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_2"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "BM"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/is_bmp"
  op: "Equal"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/Substr"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Assert_1/Const"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  op: "Assert"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/is_bmp"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_channels/x"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_channels/y"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_channels"
  op: "NotEqual"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_channels/x"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Assert_2/Const"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  op: "Const"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  op: "Assert"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/check_channels"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  op: "DecodeBmp"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  input: "^decode_image_2/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/cond_gif/Merge"
  op: "Merge"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/DecodeGif"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/cond_png/Merge"
  op: "Merge"
  input: "decode_image_2/cond_jpeg/cond_png/cond_gif/Merge"
  input: "decode_image_2/cond_jpeg/cond_png/DecodePng"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_2/cond_jpeg/Merge"
  op: "Merge"
  input: "decode_image_2/cond_jpeg/cond_png/Merge"
  input: "decode_image_2/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/ExpandDims"
  op: "ExpandDims"
  input: "decode_image_2/cond_jpeg/Merge"
  input: "resize_image_with_crop_or_pad_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_2/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_2/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_2/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_2/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_2/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_2/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_2/ExpandDims"
  input: "^resize_image_with_crop_or_pad_2/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_2/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_2/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_2/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_2/sub/x"
  input: "resize_image_with_crop_or_pad_2/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Neg"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_2/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/floordiv"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_2/Neg"
  input: "resize_image_with_crop_or_pad_2/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Maximum"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_2/floordiv"
  input: "resize_image_with_crop_or_pad_2/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/floordiv_1"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_2/sub"
  input: "resize_image_with_crop_or_pad_2/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Maximum_1"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_2/floordiv_1"
  input: "resize_image_with_crop_or_pad_2/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_2/sub_1/x"
  input: "resize_image_with_crop_or_pad_2/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Neg_1"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_2/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/floordiv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/floordiv_2"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_2/Neg_1"
  input: "resize_image_with_crop_or_pad_2/floordiv_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Maximum_2"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_2/floordiv_2"
  input: "resize_image_with_crop_or_pad_2/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/floordiv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/floordiv_3"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_2/sub_1"
  input: "resize_image_with_crop_or_pad_2/floordiv_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Maximum_3"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_2/floordiv_3"
  input: "resize_image_with_crop_or_pad_2/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Minimum"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_2/Minimum/x"
  input: "resize_image_with_crop_or_pad_2/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Minimum_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Minimum_1"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_2/Minimum_1/x"
  input: "resize_image_with_crop_or_pad_2/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_2/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_2/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_2/Maximum"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_2/Maximum_2"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_2/Minimum_1"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Greater"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Greater_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Greater_1"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_2/Minimum"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Greater_1"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/add"
  op: "Add"
  input: "resize_image_with_crop_or_pad_2/Minimum_1"
  input: "resize_image_with_crop_or_pad_2/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/unstack:2"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_4/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_4/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_4/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/add_1"
  op: "Add"
  input: "resize_image_with_crop_or_pad_2/Minimum"
  input: "resize_image_with_crop_or_pad_2/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/unstack:1"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_5/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_5/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_5/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_2/control_dependency"
  input: "^resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_4/Assert"
  input: "^resize_image_with_crop_or_pad_2/crop_to_bounding_box/Assert_5/Assert"
  input: "^resize_image_with_crop_or_pad_2/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_2/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_2/Maximum_2"
  input: "resize_image_with_crop_or_pad_2/Maximum"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/stack_1/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/stack_1/0"
  input: "resize_image_with_crop_or_pad_2/Minimum"
  input: "resize_image_with_crop_or_pad_2/Minimum_1"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/stack_1/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/sub/x"
  input: "resize_image_with_crop_or_pad_2/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/sub"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/sub_2"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/sub_2/x"
  input: "resize_image_with_crop_or_pad_2/Maximum_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/sub_3"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/sub_2"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_2/Maximum_3"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_2/Maximum_1"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_2/crop_to_bounding_box/Slice"
  input: "^resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_2/pad_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_2/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_2/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/stack/1"
  input: "resize_image_with_crop_or_pad_2/Maximum_3"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_2/Maximum_1"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/stack/6"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Shape_2"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/unstack_1"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_2/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/control_dependency_1"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_2/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_2/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_2/Squeeze"
  op: "Squeeze"
  input: "resize_image_with_crop_or_pad_2/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_2/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_2/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_2/Squeeze"
      }
    }
  }
}
node {
  name: "per_image_standardization_2/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_2/Prod"
  op: "Prod"
  input: "per_image_standardization_2/Shape"
  input: "per_image_standardization_2/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_2/Cast"
  op: "Cast"
  input: "per_image_standardization_2/control_dependency"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "per_image_standardization_2/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_2/Mean"
  op: "Mean"
  input: "per_image_standardization_2/Cast"
  input: "per_image_standardization_2/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_2/Square"
  op: "Square"
  input: "per_image_standardization_2/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_2/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_2/Mean_1"
  op: "Mean"
  input: "per_image_standardization_2/Square"
  input: "per_image_standardization_2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_2/Square_1"
  op: "Square"
  input: "per_image_standardization_2/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_2/sub"
  op: "Sub"
  input: "per_image_standardization_2/Mean_1"
  input: "per_image_standardization_2/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_2/Relu"
  op: "Relu"
  input: "per_image_standardization_2/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_2/Sqrt"
  op: "Sqrt"
  input: "per_image_standardization_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_2/Cast_1"
  op: "Cast"
  input: "per_image_standardization_2/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "per_image_standardization_2/Rsqrt"
  op: "Rsqrt"
  input: "per_image_standardization_2/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_2/Maximum"
  op: "Maximum"
  input: "per_image_standardization_2/Sqrt"
  input: "per_image_standardization_2/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_2/Sub"
  op: "Sub"
  input: "per_image_standardization_2/Cast"
  input: "per_image_standardization_2/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_2"
  op: "RealDiv"
  input: "per_image_standardization_2/Sub"
  input: "per_image_standardization_2/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FIFOQueueV2_Dequeue_1"
  op: "QueueDequeueV2"
  input: "FIFOQueueV2"
  attr {
    key: "component_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "unstack_1"
  op: "Unpack"
  input: "FIFOQueueV2_Dequeue_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 3
    }
  }
}
node {
  name: "ReadFile_3"
  op: "ReadFile"
  input: "unstack_1"
}
node {
  name: "decode_image_3/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_3/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_3/Substr"
  op: "Substr"
  input: "ReadFile_3"
  input: "decode_image_3/Substr/pos"
  input: "decode_image_3/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_3/is_jpeg/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_3/is_jpeg/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_3/is_jpeg/Substr"
  op: "Substr"
  input: "ReadFile_3"
  input: "decode_image_3/is_jpeg/Substr/pos"
  input: "decode_image_3/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_3/is_jpeg/Equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "decode_image_3/is_jpeg/Equal"
  op: "Equal"
  input: "decode_image_3/is_jpeg/Substr"
  input: "decode_image_3/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/Switch"
  op: "Switch"
  input: "decode_image_3/is_jpeg/Equal"
  input: "decode_image_3/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/switch_t"
  op: "Identity"
  input: "decode_image_3/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/switch_f"
  op: "Identity"
  input: "decode_image_3/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/pred_id"
  op: "Identity"
  input: "decode_image_3/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/check_jpeg_channels/x"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/check_jpeg_channels/y"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/check_jpeg_channels"
  op: "NotEqual"
  input: "decode_image_3/cond_jpeg/check_jpeg_channels/x"
  input: "decode_image_3/cond_jpeg/check_jpeg_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/Assert/Const"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/Assert/Assert"
  op: "Assert"
  input: "decode_image_3/cond_jpeg/check_jpeg_channels"
  input: "decode_image_3/cond_jpeg/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "decode_image_3/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^decode_image_3/cond_jpeg/Assert/Assert"
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "ReadFile_3"
  input: "decode_image_3/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_3"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/is_png/y"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\211PN"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/is_png"
  op: "Equal"
  input: "decode_image_3/cond_jpeg/is_png/Switch"
  input: "decode_image_3/cond_jpeg/is_png/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/is_png/Switch"
  op: "Switch"
  input: "decode_image_3/Substr"
  input: "decode_image_3/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_3/Substr"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/Switch"
  op: "Switch"
  input: "decode_image_3/cond_jpeg/is_png"
  input: "decode_image_3/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/switch_t"
  op: "Identity"
  input: "decode_image_3/cond_jpeg/cond_png/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/switch_f"
  op: "Identity"
  input: "decode_image_3/cond_jpeg/cond_png/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/pred_id"
  op: "Identity"
  input: "decode_image_3/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/DecodePng"
  op: "DecodePng"
  input: "decode_image_3/cond_jpeg/cond_png/DecodePng/Switch_1:1"
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/DecodePng/Switch"
  op: "Switch"
  input: "ReadFile_3"
  input: "decode_image_3/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_3"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/DecodePng/Switch_1"
  op: "Switch"
  input: "decode_image_3/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_3/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_3"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/is_gif/y"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "GIF"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/is_gif"
  op: "Equal"
  input: "decode_image_3/cond_jpeg/cond_png/is_gif/Switch"
  input: "decode_image_3/cond_jpeg/cond_png/is_gif/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/is_gif/Switch"
  op: "Switch"
  input: "decode_image_3/cond_jpeg/is_png/Switch"
  input: "decode_image_3/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_3/Substr"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Switch"
  op: "Switch"
  input: "decode_image_3/cond_jpeg/cond_png/is_gif"
  input: "decode_image_3/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/switch_t"
  op: "Identity"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/switch_f"
  op: "Identity"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/pred_id"
  op: "Identity"
  input: "decode_image_3/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  op: "NotEqual"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  op: "NotEqual"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  op: "LogicalAnd"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Assert/Const"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  op: "Assert"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/DecodeGif"
  op: "DecodeGif"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1:1"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/Assert/Assert"
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  op: "Switch"
  input: "decode_image_3/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_3/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_3"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1"
  op: "Switch"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_3"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Substr/pos"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Substr/len"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Substr"
  op: "Substr"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/Substr/pos"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  op: "Switch"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_3"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "BM"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/is_bmp"
  op: "Equal"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/Substr"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Assert_1/Const"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  op: "Assert"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/is_bmp"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_channels/x"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_channels/y"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_channels"
  op: "NotEqual"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_channels/x"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Assert_2/Const"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  op: "Const"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  op: "Assert"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/check_channels"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  op: "DecodeBmp"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  input: "^decode_image_3/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/cond_gif/Merge"
  op: "Merge"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/DecodeGif"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/cond_png/Merge"
  op: "Merge"
  input: "decode_image_3/cond_jpeg/cond_png/cond_gif/Merge"
  input: "decode_image_3/cond_jpeg/cond_png/DecodePng"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_3/cond_jpeg/Merge"
  op: "Merge"
  input: "decode_image_3/cond_jpeg/cond_png/Merge"
  input: "decode_image_3/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/ExpandDims"
  op: "ExpandDims"
  input: "decode_image_3/cond_jpeg/Merge"
  input: "resize_image_with_crop_or_pad_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_3/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_3/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_3/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_3/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_3/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_3/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_3/ExpandDims"
  input: "^resize_image_with_crop_or_pad_3/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_3/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_3/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_3/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_3/sub/x"
  input: "resize_image_with_crop_or_pad_3/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Neg"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_3/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/floordiv"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_3/Neg"
  input: "resize_image_with_crop_or_pad_3/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Maximum"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_3/floordiv"
  input: "resize_image_with_crop_or_pad_3/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/floordiv_1"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_3/sub"
  input: "resize_image_with_crop_or_pad_3/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Maximum_1"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_3/floordiv_1"
  input: "resize_image_with_crop_or_pad_3/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_3/sub_1/x"
  input: "resize_image_with_crop_or_pad_3/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Neg_1"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_3/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/floordiv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/floordiv_2"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_3/Neg_1"
  input: "resize_image_with_crop_or_pad_3/floordiv_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Maximum_2"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_3/floordiv_2"
  input: "resize_image_with_crop_or_pad_3/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/floordiv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/floordiv_3"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_3/sub_1"
  input: "resize_image_with_crop_or_pad_3/floordiv_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Maximum_3"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_3/floordiv_3"
  input: "resize_image_with_crop_or_pad_3/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Minimum"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_3/Minimum/x"
  input: "resize_image_with_crop_or_pad_3/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Minimum_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Minimum_1"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_3/Minimum_1/x"
  input: "resize_image_with_crop_or_pad_3/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_3/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_3/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_3/Maximum"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_3/Maximum_2"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_3/Minimum_1"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Greater"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Greater_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Greater_1"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_3/Minimum"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Greater_1"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/add"
  op: "Add"
  input: "resize_image_with_crop_or_pad_3/Minimum_1"
  input: "resize_image_with_crop_or_pad_3/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/unstack:2"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_4/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_4/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_4/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/add_1"
  op: "Add"
  input: "resize_image_with_crop_or_pad_3/Minimum"
  input: "resize_image_with_crop_or_pad_3/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/unstack:1"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_5/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_5/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_5/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_3/control_dependency"
  input: "^resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_4/Assert"
  input: "^resize_image_with_crop_or_pad_3/crop_to_bounding_box/Assert_5/Assert"
  input: "^resize_image_with_crop_or_pad_3/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_3/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_3/Maximum_2"
  input: "resize_image_with_crop_or_pad_3/Maximum"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/stack_1/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/stack_1/0"
  input: "resize_image_with_crop_or_pad_3/Minimum"
  input: "resize_image_with_crop_or_pad_3/Minimum_1"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/stack_1/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/sub/x"
  input: "resize_image_with_crop_or_pad_3/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/sub"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/sub_2"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/sub_2/x"
  input: "resize_image_with_crop_or_pad_3/Maximum_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/sub_3"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/sub_2"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_3/Maximum_3"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_3/Maximum_1"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_3/crop_to_bounding_box/Slice"
  input: "^resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_3/pad_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_3/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_3/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/stack/1"
  input: "resize_image_with_crop_or_pad_3/Maximum_3"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_3/Maximum_1"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/stack/6"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Shape_2"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/unstack_1"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_3/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/control_dependency_1"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_3/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_3/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_3/Squeeze"
  op: "Squeeze"
  input: "resize_image_with_crop_or_pad_3/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_3/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_3/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_3/Squeeze"
      }
    }
  }
}
node {
  name: "per_image_standardization_3/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_3/Prod"
  op: "Prod"
  input: "per_image_standardization_3/Shape"
  input: "per_image_standardization_3/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_3/Cast"
  op: "Cast"
  input: "per_image_standardization_3/control_dependency"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "per_image_standardization_3/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_3/Mean"
  op: "Mean"
  input: "per_image_standardization_3/Cast"
  input: "per_image_standardization_3/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_3/Square"
  op: "Square"
  input: "per_image_standardization_3/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_3/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_3/Mean_1"
  op: "Mean"
  input: "per_image_standardization_3/Square"
  input: "per_image_standardization_3/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_3/Square_1"
  op: "Square"
  input: "per_image_standardization_3/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_3/sub"
  op: "Sub"
  input: "per_image_standardization_3/Mean_1"
  input: "per_image_standardization_3/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_3/Relu"
  op: "Relu"
  input: "per_image_standardization_3/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_3/Sqrt"
  op: "Sqrt"
  input: "per_image_standardization_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_3/Cast_1"
  op: "Cast"
  input: "per_image_standardization_3/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "per_image_standardization_3/Rsqrt"
  op: "Rsqrt"
  input: "per_image_standardization_3/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_3/Maximum"
  op: "Maximum"
  input: "per_image_standardization_3/Sqrt"
  input: "per_image_standardization_3/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_3/Sub"
  op: "Sub"
  input: "per_image_standardization_3/Cast"
  input: "per_image_standardization_3/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_3"
  op: "RealDiv"
  input: "per_image_standardization_3/Sub"
  input: "per_image_standardization_3/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadFile_4"
  op: "ReadFile"
  input: "unstack_1:1"
}
node {
  name: "decode_image_4/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_4/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_4/Substr"
  op: "Substr"
  input: "ReadFile_4"
  input: "decode_image_4/Substr/pos"
  input: "decode_image_4/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_4/is_jpeg/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_4/is_jpeg/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_4/is_jpeg/Substr"
  op: "Substr"
  input: "ReadFile_4"
  input: "decode_image_4/is_jpeg/Substr/pos"
  input: "decode_image_4/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_4/is_jpeg/Equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "decode_image_4/is_jpeg/Equal"
  op: "Equal"
  input: "decode_image_4/is_jpeg/Substr"
  input: "decode_image_4/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/Switch"
  op: "Switch"
  input: "decode_image_4/is_jpeg/Equal"
  input: "decode_image_4/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/switch_t"
  op: "Identity"
  input: "decode_image_4/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/switch_f"
  op: "Identity"
  input: "decode_image_4/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/pred_id"
  op: "Identity"
  input: "decode_image_4/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/check_jpeg_channels/x"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/check_jpeg_channels/y"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/check_jpeg_channels"
  op: "NotEqual"
  input: "decode_image_4/cond_jpeg/check_jpeg_channels/x"
  input: "decode_image_4/cond_jpeg/check_jpeg_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/Assert/Const"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/Assert/Assert"
  op: "Assert"
  input: "decode_image_4/cond_jpeg/check_jpeg_channels"
  input: "decode_image_4/cond_jpeg/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "decode_image_4/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^decode_image_4/cond_jpeg/Assert/Assert"
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "ReadFile_4"
  input: "decode_image_4/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_4"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/is_png/y"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\211PN"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/is_png"
  op: "Equal"
  input: "decode_image_4/cond_jpeg/is_png/Switch"
  input: "decode_image_4/cond_jpeg/is_png/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/is_png/Switch"
  op: "Switch"
  input: "decode_image_4/Substr"
  input: "decode_image_4/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_4/Substr"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/Switch"
  op: "Switch"
  input: "decode_image_4/cond_jpeg/is_png"
  input: "decode_image_4/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/switch_t"
  op: "Identity"
  input: "decode_image_4/cond_jpeg/cond_png/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/switch_f"
  op: "Identity"
  input: "decode_image_4/cond_jpeg/cond_png/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/pred_id"
  op: "Identity"
  input: "decode_image_4/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/DecodePng"
  op: "DecodePng"
  input: "decode_image_4/cond_jpeg/cond_png/DecodePng/Switch_1:1"
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/DecodePng/Switch"
  op: "Switch"
  input: "ReadFile_4"
  input: "decode_image_4/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_4"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/DecodePng/Switch_1"
  op: "Switch"
  input: "decode_image_4/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_4/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_4"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/is_gif/y"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "GIF"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/is_gif"
  op: "Equal"
  input: "decode_image_4/cond_jpeg/cond_png/is_gif/Switch"
  input: "decode_image_4/cond_jpeg/cond_png/is_gif/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/is_gif/Switch"
  op: "Switch"
  input: "decode_image_4/cond_jpeg/is_png/Switch"
  input: "decode_image_4/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_4/Substr"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Switch"
  op: "Switch"
  input: "decode_image_4/cond_jpeg/cond_png/is_gif"
  input: "decode_image_4/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/switch_t"
  op: "Identity"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/switch_f"
  op: "Identity"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/pred_id"
  op: "Identity"
  input: "decode_image_4/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  op: "NotEqual"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  op: "NotEqual"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  op: "LogicalAnd"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Assert/Const"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  op: "Assert"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/DecodeGif"
  op: "DecodeGif"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1:1"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/Assert/Assert"
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  op: "Switch"
  input: "decode_image_4/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_4/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_4"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1"
  op: "Switch"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_4"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Substr/pos"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Substr/len"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Substr"
  op: "Substr"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/Substr/pos"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  op: "Switch"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_4"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "BM"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/is_bmp"
  op: "Equal"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/Substr"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Assert_1/Const"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  op: "Assert"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/is_bmp"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_channels/x"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_channels/y"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_channels"
  op: "NotEqual"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_channels/x"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Assert_2/Const"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  op: "Const"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  op: "Assert"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/check_channels"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  op: "DecodeBmp"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  input: "^decode_image_4/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/cond_gif/Merge"
  op: "Merge"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/DecodeGif"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/cond_png/Merge"
  op: "Merge"
  input: "decode_image_4/cond_jpeg/cond_png/cond_gif/Merge"
  input: "decode_image_4/cond_jpeg/cond_png/DecodePng"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_4/cond_jpeg/Merge"
  op: "Merge"
  input: "decode_image_4/cond_jpeg/cond_png/Merge"
  input: "decode_image_4/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/ExpandDims"
  op: "ExpandDims"
  input: "decode_image_4/cond_jpeg/Merge"
  input: "resize_image_with_crop_or_pad_4/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_4/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_4/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_4/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_4/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_4/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_4/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_4/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_4/ExpandDims"
  input: "^resize_image_with_crop_or_pad_4/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_4/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_4/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_4/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_4/sub/x"
  input: "resize_image_with_crop_or_pad_4/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Neg"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_4/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/floordiv"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_4/Neg"
  input: "resize_image_with_crop_or_pad_4/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Maximum"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_4/floordiv"
  input: "resize_image_with_crop_or_pad_4/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/floordiv_1"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_4/sub"
  input: "resize_image_with_crop_or_pad_4/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Maximum_1"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_4/floordiv_1"
  input: "resize_image_with_crop_or_pad_4/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_4/sub_1/x"
  input: "resize_image_with_crop_or_pad_4/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Neg_1"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_4/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/floordiv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/floordiv_2"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_4/Neg_1"
  input: "resize_image_with_crop_or_pad_4/floordiv_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Maximum_2"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_4/floordiv_2"
  input: "resize_image_with_crop_or_pad_4/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/floordiv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/floordiv_3"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_4/sub_1"
  input: "resize_image_with_crop_or_pad_4/floordiv_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Maximum_3"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_4/floordiv_3"
  input: "resize_image_with_crop_or_pad_4/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Minimum"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_4/Minimum/x"
  input: "resize_image_with_crop_or_pad_4/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Minimum_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Minimum_1"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_4/Minimum_1/x"
  input: "resize_image_with_crop_or_pad_4/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_4/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_4/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_4/Maximum"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_4/Maximum_2"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_4/Minimum_1"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Greater"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Greater_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Greater_1"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_4/Minimum"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Greater_1"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/add"
  op: "Add"
  input: "resize_image_with_crop_or_pad_4/Minimum_1"
  input: "resize_image_with_crop_or_pad_4/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/unstack:2"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_4/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_4/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_4/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/add_1"
  op: "Add"
  input: "resize_image_with_crop_or_pad_4/Minimum"
  input: "resize_image_with_crop_or_pad_4/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/unstack:1"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_5/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_5/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_5/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_4/control_dependency"
  input: "^resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_4/Assert"
  input: "^resize_image_with_crop_or_pad_4/crop_to_bounding_box/Assert_5/Assert"
  input: "^resize_image_with_crop_or_pad_4/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_4/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_4/Maximum_2"
  input: "resize_image_with_crop_or_pad_4/Maximum"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/stack_1/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/stack_1/0"
  input: "resize_image_with_crop_or_pad_4/Minimum"
  input: "resize_image_with_crop_or_pad_4/Minimum_1"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/stack_1/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/sub/x"
  input: "resize_image_with_crop_or_pad_4/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/sub"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/sub_2"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/sub_2/x"
  input: "resize_image_with_crop_or_pad_4/Maximum_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/sub_3"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/sub_2"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_4/Maximum_3"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_4/Maximum_1"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_4/crop_to_bounding_box/Slice"
  input: "^resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_4/pad_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_4/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_4/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/stack/1"
  input: "resize_image_with_crop_or_pad_4/Maximum_3"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_4/Maximum_1"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/stack/6"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Shape_2"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/unstack_1"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_4/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/control_dependency_1"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_4/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_4/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_4/Squeeze"
  op: "Squeeze"
  input: "resize_image_with_crop_or_pad_4/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_4/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_4/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_4/Squeeze"
      }
    }
  }
}
node {
  name: "per_image_standardization_4/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_4/Prod"
  op: "Prod"
  input: "per_image_standardization_4/Shape"
  input: "per_image_standardization_4/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_4/Cast"
  op: "Cast"
  input: "per_image_standardization_4/control_dependency"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "per_image_standardization_4/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_4/Mean"
  op: "Mean"
  input: "per_image_standardization_4/Cast"
  input: "per_image_standardization_4/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_4/Square"
  op: "Square"
  input: "per_image_standardization_4/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_4/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_4/Mean_1"
  op: "Mean"
  input: "per_image_standardization_4/Square"
  input: "per_image_standardization_4/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_4/Square_1"
  op: "Square"
  input: "per_image_standardization_4/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_4/sub"
  op: "Sub"
  input: "per_image_standardization_4/Mean_1"
  input: "per_image_standardization_4/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_4/Relu"
  op: "Relu"
  input: "per_image_standardization_4/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_4/Sqrt"
  op: "Sqrt"
  input: "per_image_standardization_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_4/Cast_1"
  op: "Cast"
  input: "per_image_standardization_4/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "per_image_standardization_4/Rsqrt"
  op: "Rsqrt"
  input: "per_image_standardization_4/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_4/Maximum"
  op: "Maximum"
  input: "per_image_standardization_4/Sqrt"
  input: "per_image_standardization_4/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_4/Sub"
  op: "Sub"
  input: "per_image_standardization_4/Cast"
  input: "per_image_standardization_4/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_4"
  op: "RealDiv"
  input: "per_image_standardization_4/Sub"
  input: "per_image_standardization_4/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadFile_5"
  op: "ReadFile"
  input: "unstack_1:2"
}
node {
  name: "decode_image_5/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_5/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_5/Substr"
  op: "Substr"
  input: "ReadFile_5"
  input: "decode_image_5/Substr/pos"
  input: "decode_image_5/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_5/is_jpeg/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_5/is_jpeg/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_5/is_jpeg/Substr"
  op: "Substr"
  input: "ReadFile_5"
  input: "decode_image_5/is_jpeg/Substr/pos"
  input: "decode_image_5/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_5/is_jpeg/Equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "decode_image_5/is_jpeg/Equal"
  op: "Equal"
  input: "decode_image_5/is_jpeg/Substr"
  input: "decode_image_5/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/Switch"
  op: "Switch"
  input: "decode_image_5/is_jpeg/Equal"
  input: "decode_image_5/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/switch_t"
  op: "Identity"
  input: "decode_image_5/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/switch_f"
  op: "Identity"
  input: "decode_image_5/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/pred_id"
  op: "Identity"
  input: "decode_image_5/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/check_jpeg_channels/x"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/check_jpeg_channels/y"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/check_jpeg_channels"
  op: "NotEqual"
  input: "decode_image_5/cond_jpeg/check_jpeg_channels/x"
  input: "decode_image_5/cond_jpeg/check_jpeg_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/Assert/Const"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/Assert/Assert"
  op: "Assert"
  input: "decode_image_5/cond_jpeg/check_jpeg_channels"
  input: "decode_image_5/cond_jpeg/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "decode_image_5/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^decode_image_5/cond_jpeg/Assert/Assert"
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "ReadFile_5"
  input: "decode_image_5/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_5"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/is_png/y"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\211PN"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/is_png"
  op: "Equal"
  input: "decode_image_5/cond_jpeg/is_png/Switch"
  input: "decode_image_5/cond_jpeg/is_png/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/is_png/Switch"
  op: "Switch"
  input: "decode_image_5/Substr"
  input: "decode_image_5/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_5/Substr"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/Switch"
  op: "Switch"
  input: "decode_image_5/cond_jpeg/is_png"
  input: "decode_image_5/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/switch_t"
  op: "Identity"
  input: "decode_image_5/cond_jpeg/cond_png/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/switch_f"
  op: "Identity"
  input: "decode_image_5/cond_jpeg/cond_png/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/pred_id"
  op: "Identity"
  input: "decode_image_5/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/DecodePng"
  op: "DecodePng"
  input: "decode_image_5/cond_jpeg/cond_png/DecodePng/Switch_1:1"
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/DecodePng/Switch"
  op: "Switch"
  input: "ReadFile_5"
  input: "decode_image_5/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_5"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/DecodePng/Switch_1"
  op: "Switch"
  input: "decode_image_5/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_5/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_5"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/is_gif/y"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "GIF"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/is_gif"
  op: "Equal"
  input: "decode_image_5/cond_jpeg/cond_png/is_gif/Switch"
  input: "decode_image_5/cond_jpeg/cond_png/is_gif/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/is_gif/Switch"
  op: "Switch"
  input: "decode_image_5/cond_jpeg/is_png/Switch"
  input: "decode_image_5/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_5/Substr"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Switch"
  op: "Switch"
  input: "decode_image_5/cond_jpeg/cond_png/is_gif"
  input: "decode_image_5/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/switch_t"
  op: "Identity"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/switch_f"
  op: "Identity"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/pred_id"
  op: "Identity"
  input: "decode_image_5/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  op: "NotEqual"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  op: "NotEqual"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  op: "LogicalAnd"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Assert/Const"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  op: "Assert"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/DecodeGif"
  op: "DecodeGif"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1:1"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/Assert/Assert"
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  op: "Switch"
  input: "decode_image_5/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_5/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_5"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1"
  op: "Switch"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_5"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Substr/pos"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Substr/len"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Substr"
  op: "Substr"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/Substr/pos"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  op: "Switch"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_5"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "BM"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/is_bmp"
  op: "Equal"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/Substr"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Assert_1/Const"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  op: "Assert"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/is_bmp"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_channels/x"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_channels/y"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_channels"
  op: "NotEqual"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_channels/x"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Assert_2/Const"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  op: "Const"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  op: "Assert"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/check_channels"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  op: "DecodeBmp"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  input: "^decode_image_5/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/cond_gif/Merge"
  op: "Merge"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/DecodeGif"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/cond_png/Merge"
  op: "Merge"
  input: "decode_image_5/cond_jpeg/cond_png/cond_gif/Merge"
  input: "decode_image_5/cond_jpeg/cond_png/DecodePng"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_5/cond_jpeg/Merge"
  op: "Merge"
  input: "decode_image_5/cond_jpeg/cond_png/Merge"
  input: "decode_image_5/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/ExpandDims"
  op: "ExpandDims"
  input: "decode_image_5/cond_jpeg/Merge"
  input: "resize_image_with_crop_or_pad_5/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_5/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_5/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_5/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_5/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_5/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_5/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_5/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_5/ExpandDims"
  input: "^resize_image_with_crop_or_pad_5/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_5/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_5/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_5/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_5/sub/x"
  input: "resize_image_with_crop_or_pad_5/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Neg"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_5/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/floordiv"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_5/Neg"
  input: "resize_image_with_crop_or_pad_5/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Maximum"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_5/floordiv"
  input: "resize_image_with_crop_or_pad_5/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/floordiv_1"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_5/sub"
  input: "resize_image_with_crop_or_pad_5/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Maximum_1"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_5/floordiv_1"
  input: "resize_image_with_crop_or_pad_5/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_5/sub_1/x"
  input: "resize_image_with_crop_or_pad_5/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Neg_1"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_5/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/floordiv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/floordiv_2"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_5/Neg_1"
  input: "resize_image_with_crop_or_pad_5/floordiv_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Maximum_2"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_5/floordiv_2"
  input: "resize_image_with_crop_or_pad_5/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/floordiv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/floordiv_3"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_5/sub_1"
  input: "resize_image_with_crop_or_pad_5/floordiv_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Maximum_3"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_5/floordiv_3"
  input: "resize_image_with_crop_or_pad_5/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Minimum"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_5/Minimum/x"
  input: "resize_image_with_crop_or_pad_5/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Minimum_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Minimum_1"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_5/Minimum_1/x"
  input: "resize_image_with_crop_or_pad_5/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_5/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_5/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_5/Maximum"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_5/Maximum_2"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_5/Minimum_1"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Greater"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Greater_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Greater_1"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_5/Minimum"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Greater_1"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/add"
  op: "Add"
  input: "resize_image_with_crop_or_pad_5/Minimum_1"
  input: "resize_image_with_crop_or_pad_5/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/unstack:2"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_4/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_4/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_4/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/add_1"
  op: "Add"
  input: "resize_image_with_crop_or_pad_5/Minimum"
  input: "resize_image_with_crop_or_pad_5/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/unstack:1"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_5/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_5/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_5/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_5/control_dependency"
  input: "^resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_4/Assert"
  input: "^resize_image_with_crop_or_pad_5/crop_to_bounding_box/Assert_5/Assert"
  input: "^resize_image_with_crop_or_pad_5/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_5/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_5/Maximum_2"
  input: "resize_image_with_crop_or_pad_5/Maximum"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/stack_1/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/stack_1/0"
  input: "resize_image_with_crop_or_pad_5/Minimum"
  input: "resize_image_with_crop_or_pad_5/Minimum_1"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/stack_1/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/sub/x"
  input: "resize_image_with_crop_or_pad_5/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/sub"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/sub_2"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/sub_2/x"
  input: "resize_image_with_crop_or_pad_5/Maximum_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/sub_3"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/sub_2"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_5/Maximum_3"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_5/Maximum_1"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_5/crop_to_bounding_box/Slice"
  input: "^resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_5/pad_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_5/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_5/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/stack/1"
  input: "resize_image_with_crop_or_pad_5/Maximum_3"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_5/Maximum_1"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/stack/6"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Shape_2"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/unstack_1"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_5/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/control_dependency_1"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_5/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_5/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_5/Squeeze"
  op: "Squeeze"
  input: "resize_image_with_crop_or_pad_5/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_5/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_5/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_5/Squeeze"
      }
    }
  }
}
node {
  name: "per_image_standardization_5/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_5/Prod"
  op: "Prod"
  input: "per_image_standardization_5/Shape"
  input: "per_image_standardization_5/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_5/Cast"
  op: "Cast"
  input: "per_image_standardization_5/control_dependency"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "per_image_standardization_5/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_5/Mean"
  op: "Mean"
  input: "per_image_standardization_5/Cast"
  input: "per_image_standardization_5/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_5/Square"
  op: "Square"
  input: "per_image_standardization_5/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_5/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_5/Mean_1"
  op: "Mean"
  input: "per_image_standardization_5/Square"
  input: "per_image_standardization_5/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_5/Square_1"
  op: "Square"
  input: "per_image_standardization_5/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_5/sub"
  op: "Sub"
  input: "per_image_standardization_5/Mean_1"
  input: "per_image_standardization_5/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_5/Relu"
  op: "Relu"
  input: "per_image_standardization_5/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_5/Sqrt"
  op: "Sqrt"
  input: "per_image_standardization_5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_5/Cast_1"
  op: "Cast"
  input: "per_image_standardization_5/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "per_image_standardization_5/Rsqrt"
  op: "Rsqrt"
  input: "per_image_standardization_5/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_5/Maximum"
  op: "Maximum"
  input: "per_image_standardization_5/Sqrt"
  input: "per_image_standardization_5/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_5/Sub"
  op: "Sub"
  input: "per_image_standardization_5/Cast"
  input: "per_image_standardization_5/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_5"
  op: "RealDiv"
  input: "per_image_standardization_5/Sub"
  input: "per_image_standardization_5/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FIFOQueueV2_Dequeue_2"
  op: "QueueDequeueV2"
  input: "FIFOQueueV2"
  attr {
    key: "component_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "unstack_2"
  op: "Unpack"
  input: "FIFOQueueV2_Dequeue_2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 3
    }
  }
}
node {
  name: "ReadFile_6"
  op: "ReadFile"
  input: "unstack_2"
}
node {
  name: "decode_image_6/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_6/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_6/Substr"
  op: "Substr"
  input: "ReadFile_6"
  input: "decode_image_6/Substr/pos"
  input: "decode_image_6/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_6/is_jpeg/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_6/is_jpeg/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_6/is_jpeg/Substr"
  op: "Substr"
  input: "ReadFile_6"
  input: "decode_image_6/is_jpeg/Substr/pos"
  input: "decode_image_6/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_6/is_jpeg/Equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "decode_image_6/is_jpeg/Equal"
  op: "Equal"
  input: "decode_image_6/is_jpeg/Substr"
  input: "decode_image_6/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/Switch"
  op: "Switch"
  input: "decode_image_6/is_jpeg/Equal"
  input: "decode_image_6/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/switch_t"
  op: "Identity"
  input: "decode_image_6/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/switch_f"
  op: "Identity"
  input: "decode_image_6/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/pred_id"
  op: "Identity"
  input: "decode_image_6/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/check_jpeg_channels/x"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/check_jpeg_channels/y"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/check_jpeg_channels"
  op: "NotEqual"
  input: "decode_image_6/cond_jpeg/check_jpeg_channels/x"
  input: "decode_image_6/cond_jpeg/check_jpeg_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/Assert/Const"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/Assert/Assert"
  op: "Assert"
  input: "decode_image_6/cond_jpeg/check_jpeg_channels"
  input: "decode_image_6/cond_jpeg/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "decode_image_6/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^decode_image_6/cond_jpeg/Assert/Assert"
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "ReadFile_6"
  input: "decode_image_6/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_6"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/is_png/y"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\211PN"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/is_png"
  op: "Equal"
  input: "decode_image_6/cond_jpeg/is_png/Switch"
  input: "decode_image_6/cond_jpeg/is_png/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/is_png/Switch"
  op: "Switch"
  input: "decode_image_6/Substr"
  input: "decode_image_6/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_6/Substr"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/Switch"
  op: "Switch"
  input: "decode_image_6/cond_jpeg/is_png"
  input: "decode_image_6/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/switch_t"
  op: "Identity"
  input: "decode_image_6/cond_jpeg/cond_png/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/switch_f"
  op: "Identity"
  input: "decode_image_6/cond_jpeg/cond_png/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/pred_id"
  op: "Identity"
  input: "decode_image_6/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/DecodePng"
  op: "DecodePng"
  input: "decode_image_6/cond_jpeg/cond_png/DecodePng/Switch_1:1"
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/DecodePng/Switch"
  op: "Switch"
  input: "ReadFile_6"
  input: "decode_image_6/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_6"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/DecodePng/Switch_1"
  op: "Switch"
  input: "decode_image_6/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_6/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_6"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/is_gif/y"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "GIF"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/is_gif"
  op: "Equal"
  input: "decode_image_6/cond_jpeg/cond_png/is_gif/Switch"
  input: "decode_image_6/cond_jpeg/cond_png/is_gif/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/is_gif/Switch"
  op: "Switch"
  input: "decode_image_6/cond_jpeg/is_png/Switch"
  input: "decode_image_6/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_6/Substr"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Switch"
  op: "Switch"
  input: "decode_image_6/cond_jpeg/cond_png/is_gif"
  input: "decode_image_6/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/switch_t"
  op: "Identity"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/switch_f"
  op: "Identity"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/pred_id"
  op: "Identity"
  input: "decode_image_6/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  op: "NotEqual"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  op: "NotEqual"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  op: "LogicalAnd"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Assert/Const"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  op: "Assert"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/DecodeGif"
  op: "DecodeGif"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1:1"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/Assert/Assert"
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  op: "Switch"
  input: "decode_image_6/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_6/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_6"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1"
  op: "Switch"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_6"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Substr/pos"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Substr/len"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Substr"
  op: "Substr"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/Substr/pos"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  op: "Switch"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_6"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "BM"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/is_bmp"
  op: "Equal"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/Substr"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Assert_1/Const"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  op: "Assert"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/is_bmp"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_channels/x"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_channels/y"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_channels"
  op: "NotEqual"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_channels/x"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Assert_2/Const"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  op: "Const"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  op: "Assert"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/check_channels"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  op: "DecodeBmp"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  input: "^decode_image_6/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/cond_gif/Merge"
  op: "Merge"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/DecodeGif"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/cond_png/Merge"
  op: "Merge"
  input: "decode_image_6/cond_jpeg/cond_png/cond_gif/Merge"
  input: "decode_image_6/cond_jpeg/cond_png/DecodePng"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_6/cond_jpeg/Merge"
  op: "Merge"
  input: "decode_image_6/cond_jpeg/cond_png/Merge"
  input: "decode_image_6/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/ExpandDims"
  op: "ExpandDims"
  input: "decode_image_6/cond_jpeg/Merge"
  input: "resize_image_with_crop_or_pad_6/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_6/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_6/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_6/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_6/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_6/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_6/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_6/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_6/ExpandDims"
  input: "^resize_image_with_crop_or_pad_6/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_6/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_6/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_6/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_6/sub/x"
  input: "resize_image_with_crop_or_pad_6/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Neg"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_6/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/floordiv"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_6/Neg"
  input: "resize_image_with_crop_or_pad_6/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Maximum"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_6/floordiv"
  input: "resize_image_with_crop_or_pad_6/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/floordiv_1"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_6/sub"
  input: "resize_image_with_crop_or_pad_6/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Maximum_1"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_6/floordiv_1"
  input: "resize_image_with_crop_or_pad_6/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_6/sub_1/x"
  input: "resize_image_with_crop_or_pad_6/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Neg_1"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_6/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/floordiv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/floordiv_2"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_6/Neg_1"
  input: "resize_image_with_crop_or_pad_6/floordiv_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Maximum_2"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_6/floordiv_2"
  input: "resize_image_with_crop_or_pad_6/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/floordiv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/floordiv_3"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_6/sub_1"
  input: "resize_image_with_crop_or_pad_6/floordiv_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Maximum_3"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_6/floordiv_3"
  input: "resize_image_with_crop_or_pad_6/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Minimum"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_6/Minimum/x"
  input: "resize_image_with_crop_or_pad_6/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Minimum_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Minimum_1"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_6/Minimum_1/x"
  input: "resize_image_with_crop_or_pad_6/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_6/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_6/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_6/Maximum"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_6/Maximum_2"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_6/Minimum_1"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Greater"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Greater_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Greater_1"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_6/Minimum"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Greater_1"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/add"
  op: "Add"
  input: "resize_image_with_crop_or_pad_6/Minimum_1"
  input: "resize_image_with_crop_or_pad_6/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/unstack:2"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_4/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_4/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_4/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/add_1"
  op: "Add"
  input: "resize_image_with_crop_or_pad_6/Minimum"
  input: "resize_image_with_crop_or_pad_6/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/unstack:1"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_5/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_5/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_5/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_6/control_dependency"
  input: "^resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_4/Assert"
  input: "^resize_image_with_crop_or_pad_6/crop_to_bounding_box/Assert_5/Assert"
  input: "^resize_image_with_crop_or_pad_6/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_6/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_6/Maximum_2"
  input: "resize_image_with_crop_or_pad_6/Maximum"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/stack_1/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/stack_1/0"
  input: "resize_image_with_crop_or_pad_6/Minimum"
  input: "resize_image_with_crop_or_pad_6/Minimum_1"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/stack_1/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/sub/x"
  input: "resize_image_with_crop_or_pad_6/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/sub"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/sub_2"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/sub_2/x"
  input: "resize_image_with_crop_or_pad_6/Maximum_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/sub_3"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/sub_2"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_6/Maximum_3"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_6/Maximum_1"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_6/crop_to_bounding_box/Slice"
  input: "^resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_6/pad_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_6/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_6/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/stack/1"
  input: "resize_image_with_crop_or_pad_6/Maximum_3"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_6/Maximum_1"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/stack/6"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Shape_2"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/unstack_1"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_6/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/control_dependency_1"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_6/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_6/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_6/Squeeze"
  op: "Squeeze"
  input: "resize_image_with_crop_or_pad_6/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_6/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_6/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_6/Squeeze"
      }
    }
  }
}
node {
  name: "per_image_standardization_6/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_6/Prod"
  op: "Prod"
  input: "per_image_standardization_6/Shape"
  input: "per_image_standardization_6/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_6/Cast"
  op: "Cast"
  input: "per_image_standardization_6/control_dependency"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "per_image_standardization_6/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_6/Mean"
  op: "Mean"
  input: "per_image_standardization_6/Cast"
  input: "per_image_standardization_6/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_6/Square"
  op: "Square"
  input: "per_image_standardization_6/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_6/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_6/Mean_1"
  op: "Mean"
  input: "per_image_standardization_6/Square"
  input: "per_image_standardization_6/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_6/Square_1"
  op: "Square"
  input: "per_image_standardization_6/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_6/sub"
  op: "Sub"
  input: "per_image_standardization_6/Mean_1"
  input: "per_image_standardization_6/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_6/Relu"
  op: "Relu"
  input: "per_image_standardization_6/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_6/Sqrt"
  op: "Sqrt"
  input: "per_image_standardization_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_6/Cast_1"
  op: "Cast"
  input: "per_image_standardization_6/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "per_image_standardization_6/Rsqrt"
  op: "Rsqrt"
  input: "per_image_standardization_6/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_6/Maximum"
  op: "Maximum"
  input: "per_image_standardization_6/Sqrt"
  input: "per_image_standardization_6/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_6/Sub"
  op: "Sub"
  input: "per_image_standardization_6/Cast"
  input: "per_image_standardization_6/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_6"
  op: "RealDiv"
  input: "per_image_standardization_6/Sub"
  input: "per_image_standardization_6/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadFile_7"
  op: "ReadFile"
  input: "unstack_2:1"
}
node {
  name: "decode_image_7/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_7/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_7/Substr"
  op: "Substr"
  input: "ReadFile_7"
  input: "decode_image_7/Substr/pos"
  input: "decode_image_7/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_7/is_jpeg/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_7/is_jpeg/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_7/is_jpeg/Substr"
  op: "Substr"
  input: "ReadFile_7"
  input: "decode_image_7/is_jpeg/Substr/pos"
  input: "decode_image_7/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_7/is_jpeg/Equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "decode_image_7/is_jpeg/Equal"
  op: "Equal"
  input: "decode_image_7/is_jpeg/Substr"
  input: "decode_image_7/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/Switch"
  op: "Switch"
  input: "decode_image_7/is_jpeg/Equal"
  input: "decode_image_7/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/switch_t"
  op: "Identity"
  input: "decode_image_7/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/switch_f"
  op: "Identity"
  input: "decode_image_7/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/pred_id"
  op: "Identity"
  input: "decode_image_7/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/check_jpeg_channels/x"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/check_jpeg_channels/y"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/check_jpeg_channels"
  op: "NotEqual"
  input: "decode_image_7/cond_jpeg/check_jpeg_channels/x"
  input: "decode_image_7/cond_jpeg/check_jpeg_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/Assert/Const"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/Assert/Assert"
  op: "Assert"
  input: "decode_image_7/cond_jpeg/check_jpeg_channels"
  input: "decode_image_7/cond_jpeg/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "decode_image_7/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^decode_image_7/cond_jpeg/Assert/Assert"
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "ReadFile_7"
  input: "decode_image_7/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_7"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/is_png/y"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\211PN"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/is_png"
  op: "Equal"
  input: "decode_image_7/cond_jpeg/is_png/Switch"
  input: "decode_image_7/cond_jpeg/is_png/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/is_png/Switch"
  op: "Switch"
  input: "decode_image_7/Substr"
  input: "decode_image_7/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_7/Substr"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/Switch"
  op: "Switch"
  input: "decode_image_7/cond_jpeg/is_png"
  input: "decode_image_7/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/switch_t"
  op: "Identity"
  input: "decode_image_7/cond_jpeg/cond_png/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/switch_f"
  op: "Identity"
  input: "decode_image_7/cond_jpeg/cond_png/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/pred_id"
  op: "Identity"
  input: "decode_image_7/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/DecodePng"
  op: "DecodePng"
  input: "decode_image_7/cond_jpeg/cond_png/DecodePng/Switch_1:1"
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/DecodePng/Switch"
  op: "Switch"
  input: "ReadFile_7"
  input: "decode_image_7/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_7"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/DecodePng/Switch_1"
  op: "Switch"
  input: "decode_image_7/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_7/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_7"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/is_gif/y"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "GIF"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/is_gif"
  op: "Equal"
  input: "decode_image_7/cond_jpeg/cond_png/is_gif/Switch"
  input: "decode_image_7/cond_jpeg/cond_png/is_gif/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/is_gif/Switch"
  op: "Switch"
  input: "decode_image_7/cond_jpeg/is_png/Switch"
  input: "decode_image_7/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_7/Substr"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Switch"
  op: "Switch"
  input: "decode_image_7/cond_jpeg/cond_png/is_gif"
  input: "decode_image_7/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/switch_t"
  op: "Identity"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/switch_f"
  op: "Identity"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/pred_id"
  op: "Identity"
  input: "decode_image_7/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  op: "NotEqual"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  op: "NotEqual"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  op: "LogicalAnd"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Assert/Const"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  op: "Assert"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/DecodeGif"
  op: "DecodeGif"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1:1"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/Assert/Assert"
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  op: "Switch"
  input: "decode_image_7/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_7/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_7"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1"
  op: "Switch"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_7"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Substr/pos"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Substr/len"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Substr"
  op: "Substr"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/Substr/pos"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  op: "Switch"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_7"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "BM"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/is_bmp"
  op: "Equal"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/Substr"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Assert_1/Const"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  op: "Assert"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/is_bmp"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_channels/x"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_channels/y"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_channels"
  op: "NotEqual"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_channels/x"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Assert_2/Const"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  op: "Const"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  op: "Assert"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/check_channels"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  op: "DecodeBmp"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  input: "^decode_image_7/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/cond_gif/Merge"
  op: "Merge"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/DecodeGif"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/cond_png/Merge"
  op: "Merge"
  input: "decode_image_7/cond_jpeg/cond_png/cond_gif/Merge"
  input: "decode_image_7/cond_jpeg/cond_png/DecodePng"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_7/cond_jpeg/Merge"
  op: "Merge"
  input: "decode_image_7/cond_jpeg/cond_png/Merge"
  input: "decode_image_7/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/ExpandDims"
  op: "ExpandDims"
  input: "decode_image_7/cond_jpeg/Merge"
  input: "resize_image_with_crop_or_pad_7/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_7/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_7/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_7/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_7/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_7/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_7/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_7/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_7/ExpandDims"
  input: "^resize_image_with_crop_or_pad_7/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_7/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_7/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_7/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_7/sub/x"
  input: "resize_image_with_crop_or_pad_7/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Neg"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_7/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/floordiv"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_7/Neg"
  input: "resize_image_with_crop_or_pad_7/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Maximum"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_7/floordiv"
  input: "resize_image_with_crop_or_pad_7/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/floordiv_1"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_7/sub"
  input: "resize_image_with_crop_or_pad_7/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Maximum_1"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_7/floordiv_1"
  input: "resize_image_with_crop_or_pad_7/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_7/sub_1/x"
  input: "resize_image_with_crop_or_pad_7/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Neg_1"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_7/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/floordiv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/floordiv_2"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_7/Neg_1"
  input: "resize_image_with_crop_or_pad_7/floordiv_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Maximum_2"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_7/floordiv_2"
  input: "resize_image_with_crop_or_pad_7/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/floordiv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/floordiv_3"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_7/sub_1"
  input: "resize_image_with_crop_or_pad_7/floordiv_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Maximum_3"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_7/floordiv_3"
  input: "resize_image_with_crop_or_pad_7/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Minimum"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_7/Minimum/x"
  input: "resize_image_with_crop_or_pad_7/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Minimum_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Minimum_1"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_7/Minimum_1/x"
  input: "resize_image_with_crop_or_pad_7/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_7/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_7/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_7/Maximum"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_7/Maximum_2"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_7/Minimum_1"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Greater"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Greater_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Greater_1"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_7/Minimum"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Greater_1"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/add"
  op: "Add"
  input: "resize_image_with_crop_or_pad_7/Minimum_1"
  input: "resize_image_with_crop_or_pad_7/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/unstack:2"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_4/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_4/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_4/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/add_1"
  op: "Add"
  input: "resize_image_with_crop_or_pad_7/Minimum"
  input: "resize_image_with_crop_or_pad_7/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/unstack:1"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_5/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_5/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_5/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_7/control_dependency"
  input: "^resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_4/Assert"
  input: "^resize_image_with_crop_or_pad_7/crop_to_bounding_box/Assert_5/Assert"
  input: "^resize_image_with_crop_or_pad_7/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_7/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_7/Maximum_2"
  input: "resize_image_with_crop_or_pad_7/Maximum"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/stack_1/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/stack_1/0"
  input: "resize_image_with_crop_or_pad_7/Minimum"
  input: "resize_image_with_crop_or_pad_7/Minimum_1"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/stack_1/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/sub/x"
  input: "resize_image_with_crop_or_pad_7/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/sub"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/sub_2"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/sub_2/x"
  input: "resize_image_with_crop_or_pad_7/Maximum_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/sub_3"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/sub_2"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_7/Maximum_3"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_7/Maximum_1"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_7/crop_to_bounding_box/Slice"
  input: "^resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_7/pad_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_7/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_7/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/stack/1"
  input: "resize_image_with_crop_or_pad_7/Maximum_3"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_7/Maximum_1"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/stack/6"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Shape_2"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/unstack_1"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_7/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/control_dependency_1"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_7/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_7/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_7/Squeeze"
  op: "Squeeze"
  input: "resize_image_with_crop_or_pad_7/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_7/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_7/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_7/Squeeze"
      }
    }
  }
}
node {
  name: "per_image_standardization_7/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_7/Prod"
  op: "Prod"
  input: "per_image_standardization_7/Shape"
  input: "per_image_standardization_7/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_7/Cast"
  op: "Cast"
  input: "per_image_standardization_7/control_dependency"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "per_image_standardization_7/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_7/Mean"
  op: "Mean"
  input: "per_image_standardization_7/Cast"
  input: "per_image_standardization_7/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_7/Square"
  op: "Square"
  input: "per_image_standardization_7/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_7/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_7/Mean_1"
  op: "Mean"
  input: "per_image_standardization_7/Square"
  input: "per_image_standardization_7/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_7/Square_1"
  op: "Square"
  input: "per_image_standardization_7/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_7/sub"
  op: "Sub"
  input: "per_image_standardization_7/Mean_1"
  input: "per_image_standardization_7/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_7/Relu"
  op: "Relu"
  input: "per_image_standardization_7/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_7/Sqrt"
  op: "Sqrt"
  input: "per_image_standardization_7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_7/Cast_1"
  op: "Cast"
  input: "per_image_standardization_7/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "per_image_standardization_7/Rsqrt"
  op: "Rsqrt"
  input: "per_image_standardization_7/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_7/Maximum"
  op: "Maximum"
  input: "per_image_standardization_7/Sqrt"
  input: "per_image_standardization_7/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_7/Sub"
  op: "Sub"
  input: "per_image_standardization_7/Cast"
  input: "per_image_standardization_7/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_7"
  op: "RealDiv"
  input: "per_image_standardization_7/Sub"
  input: "per_image_standardization_7/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadFile_8"
  op: "ReadFile"
  input: "unstack_2:2"
}
node {
  name: "decode_image_8/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_8/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_8/Substr"
  op: "Substr"
  input: "ReadFile_8"
  input: "decode_image_8/Substr/pos"
  input: "decode_image_8/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_8/is_jpeg/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_8/is_jpeg/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_8/is_jpeg/Substr"
  op: "Substr"
  input: "ReadFile_8"
  input: "decode_image_8/is_jpeg/Substr/pos"
  input: "decode_image_8/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_8/is_jpeg/Equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "decode_image_8/is_jpeg/Equal"
  op: "Equal"
  input: "decode_image_8/is_jpeg/Substr"
  input: "decode_image_8/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/Switch"
  op: "Switch"
  input: "decode_image_8/is_jpeg/Equal"
  input: "decode_image_8/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/switch_t"
  op: "Identity"
  input: "decode_image_8/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/switch_f"
  op: "Identity"
  input: "decode_image_8/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/pred_id"
  op: "Identity"
  input: "decode_image_8/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/check_jpeg_channels/x"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/check_jpeg_channels/y"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/check_jpeg_channels"
  op: "NotEqual"
  input: "decode_image_8/cond_jpeg/check_jpeg_channels/x"
  input: "decode_image_8/cond_jpeg/check_jpeg_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/Assert/Const"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/Assert/Assert"
  op: "Assert"
  input: "decode_image_8/cond_jpeg/check_jpeg_channels"
  input: "decode_image_8/cond_jpeg/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "decode_image_8/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^decode_image_8/cond_jpeg/Assert/Assert"
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "ReadFile_8"
  input: "decode_image_8/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_8"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/is_png/y"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\211PN"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/is_png"
  op: "Equal"
  input: "decode_image_8/cond_jpeg/is_png/Switch"
  input: "decode_image_8/cond_jpeg/is_png/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/is_png/Switch"
  op: "Switch"
  input: "decode_image_8/Substr"
  input: "decode_image_8/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_8/Substr"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/Switch"
  op: "Switch"
  input: "decode_image_8/cond_jpeg/is_png"
  input: "decode_image_8/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/switch_t"
  op: "Identity"
  input: "decode_image_8/cond_jpeg/cond_png/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/switch_f"
  op: "Identity"
  input: "decode_image_8/cond_jpeg/cond_png/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/pred_id"
  op: "Identity"
  input: "decode_image_8/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/DecodePng"
  op: "DecodePng"
  input: "decode_image_8/cond_jpeg/cond_png/DecodePng/Switch_1:1"
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/DecodePng/Switch"
  op: "Switch"
  input: "ReadFile_8"
  input: "decode_image_8/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_8"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/DecodePng/Switch_1"
  op: "Switch"
  input: "decode_image_8/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_8/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_8"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/is_gif/y"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "GIF"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/is_gif"
  op: "Equal"
  input: "decode_image_8/cond_jpeg/cond_png/is_gif/Switch"
  input: "decode_image_8/cond_jpeg/cond_png/is_gif/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/is_gif/Switch"
  op: "Switch"
  input: "decode_image_8/cond_jpeg/is_png/Switch"
  input: "decode_image_8/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_8/Substr"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Switch"
  op: "Switch"
  input: "decode_image_8/cond_jpeg/cond_png/is_gif"
  input: "decode_image_8/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/switch_t"
  op: "Identity"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/switch_f"
  op: "Identity"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/pred_id"
  op: "Identity"
  input: "decode_image_8/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  op: "NotEqual"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  op: "NotEqual"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  op: "LogicalAnd"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Assert/Const"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  op: "Assert"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/DecodeGif"
  op: "DecodeGif"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1:1"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/Assert/Assert"
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  op: "Switch"
  input: "decode_image_8/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_8/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_8"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1"
  op: "Switch"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_8"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Substr/pos"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Substr/len"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Substr"
  op: "Substr"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/Substr/pos"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  op: "Switch"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_8"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "BM"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/is_bmp"
  op: "Equal"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/Substr"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Assert_1/Const"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  op: "Assert"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/is_bmp"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_channels/x"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_channels/y"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_channels"
  op: "NotEqual"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_channels/x"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Assert_2/Const"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  op: "Const"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  op: "Assert"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/check_channels"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  op: "DecodeBmp"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  input: "^decode_image_8/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/cond_gif/Merge"
  op: "Merge"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/DecodeGif"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/cond_png/Merge"
  op: "Merge"
  input: "decode_image_8/cond_jpeg/cond_png/cond_gif/Merge"
  input: "decode_image_8/cond_jpeg/cond_png/DecodePng"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_8/cond_jpeg/Merge"
  op: "Merge"
  input: "decode_image_8/cond_jpeg/cond_png/Merge"
  input: "decode_image_8/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/ExpandDims"
  op: "ExpandDims"
  input: "decode_image_8/cond_jpeg/Merge"
  input: "resize_image_with_crop_or_pad_8/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_8/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_8/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_8/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_8/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_8/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_8/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_8/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_8/ExpandDims"
  input: "^resize_image_with_crop_or_pad_8/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_8/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_8/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_8/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_8/sub/x"
  input: "resize_image_with_crop_or_pad_8/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Neg"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_8/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/floordiv"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_8/Neg"
  input: "resize_image_with_crop_or_pad_8/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Maximum"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_8/floordiv"
  input: "resize_image_with_crop_or_pad_8/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/floordiv_1"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_8/sub"
  input: "resize_image_with_crop_or_pad_8/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Maximum_1"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_8/floordiv_1"
  input: "resize_image_with_crop_or_pad_8/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_8/sub_1/x"
  input: "resize_image_with_crop_or_pad_8/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Neg_1"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_8/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/floordiv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/floordiv_2"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_8/Neg_1"
  input: "resize_image_with_crop_or_pad_8/floordiv_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Maximum_2"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_8/floordiv_2"
  input: "resize_image_with_crop_or_pad_8/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/floordiv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/floordiv_3"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_8/sub_1"
  input: "resize_image_with_crop_or_pad_8/floordiv_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Maximum_3"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_8/floordiv_3"
  input: "resize_image_with_crop_or_pad_8/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Minimum"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_8/Minimum/x"
  input: "resize_image_with_crop_or_pad_8/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Minimum_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Minimum_1"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_8/Minimum_1/x"
  input: "resize_image_with_crop_or_pad_8/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_8/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_8/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_8/Maximum"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_8/Maximum_2"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_8/Minimum_1"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Greater"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Greater_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Greater_1"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_8/Minimum"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Greater_1"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/add"
  op: "Add"
  input: "resize_image_with_crop_or_pad_8/Minimum_1"
  input: "resize_image_with_crop_or_pad_8/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/unstack:2"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_4/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_4/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_4/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/add_1"
  op: "Add"
  input: "resize_image_with_crop_or_pad_8/Minimum"
  input: "resize_image_with_crop_or_pad_8/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/unstack:1"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_5/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_5/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_5/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_8/control_dependency"
  input: "^resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_4/Assert"
  input: "^resize_image_with_crop_or_pad_8/crop_to_bounding_box/Assert_5/Assert"
  input: "^resize_image_with_crop_or_pad_8/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_8/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_8/Maximum_2"
  input: "resize_image_with_crop_or_pad_8/Maximum"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/stack_1/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/stack_1/0"
  input: "resize_image_with_crop_or_pad_8/Minimum"
  input: "resize_image_with_crop_or_pad_8/Minimum_1"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/stack_1/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/sub/x"
  input: "resize_image_with_crop_or_pad_8/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/sub"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/sub_2"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/sub_2/x"
  input: "resize_image_with_crop_or_pad_8/Maximum_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/sub_3"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/sub_2"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_8/Maximum_3"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_8/Maximum_1"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_8/crop_to_bounding_box/Slice"
  input: "^resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_8/pad_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_8/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_8/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/stack/1"
  input: "resize_image_with_crop_or_pad_8/Maximum_3"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_8/Maximum_1"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/stack/6"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Shape_2"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/unstack_1"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_8/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/control_dependency_1"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_8/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_8/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_8/Squeeze"
  op: "Squeeze"
  input: "resize_image_with_crop_or_pad_8/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_8/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_8/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_8/Squeeze"
      }
    }
  }
}
node {
  name: "per_image_standardization_8/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_8/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_8/Prod"
  op: "Prod"
  input: "per_image_standardization_8/Shape"
  input: "per_image_standardization_8/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_8/Cast"
  op: "Cast"
  input: "per_image_standardization_8/control_dependency"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "per_image_standardization_8/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_8/Mean"
  op: "Mean"
  input: "per_image_standardization_8/Cast"
  input: "per_image_standardization_8/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_8/Square"
  op: "Square"
  input: "per_image_standardization_8/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_8/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_8/Mean_1"
  op: "Mean"
  input: "per_image_standardization_8/Square"
  input: "per_image_standardization_8/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_8/Square_1"
  op: "Square"
  input: "per_image_standardization_8/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_8/sub"
  op: "Sub"
  input: "per_image_standardization_8/Mean_1"
  input: "per_image_standardization_8/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_8/Relu"
  op: "Relu"
  input: "per_image_standardization_8/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_8/Sqrt"
  op: "Sqrt"
  input: "per_image_standardization_8/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_8/Cast_1"
  op: "Cast"
  input: "per_image_standardization_8/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "per_image_standardization_8/Rsqrt"
  op: "Rsqrt"
  input: "per_image_standardization_8/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_8/Maximum"
  op: "Maximum"
  input: "per_image_standardization_8/Sqrt"
  input: "per_image_standardization_8/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_8/Sub"
  op: "Sub"
  input: "per_image_standardization_8/Cast"
  input: "per_image_standardization_8/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_8"
  op: "RealDiv"
  input: "per_image_standardization_8/Sub"
  input: "per_image_standardization_8/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FIFOQueueV2_Dequeue_3"
  op: "QueueDequeueV2"
  input: "FIFOQueueV2"
  attr {
    key: "component_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "unstack_3"
  op: "Unpack"
  input: "FIFOQueueV2_Dequeue_3"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 3
    }
  }
}
node {
  name: "ReadFile_9"
  op: "ReadFile"
  input: "unstack_3"
}
node {
  name: "decode_image_9/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_9/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_9/Substr"
  op: "Substr"
  input: "ReadFile_9"
  input: "decode_image_9/Substr/pos"
  input: "decode_image_9/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_9/is_jpeg/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_9/is_jpeg/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_9/is_jpeg/Substr"
  op: "Substr"
  input: "ReadFile_9"
  input: "decode_image_9/is_jpeg/Substr/pos"
  input: "decode_image_9/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_9/is_jpeg/Equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "decode_image_9/is_jpeg/Equal"
  op: "Equal"
  input: "decode_image_9/is_jpeg/Substr"
  input: "decode_image_9/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/Switch"
  op: "Switch"
  input: "decode_image_9/is_jpeg/Equal"
  input: "decode_image_9/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/switch_t"
  op: "Identity"
  input: "decode_image_9/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/switch_f"
  op: "Identity"
  input: "decode_image_9/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/pred_id"
  op: "Identity"
  input: "decode_image_9/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/check_jpeg_channels/x"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/check_jpeg_channels/y"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/check_jpeg_channels"
  op: "NotEqual"
  input: "decode_image_9/cond_jpeg/check_jpeg_channels/x"
  input: "decode_image_9/cond_jpeg/check_jpeg_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/Assert/Const"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/Assert/Assert"
  op: "Assert"
  input: "decode_image_9/cond_jpeg/check_jpeg_channels"
  input: "decode_image_9/cond_jpeg/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "decode_image_9/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^decode_image_9/cond_jpeg/Assert/Assert"
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "ReadFile_9"
  input: "decode_image_9/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_9"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/is_png/y"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\211PN"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/is_png"
  op: "Equal"
  input: "decode_image_9/cond_jpeg/is_png/Switch"
  input: "decode_image_9/cond_jpeg/is_png/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/is_png/Switch"
  op: "Switch"
  input: "decode_image_9/Substr"
  input: "decode_image_9/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_9/Substr"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/Switch"
  op: "Switch"
  input: "decode_image_9/cond_jpeg/is_png"
  input: "decode_image_9/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/switch_t"
  op: "Identity"
  input: "decode_image_9/cond_jpeg/cond_png/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/switch_f"
  op: "Identity"
  input: "decode_image_9/cond_jpeg/cond_png/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/pred_id"
  op: "Identity"
  input: "decode_image_9/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/DecodePng"
  op: "DecodePng"
  input: "decode_image_9/cond_jpeg/cond_png/DecodePng/Switch_1:1"
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/DecodePng/Switch"
  op: "Switch"
  input: "ReadFile_9"
  input: "decode_image_9/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_9"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/DecodePng/Switch_1"
  op: "Switch"
  input: "decode_image_9/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_9/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_9"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/is_gif/y"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "GIF"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/is_gif"
  op: "Equal"
  input: "decode_image_9/cond_jpeg/cond_png/is_gif/Switch"
  input: "decode_image_9/cond_jpeg/cond_png/is_gif/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/is_gif/Switch"
  op: "Switch"
  input: "decode_image_9/cond_jpeg/is_png/Switch"
  input: "decode_image_9/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_9/Substr"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Switch"
  op: "Switch"
  input: "decode_image_9/cond_jpeg/cond_png/is_gif"
  input: "decode_image_9/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/switch_t"
  op: "Identity"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/switch_f"
  op: "Identity"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/pred_id"
  op: "Identity"
  input: "decode_image_9/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  op: "NotEqual"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  op: "NotEqual"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  op: "LogicalAnd"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Assert/Const"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  op: "Assert"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/DecodeGif"
  op: "DecodeGif"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1:1"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/Assert/Assert"
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  op: "Switch"
  input: "decode_image_9/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_9/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_9"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1"
  op: "Switch"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_9"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Substr/pos"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Substr/len"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Substr"
  op: "Substr"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/Substr/pos"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  op: "Switch"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_9"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "BM"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/is_bmp"
  op: "Equal"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/Substr"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Assert_1/Const"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  op: "Assert"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/is_bmp"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_channels/x"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_channels/y"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_channels"
  op: "NotEqual"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_channels/x"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Assert_2/Const"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  op: "Const"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  op: "Assert"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/check_channels"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  op: "DecodeBmp"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  input: "^decode_image_9/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/cond_gif/Merge"
  op: "Merge"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/DecodeGif"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/cond_png/Merge"
  op: "Merge"
  input: "decode_image_9/cond_jpeg/cond_png/cond_gif/Merge"
  input: "decode_image_9/cond_jpeg/cond_png/DecodePng"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_9/cond_jpeg/Merge"
  op: "Merge"
  input: "decode_image_9/cond_jpeg/cond_png/Merge"
  input: "decode_image_9/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/ExpandDims"
  op: "ExpandDims"
  input: "decode_image_9/cond_jpeg/Merge"
  input: "resize_image_with_crop_or_pad_9/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_9/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_9/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_9/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_9/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_9/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_9/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_9/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_9/ExpandDims"
  input: "^resize_image_with_crop_or_pad_9/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_9/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_9/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_9/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_9/sub/x"
  input: "resize_image_with_crop_or_pad_9/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Neg"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_9/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/floordiv"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_9/Neg"
  input: "resize_image_with_crop_or_pad_9/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Maximum"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_9/floordiv"
  input: "resize_image_with_crop_or_pad_9/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/floordiv_1"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_9/sub"
  input: "resize_image_with_crop_or_pad_9/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Maximum_1"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_9/floordiv_1"
  input: "resize_image_with_crop_or_pad_9/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_9/sub_1/x"
  input: "resize_image_with_crop_or_pad_9/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Neg_1"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_9/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/floordiv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/floordiv_2"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_9/Neg_1"
  input: "resize_image_with_crop_or_pad_9/floordiv_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Maximum_2"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_9/floordiv_2"
  input: "resize_image_with_crop_or_pad_9/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/floordiv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/floordiv_3"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_9/sub_1"
  input: "resize_image_with_crop_or_pad_9/floordiv_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Maximum_3"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_9/floordiv_3"
  input: "resize_image_with_crop_or_pad_9/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Minimum"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_9/Minimum/x"
  input: "resize_image_with_crop_or_pad_9/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Minimum_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Minimum_1"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_9/Minimum_1/x"
  input: "resize_image_with_crop_or_pad_9/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_9/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_9/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_9/Maximum"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_9/Maximum_2"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_9/Minimum_1"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Greater"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Greater_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Greater_1"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_9/Minimum"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Greater_1"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/add"
  op: "Add"
  input: "resize_image_with_crop_or_pad_9/Minimum_1"
  input: "resize_image_with_crop_or_pad_9/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/unstack:2"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_4/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_4/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_4/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/add_1"
  op: "Add"
  input: "resize_image_with_crop_or_pad_9/Minimum"
  input: "resize_image_with_crop_or_pad_9/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/unstack:1"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_5/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_5/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_5/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_9/control_dependency"
  input: "^resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_4/Assert"
  input: "^resize_image_with_crop_or_pad_9/crop_to_bounding_box/Assert_5/Assert"
  input: "^resize_image_with_crop_or_pad_9/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_9/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_9/Maximum_2"
  input: "resize_image_with_crop_or_pad_9/Maximum"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/stack_1/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/stack_1/0"
  input: "resize_image_with_crop_or_pad_9/Minimum"
  input: "resize_image_with_crop_or_pad_9/Minimum_1"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/stack_1/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/sub/x"
  input: "resize_image_with_crop_or_pad_9/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/sub"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/sub_2"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/sub_2/x"
  input: "resize_image_with_crop_or_pad_9/Maximum_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/sub_3"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/sub_2"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_9/Maximum_3"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_9/Maximum_1"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_9/crop_to_bounding_box/Slice"
  input: "^resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_9/pad_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_9/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_9/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/stack/1"
  input: "resize_image_with_crop_or_pad_9/Maximum_3"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_9/Maximum_1"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/stack/6"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Shape_2"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/unstack_1"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_9/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/control_dependency_1"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_9/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_9/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_9/Squeeze"
  op: "Squeeze"
  input: "resize_image_with_crop_or_pad_9/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_9/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_9/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_9/Squeeze"
      }
    }
  }
}
node {
  name: "per_image_standardization_9/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_9/Prod"
  op: "Prod"
  input: "per_image_standardization_9/Shape"
  input: "per_image_standardization_9/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_9/Cast"
  op: "Cast"
  input: "per_image_standardization_9/control_dependency"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "per_image_standardization_9/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_9/Mean"
  op: "Mean"
  input: "per_image_standardization_9/Cast"
  input: "per_image_standardization_9/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_9/Square"
  op: "Square"
  input: "per_image_standardization_9/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_9/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_9/Mean_1"
  op: "Mean"
  input: "per_image_standardization_9/Square"
  input: "per_image_standardization_9/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_9/Square_1"
  op: "Square"
  input: "per_image_standardization_9/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_9/sub"
  op: "Sub"
  input: "per_image_standardization_9/Mean_1"
  input: "per_image_standardization_9/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_9/Relu"
  op: "Relu"
  input: "per_image_standardization_9/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_9/Sqrt"
  op: "Sqrt"
  input: "per_image_standardization_9/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_9/Cast_1"
  op: "Cast"
  input: "per_image_standardization_9/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "per_image_standardization_9/Rsqrt"
  op: "Rsqrt"
  input: "per_image_standardization_9/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_9/Maximum"
  op: "Maximum"
  input: "per_image_standardization_9/Sqrt"
  input: "per_image_standardization_9/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_9/Sub"
  op: "Sub"
  input: "per_image_standardization_9/Cast"
  input: "per_image_standardization_9/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_9"
  op: "RealDiv"
  input: "per_image_standardization_9/Sub"
  input: "per_image_standardization_9/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadFile_10"
  op: "ReadFile"
  input: "unstack_3:1"
}
node {
  name: "decode_image_10/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_10/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_10/Substr"
  op: "Substr"
  input: "ReadFile_10"
  input: "decode_image_10/Substr/pos"
  input: "decode_image_10/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_10/is_jpeg/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_10/is_jpeg/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_10/is_jpeg/Substr"
  op: "Substr"
  input: "ReadFile_10"
  input: "decode_image_10/is_jpeg/Substr/pos"
  input: "decode_image_10/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_10/is_jpeg/Equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "decode_image_10/is_jpeg/Equal"
  op: "Equal"
  input: "decode_image_10/is_jpeg/Substr"
  input: "decode_image_10/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/Switch"
  op: "Switch"
  input: "decode_image_10/is_jpeg/Equal"
  input: "decode_image_10/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/switch_t"
  op: "Identity"
  input: "decode_image_10/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/switch_f"
  op: "Identity"
  input: "decode_image_10/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/pred_id"
  op: "Identity"
  input: "decode_image_10/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/check_jpeg_channels/x"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/check_jpeg_channels/y"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/check_jpeg_channels"
  op: "NotEqual"
  input: "decode_image_10/cond_jpeg/check_jpeg_channels/x"
  input: "decode_image_10/cond_jpeg/check_jpeg_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/Assert/Const"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/Assert/Assert"
  op: "Assert"
  input: "decode_image_10/cond_jpeg/check_jpeg_channels"
  input: "decode_image_10/cond_jpeg/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "decode_image_10/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^decode_image_10/cond_jpeg/Assert/Assert"
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "ReadFile_10"
  input: "decode_image_10/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_10"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/is_png/y"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\211PN"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/is_png"
  op: "Equal"
  input: "decode_image_10/cond_jpeg/is_png/Switch"
  input: "decode_image_10/cond_jpeg/is_png/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/is_png/Switch"
  op: "Switch"
  input: "decode_image_10/Substr"
  input: "decode_image_10/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_10/Substr"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/Switch"
  op: "Switch"
  input: "decode_image_10/cond_jpeg/is_png"
  input: "decode_image_10/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/switch_t"
  op: "Identity"
  input: "decode_image_10/cond_jpeg/cond_png/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/switch_f"
  op: "Identity"
  input: "decode_image_10/cond_jpeg/cond_png/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/pred_id"
  op: "Identity"
  input: "decode_image_10/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/DecodePng"
  op: "DecodePng"
  input: "decode_image_10/cond_jpeg/cond_png/DecodePng/Switch_1:1"
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/DecodePng/Switch"
  op: "Switch"
  input: "ReadFile_10"
  input: "decode_image_10/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_10"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/DecodePng/Switch_1"
  op: "Switch"
  input: "decode_image_10/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_10/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_10"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/is_gif/y"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "GIF"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/is_gif"
  op: "Equal"
  input: "decode_image_10/cond_jpeg/cond_png/is_gif/Switch"
  input: "decode_image_10/cond_jpeg/cond_png/is_gif/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/is_gif/Switch"
  op: "Switch"
  input: "decode_image_10/cond_jpeg/is_png/Switch"
  input: "decode_image_10/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_10/Substr"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Switch"
  op: "Switch"
  input: "decode_image_10/cond_jpeg/cond_png/is_gif"
  input: "decode_image_10/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/switch_t"
  op: "Identity"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/switch_f"
  op: "Identity"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/pred_id"
  op: "Identity"
  input: "decode_image_10/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  op: "NotEqual"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  op: "NotEqual"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  op: "LogicalAnd"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Assert/Const"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  op: "Assert"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/DecodeGif"
  op: "DecodeGif"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1:1"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/Assert/Assert"
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  op: "Switch"
  input: "decode_image_10/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_10/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_10"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1"
  op: "Switch"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_10"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Substr/pos"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Substr/len"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Substr"
  op: "Substr"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/Substr/pos"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  op: "Switch"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_10"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "BM"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/is_bmp"
  op: "Equal"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/Substr"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Assert_1/Const"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  op: "Assert"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/is_bmp"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_channels/x"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_channels/y"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_channels"
  op: "NotEqual"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_channels/x"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Assert_2/Const"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  op: "Const"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  op: "Assert"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/check_channels"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  op: "DecodeBmp"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  input: "^decode_image_10/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/cond_gif/Merge"
  op: "Merge"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/DecodeGif"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/cond_png/Merge"
  op: "Merge"
  input: "decode_image_10/cond_jpeg/cond_png/cond_gif/Merge"
  input: "decode_image_10/cond_jpeg/cond_png/DecodePng"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_10/cond_jpeg/Merge"
  op: "Merge"
  input: "decode_image_10/cond_jpeg/cond_png/Merge"
  input: "decode_image_10/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/ExpandDims"
  op: "ExpandDims"
  input: "decode_image_10/cond_jpeg/Merge"
  input: "resize_image_with_crop_or_pad_10/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_10/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_10/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_10/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_10/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_10/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_10/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_10/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_10/ExpandDims"
  input: "^resize_image_with_crop_or_pad_10/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_10/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_10/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_10/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_10/sub/x"
  input: "resize_image_with_crop_or_pad_10/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Neg"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_10/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/floordiv"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_10/Neg"
  input: "resize_image_with_crop_or_pad_10/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Maximum"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_10/floordiv"
  input: "resize_image_with_crop_or_pad_10/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/floordiv_1"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_10/sub"
  input: "resize_image_with_crop_or_pad_10/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Maximum_1"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_10/floordiv_1"
  input: "resize_image_with_crop_or_pad_10/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_10/sub_1/x"
  input: "resize_image_with_crop_or_pad_10/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Neg_1"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_10/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/floordiv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/floordiv_2"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_10/Neg_1"
  input: "resize_image_with_crop_or_pad_10/floordiv_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Maximum_2"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_10/floordiv_2"
  input: "resize_image_with_crop_or_pad_10/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/floordiv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/floordiv_3"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_10/sub_1"
  input: "resize_image_with_crop_or_pad_10/floordiv_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Maximum_3"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_10/floordiv_3"
  input: "resize_image_with_crop_or_pad_10/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Minimum"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_10/Minimum/x"
  input: "resize_image_with_crop_or_pad_10/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Minimum_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Minimum_1"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_10/Minimum_1/x"
  input: "resize_image_with_crop_or_pad_10/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_10/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_10/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_10/Maximum"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_10/Maximum_2"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_10/Minimum_1"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Greater"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Greater_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Greater_1"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_10/Minimum"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Greater_1"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/add"
  op: "Add"
  input: "resize_image_with_crop_or_pad_10/Minimum_1"
  input: "resize_image_with_crop_or_pad_10/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/unstack:2"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_4/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_4/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_4/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/add_1"
  op: "Add"
  input: "resize_image_with_crop_or_pad_10/Minimum"
  input: "resize_image_with_crop_or_pad_10/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/unstack:1"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_5/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_5/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_5/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_10/control_dependency"
  input: "^resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_4/Assert"
  input: "^resize_image_with_crop_or_pad_10/crop_to_bounding_box/Assert_5/Assert"
  input: "^resize_image_with_crop_or_pad_10/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_10/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_10/Maximum_2"
  input: "resize_image_with_crop_or_pad_10/Maximum"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/stack_1/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/stack_1/0"
  input: "resize_image_with_crop_or_pad_10/Minimum"
  input: "resize_image_with_crop_or_pad_10/Minimum_1"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/stack_1/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/sub/x"
  input: "resize_image_with_crop_or_pad_10/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/sub"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/sub_2"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/sub_2/x"
  input: "resize_image_with_crop_or_pad_10/Maximum_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/sub_3"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/sub_2"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_10/Maximum_3"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_10/Maximum_1"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_10/crop_to_bounding_box/Slice"
  input: "^resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_10/pad_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_10/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_10/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/stack/1"
  input: "resize_image_with_crop_or_pad_10/Maximum_3"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_10/Maximum_1"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/stack/6"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Shape_2"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/unstack_1"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_10/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/control_dependency_1"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_10/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_10/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_10/Squeeze"
  op: "Squeeze"
  input: "resize_image_with_crop_or_pad_10/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_10/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_10/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_10/Squeeze"
      }
    }
  }
}
node {
  name: "per_image_standardization_10/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_10/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_10/Prod"
  op: "Prod"
  input: "per_image_standardization_10/Shape"
  input: "per_image_standardization_10/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_10/Cast"
  op: "Cast"
  input: "per_image_standardization_10/control_dependency"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "per_image_standardization_10/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_10/Mean"
  op: "Mean"
  input: "per_image_standardization_10/Cast"
  input: "per_image_standardization_10/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_10/Square"
  op: "Square"
  input: "per_image_standardization_10/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_10/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_10/Mean_1"
  op: "Mean"
  input: "per_image_standardization_10/Square"
  input: "per_image_standardization_10/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_10/Square_1"
  op: "Square"
  input: "per_image_standardization_10/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_10/sub"
  op: "Sub"
  input: "per_image_standardization_10/Mean_1"
  input: "per_image_standardization_10/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_10/Relu"
  op: "Relu"
  input: "per_image_standardization_10/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_10/Sqrt"
  op: "Sqrt"
  input: "per_image_standardization_10/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_10/Cast_1"
  op: "Cast"
  input: "per_image_standardization_10/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "per_image_standardization_10/Rsqrt"
  op: "Rsqrt"
  input: "per_image_standardization_10/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_10/Maximum"
  op: "Maximum"
  input: "per_image_standardization_10/Sqrt"
  input: "per_image_standardization_10/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_10/Sub"
  op: "Sub"
  input: "per_image_standardization_10/Cast"
  input: "per_image_standardization_10/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_10"
  op: "RealDiv"
  input: "per_image_standardization_10/Sub"
  input: "per_image_standardization_10/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ReadFile_11"
  op: "ReadFile"
  input: "unstack_3:2"
}
node {
  name: "decode_image_11/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_11/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_11/Substr"
  op: "Substr"
  input: "ReadFile_11"
  input: "decode_image_11/Substr/pos"
  input: "decode_image_11/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_11/is_jpeg/Substr/pos"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_11/is_jpeg/Substr/len"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_11/is_jpeg/Substr"
  op: "Substr"
  input: "ReadFile_11"
  input: "decode_image_11/is_jpeg/Substr/pos"
  input: "decode_image_11/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_11/is_jpeg/Equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "decode_image_11/is_jpeg/Equal"
  op: "Equal"
  input: "decode_image_11/is_jpeg/Substr"
  input: "decode_image_11/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/Switch"
  op: "Switch"
  input: "decode_image_11/is_jpeg/Equal"
  input: "decode_image_11/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/switch_t"
  op: "Identity"
  input: "decode_image_11/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/switch_f"
  op: "Identity"
  input: "decode_image_11/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/pred_id"
  op: "Identity"
  input: "decode_image_11/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/check_jpeg_channels/x"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/check_jpeg_channels/y"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/check_jpeg_channels"
  op: "NotEqual"
  input: "decode_image_11/cond_jpeg/check_jpeg_channels/x"
  input: "decode_image_11/cond_jpeg/check_jpeg_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/Assert/Const"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/Assert/Assert"
  op: "Assert"
  input: "decode_image_11/cond_jpeg/check_jpeg_channels"
  input: "decode_image_11/cond_jpeg/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "decode_image_11/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^decode_image_11/cond_jpeg/Assert/Assert"
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "ReadFile_11"
  input: "decode_image_11/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_11"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/is_png/y"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\211PN"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/is_png"
  op: "Equal"
  input: "decode_image_11/cond_jpeg/is_png/Switch"
  input: "decode_image_11/cond_jpeg/is_png/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/is_png/Switch"
  op: "Switch"
  input: "decode_image_11/Substr"
  input: "decode_image_11/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_11/Substr"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/Switch"
  op: "Switch"
  input: "decode_image_11/cond_jpeg/is_png"
  input: "decode_image_11/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/switch_t"
  op: "Identity"
  input: "decode_image_11/cond_jpeg/cond_png/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/switch_f"
  op: "Identity"
  input: "decode_image_11/cond_jpeg/cond_png/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/pred_id"
  op: "Identity"
  input: "decode_image_11/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/DecodePng"
  op: "DecodePng"
  input: "decode_image_11/cond_jpeg/cond_png/DecodePng/Switch_1:1"
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/DecodePng/Switch"
  op: "Switch"
  input: "ReadFile_11"
  input: "decode_image_11/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_11"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/DecodePng/Switch_1"
  op: "Switch"
  input: "decode_image_11/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_11/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_11"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/is_gif/y"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "GIF"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/is_gif"
  op: "Equal"
  input: "decode_image_11/cond_jpeg/cond_png/is_gif/Switch"
  input: "decode_image_11/cond_jpeg/cond_png/is_gif/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/is_gif/Switch"
  op: "Switch"
  input: "decode_image_11/cond_jpeg/is_png/Switch"
  input: "decode_image_11/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decode_image_11/Substr"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Switch"
  op: "Switch"
  input: "decode_image_11/cond_jpeg/cond_png/is_gif"
  input: "decode_image_11/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/switch_t"
  op: "Identity"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/switch_f"
  op: "Identity"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/pred_id"
  op: "Identity"
  input: "decode_image_11/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  op: "NotEqual"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  op: "NotEqual"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  op: "LogicalAnd"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Assert/Const"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  op: "Assert"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/DecodeGif"
  op: "DecodeGif"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1:1"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/Assert/Assert"
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  op: "Switch"
  input: "decode_image_11/cond_jpeg/cond_png/DecodePng/Switch"
  input: "decode_image_11/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_11"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1"
  op: "Switch"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_11"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Substr/pos"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Substr/len"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Substr"
  op: "Substr"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/Substr/pos"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  op: "Switch"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ReadFile_11"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "BM"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/is_bmp"
  op: "Equal"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/Substr"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Assert_1/Const"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  op: "Assert"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/is_bmp"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_channels/x"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_channels/y"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_channels"
  op: "NotEqual"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_channels/x"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Assert_2/Const"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  op: "Const"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  op: "Assert"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/check_channels"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  op: "DecodeBmp"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  input: "^decode_image_11/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/cond_gif/Merge"
  op: "Merge"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/DecodeGif"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/cond_png/Merge"
  op: "Merge"
  input: "decode_image_11/cond_jpeg/cond_png/cond_gif/Merge"
  input: "decode_image_11/cond_jpeg/cond_png/DecodePng"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "decode_image_11/cond_jpeg/Merge"
  op: "Merge"
  input: "decode_image_11/cond_jpeg/cond_png/Merge"
  input: "decode_image_11/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/ExpandDims"
  op: "ExpandDims"
  input: "decode_image_11/cond_jpeg/Merge"
  input: "resize_image_with_crop_or_pad_11/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_11/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_11/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_11/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_11/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_11/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_11/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_11/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_11/ExpandDims"
  input: "^resize_image_with_crop_or_pad_11/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_11/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_11/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_11/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_11/sub/x"
  input: "resize_image_with_crop_or_pad_11/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Neg"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_11/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/floordiv"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_11/Neg"
  input: "resize_image_with_crop_or_pad_11/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Maximum"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_11/floordiv"
  input: "resize_image_with_crop_or_pad_11/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/floordiv_1"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_11/sub"
  input: "resize_image_with_crop_or_pad_11/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Maximum_1"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_11/floordiv_1"
  input: "resize_image_with_crop_or_pad_11/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_11/sub_1/x"
  input: "resize_image_with_crop_or_pad_11/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Neg_1"
  op: "Neg"
  input: "resize_image_with_crop_or_pad_11/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/floordiv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/floordiv_2"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_11/Neg_1"
  input: "resize_image_with_crop_or_pad_11/floordiv_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Maximum_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Maximum_2"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_11/floordiv_2"
  input: "resize_image_with_crop_or_pad_11/Maximum_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/floordiv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/floordiv_3"
  op: "FloorDiv"
  input: "resize_image_with_crop_or_pad_11/sub_1"
  input: "resize_image_with_crop_or_pad_11/floordiv_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Maximum_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Maximum_3"
  op: "Maximum"
  input: "resize_image_with_crop_or_pad_11/floordiv_3"
  input: "resize_image_with_crop_or_pad_11/Maximum_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Minimum"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_11/Minimum/x"
  input: "resize_image_with_crop_or_pad_11/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Minimum_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Minimum_1"
  op: "Minimum"
  input: "resize_image_with_crop_or_pad_11/Minimum_1/x"
  input: "resize_image_with_crop_or_pad_11/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_11/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_11/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_11/Maximum"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_11/Maximum_2"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_11/Minimum_1"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_width must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Greater"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Greater_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Greater_1"
  op: "Greater"
  input: "resize_image_with_crop_or_pad_11/Minimum"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Greater_1"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/add"
  op: "Add"
  input: "resize_image_with_crop_or_pad_11/Minimum_1"
  input: "resize_image_with_crop_or_pad_11/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/unstack:2"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_4/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_4/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_4/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/add_1"
  op: "Add"
  input: "resize_image_with_crop_or_pad_11/Minimum"
  input: "resize_image_with_crop_or_pad_11/Maximum_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/unstack:1"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_5/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_5/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_5/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_11/control_dependency"
  input: "^resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_4/Assert"
  input: "^resize_image_with_crop_or_pad_11/crop_to_bounding_box/Assert_5/Assert"
  input: "^resize_image_with_crop_or_pad_11/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_11/ExpandDims"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_11/Maximum_2"
  input: "resize_image_with_crop_or_pad_11/Maximum"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/stack_1/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/stack_1/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/stack_1/0"
  input: "resize_image_with_crop_or_pad_11/Minimum"
  input: "resize_image_with_crop_or_pad_11/Minimum_1"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/stack_1/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/assert_positive/Const"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/sub"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/sub/x"
  input: "resize_image_with_crop_or_pad_11/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/sub"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/sub_2"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/sub_2/x"
  input: "resize_image_with_crop_or_pad_11/Maximum_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/sub_3"
  op: "Sub"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/sub_2"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_11/Maximum_3"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_11/Maximum_1"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_width must be >= 0"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual_1"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual_2"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "width must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual_2"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual_3"
  op: "GreaterEqual"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_3/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_3/Assert"
  op: "Assert"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/GreaterEqual_3"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_3/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_11/crop_to_bounding_box/Slice"
  input: "^resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert/Assert"
  input: "^resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_1/Assert"
  input: "^resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_2/Assert"
  input: "^resize_image_with_crop_or_pad_11/pad_to_bounding_box/Assert_3/Assert"
  input: "^resize_image_with_crop_or_pad_11/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_11/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/stack"
  op: "Pack"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/stack/0"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/stack/1"
  input: "resize_image_with_crop_or_pad_11/Maximum_3"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/sub_3"
  input: "resize_image_with_crop_or_pad_11/Maximum_1"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/sub_1"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/stack/6"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/stack"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/control_dependency"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Shape_2"
  op: "Shape"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/unstack_1"
  op: "Unpack"
  input: "resize_image_with_crop_or_pad_11/Shape_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/control_dependency_1"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_11/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_11/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "resize_image_with_crop_or_pad_11/Squeeze"
  op: "Squeeze"
  input: "resize_image_with_crop_or_pad_11/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_11/control_dependency"
  op: "Identity"
  input: "resize_image_with_crop_or_pad_11/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@resize_image_with_crop_or_pad_11/Squeeze"
      }
    }
  }
}
node {
  name: "per_image_standardization_11/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\200\000\000\000\200\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_11/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "per_image_standardization_11/Prod"
  op: "Prod"
  input: "per_image_standardization_11/Shape"
  input: "per_image_standardization_11/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_11/Cast"
  op: "Cast"
  input: "per_image_standardization_11/control_dependency"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "per_image_standardization_11/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_11/Mean"
  op: "Mean"
  input: "per_image_standardization_11/Cast"
  input: "per_image_standardization_11/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_11/Square"
  op: "Square"
  input: "per_image_standardization_11/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_11/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "per_image_standardization_11/Mean_1"
  op: "Mean"
  input: "per_image_standardization_11/Square"
  input: "per_image_standardization_11/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "per_image_standardization_11/Square_1"
  op: "Square"
  input: "per_image_standardization_11/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_11/sub"
  op: "Sub"
  input: "per_image_standardization_11/Mean_1"
  input: "per_image_standardization_11/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_11/Relu"
  op: "Relu"
  input: "per_image_standardization_11/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_11/Sqrt"
  op: "Sqrt"
  input: "per_image_standardization_11/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_11/Cast_1"
  op: "Cast"
  input: "per_image_standardization_11/Prod"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "per_image_standardization_11/Rsqrt"
  op: "Rsqrt"
  input: "per_image_standardization_11/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_11/Maximum"
  op: "Maximum"
  input: "per_image_standardization_11/Sqrt"
  input: "per_image_standardization_11/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_11/Sub"
  op: "Sub"
  input: "per_image_standardization_11/Cast"
  input: "per_image_standardization_11/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "per_image_standardization_11"
  op: "RealDiv"
  input: "per_image_standardization_11/Sub"
  input: "per_image_standardization_11/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_join/packed"
  op: "Pack"
  input: "per_image_standardization"
  input: "per_image_standardization_1"
  input: "per_image_standardization_2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "batch_join/packed_1"
  op: "Pack"
  input: "per_image_standardization_3"
  input: "per_image_standardization_4"
  input: "per_image_standardization_5"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "batch_join/packed_2"
  op: "Pack"
  input: "per_image_standardization_6"
  input: "per_image_standardization_7"
  input: "per_image_standardization_8"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "batch_join/packed_3"
  op: "Pack"
  input: "per_image_standardization_9"
  input: "per_image_standardization_10"
  input: "per_image_standardization_11"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "batch_join/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "batch_join/fifo_queue"
  op: "FIFOQueueV2"
  attr {
    key: "capacity"
    value {
      i: 1440
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 3
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_join/fifo_queue_EnqueueMany"
  op: "QueueEnqueueManyV2"
  input: "batch_join/fifo_queue"
  input: "batch_join/packed"
  input: "FIFOQueueV2_Dequeue:1"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "batch_join/fifo_queue_EnqueueMany_1"
  op: "QueueEnqueueManyV2"
  input: "batch_join/fifo_queue"
  input: "batch_join/packed_1"
  input: "FIFOQueueV2_Dequeue_1:1"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "batch_join/fifo_queue_EnqueueMany_2"
  op: "QueueEnqueueManyV2"
  input: "batch_join/fifo_queue"
  input: "batch_join/packed_2"
  input: "FIFOQueueV2_Dequeue_2:1"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "batch_join/fifo_queue_EnqueueMany_3"
  op: "QueueEnqueueManyV2"
  input: "batch_join/fifo_queue"
  input: "batch_join/packed_3"
  input: "FIFOQueueV2_Dequeue_3:1"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "batch_join/fifo_queue_Close"
  op: "QueueCloseV2"
  input: "batch_join/fifo_queue"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: false
    }
  }
}
node {
  name: "batch_join/fifo_queue_Close_1"
  op: "QueueCloseV2"
  input: "batch_join/fifo_queue"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: true
    }
  }
}
node {
  name: "batch_join/fifo_queue_Size"
  op: "QueueSizeV2"
  input: "batch_join/fifo_queue"
}
node {
  name: "batch_join/ToFloat"
  op: "Cast"
  input: "batch_join/fifo_queue_Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_join/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00069444446126
      }
    }
  }
}
node {
  name: "batch_join/mul"
  op: "Mul"
  input: "batch_join/ToFloat"
  input: "batch_join/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_join/fraction_of_1440_full/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "batch_join/fraction_of_1440_full"
      }
    }
  }
}
node {
  name: "batch_join/fraction_of_1440_full"
  op: "ScalarSummary"
  input: "batch_join/fraction_of_1440_full/tags"
  input: "batch_join/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_join"
  op: "QueueDequeueUpToV2"
  input: "batch_join/fifo_queue"
  input: "batch_size"
  attr {
    key: "component_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "image_batch"
  op: "Identity"
  input: "batch_join"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "input"
  op: "Identity"
  input: "image_batch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "label_batch"
  op: "Identity"
  input: "batch_join:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Light_CNN/Conv2d_1a_5x5/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 666
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2744
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_1a_5x5/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Light_CNN/Conv2d_1a_5x5/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Light_CNN/Conv2d_1a_5x5/weights/Initializer/truncated_normal/mul"
  input: "Light_CNN/Conv2d_1a_5x5/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1a_5x5/weights"
  input: "Light_CNN/Conv2d_1a_5x5/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Light_CNN/Conv2d_1a_5x5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer/scale"
  input: "Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/Conv2D"
  op: "Conv2D"
  input: "input"
  input: "Light_CNN/Conv2d_1a_5x5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Const"
  op: "Const"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Const_1"
  op: "Const"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Const"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/Conv2D"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/Const"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/Conv2D"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/Const"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_1"
  op: "Merge"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_2"
  op: "Merge"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg/sub"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_2"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_2"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Identity"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Identity/Switch:1"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Identity/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Switch_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5_MFM/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\377\377\377\377\200\000\000\000\200\000\000\000\002\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5_MFM/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Merge"
  input: "Light_CNN/Conv2d_1a_5x5_MFM/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5_MFM/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5_MFM/Max"
  op: "Max"
  input: "Light_CNN/Conv2d_1a_5x5_MFM/Reshape"
  input: "Light_CNN/Conv2d_1a_5x5_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/maxpool1/MaxPool"
  op: "MaxPool"
  input: "Light_CNN/Conv2d_1a_5x5_MFM/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\0000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Light_CNN/Conv2d_1b_1x1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 666
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2817
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_1b_1x1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Light_CNN/Conv2d_1b_1x1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Light_CNN/Conv2d_1b_1x1/weights/Initializer/truncated_normal/mul"
  input: "Light_CNN/Conv2d_1b_1x1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 48
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1b_1x1/weights"
  input: "Light_CNN/Conv2d_1b_1x1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Light_CNN/Conv2d_1b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer/scale"
  input: "Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/Conv2D"
  op: "Conv2D"
  input: "Light_CNN/maxpool1/MaxPool"
  input: "Light_CNN/Conv2d_1b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Const"
  op: "Const"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Const_1"
  op: "Const"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Const"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/Const"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/Const"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_1"
  op: "Merge"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_2"
  op: "Merge"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_2"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_2"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Identity"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Identity/Switch:1"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Identity/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Switch_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1_MFM/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000@\000\000\000\002\000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1_MFM/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Merge"
  input: "Light_CNN/Conv2d_1b_1x1_MFM/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1_MFM/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1_MFM/Max"
  op: "Max"
  input: "Light_CNN/Conv2d_1b_1x1_MFM/Reshape"
  input: "Light_CNN/Conv2d_1b_1x1_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\0000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Light_CNN/Conv2d_2a_3x3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 666
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2889
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_2a_3x3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Light_CNN/Conv2d_2a_3x3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Light_CNN/Conv2d_2a_3x3/weights/Initializer/truncated_normal/mul"
  input: "Light_CNN/Conv2d_2a_3x3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 48
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2a_3x3/weights"
  input: "Light_CNN/Conv2d_2a_3x3/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Light_CNN/Conv2d_2a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer/scale"
  input: "Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/Conv2D"
  op: "Conv2D"
  input: "Light_CNN/Conv2d_1b_1x1_MFM/Max"
  input: "Light_CNN/Conv2d_2a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Const"
  op: "Const"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Const_1"
  op: "Const"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Const"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/Const"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/Const"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_1"
  op: "Merge"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_2"
  op: "Merge"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_2"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_2"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Identity"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Identity/Switch:1"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Identity/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Switch_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3_MFM/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\377\377\377\377@\000\000\000@\000\000\000\002\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3_MFM/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Merge"
  input: "Light_CNN/Conv2d_2a_3x3_MFM/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3_MFM/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3_MFM/Max"
  op: "Max"
  input: "Light_CNN/Conv2d_2a_3x3_MFM/Reshape"
  input: "Light_CNN/Conv2d_2a_3x3_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/maxpool2/MaxPool"
  op: "MaxPool"
  input: "Light_CNN/Conv2d_2a_3x3_MFM/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000`\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Light_CNN/Conv2d_2b_1x1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 666
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2962
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_2b_1x1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Light_CNN/Conv2d_2b_1x1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Light_CNN/Conv2d_2b_1x1/weights/Initializer/truncated_normal/mul"
  input: "Light_CNN/Conv2d_2b_1x1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2b_1x1/weights"
  input: "Light_CNN/Conv2d_2b_1x1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Light_CNN/Conv2d_2b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer/scale"
  input: "Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/Conv2D"
  op: "Conv2D"
  input: "Light_CNN/maxpool2/MaxPool"
  input: "Light_CNN/Conv2d_2b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Const"
  op: "Const"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Const_1"
  op: "Const"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Const"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/Const"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/Const"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_1"
  op: "Merge"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_2"
  op: "Merge"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_2"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_2"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Identity"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Identity/Switch:1"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Identity/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Switch_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1_MFM/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\377\377\377\377 \000\000\000 \000\000\000\002\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1_MFM/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Merge"
  input: "Light_CNN/Conv2d_2b_1x1_MFM/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1_MFM/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1_MFM/Max"
  op: "Max"
  input: "Light_CNN/Conv2d_2b_1x1_MFM/Reshape"
  input: "Light_CNN/Conv2d_2b_1x1_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Light_CNN/Conv2d_3a_3x3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 666
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3034
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_3a_3x3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Light_CNN/Conv2d_3a_3x3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Light_CNN/Conv2d_3a_3x3/weights/Initializer/truncated_normal/mul"
  input: "Light_CNN/Conv2d_3a_3x3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3a_3x3/weights"
  input: "Light_CNN/Conv2d_3a_3x3/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Light_CNN/Conv2d_3a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer/scale"
  input: "Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/Conv2D"
  op: "Conv2D"
  input: "Light_CNN/Conv2d_2b_1x1_MFM/Max"
  input: "Light_CNN/Conv2d_3a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Const"
  op: "Const"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Const_1"
  op: "Const"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Const"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/Const"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/Const"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_1"
  op: "Merge"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_2"
  op: "Merge"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_2"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_2"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Identity"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Identity/Switch:1"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Identity/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Switch_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3_MFM/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\377\377\377\377 \000\000\000 \000\000\000\002\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3_MFM/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Merge"
  input: "Light_CNN/Conv2d_3a_3x3_MFM/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3_MFM/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3_MFM/Max"
  op: "Max"
  input: "Light_CNN/Conv2d_3a_3x3_MFM/Reshape"
  input: "Light_CNN/Conv2d_3a_3x3_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/maxpool3/MaxPool"
  op: "MaxPool"
  input: "Light_CNN/Conv2d_3a_3x3_MFM/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\300\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Light_CNN/Conv2d_3b_1x1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 666
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3107
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_3b_1x1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Light_CNN/Conv2d_3b_1x1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Light_CNN/Conv2d_3b_1x1/weights/Initializer/truncated_normal/mul"
  input: "Light_CNN/Conv2d_3b_1x1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 192
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3b_1x1/weights"
  input: "Light_CNN/Conv2d_3b_1x1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Light_CNN/Conv2d_3b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer/scale"
  input: "Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/Conv2D"
  op: "Conv2D"
  input: "Light_CNN/maxpool3/MaxPool"
  input: "Light_CNN/Conv2d_3b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Const"
  op: "Const"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Const_1"
  op: "Const"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Const"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/Const"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/Const"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_1"
  op: "Merge"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_2"
  op: "Merge"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_2"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_2"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Identity"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Identity/Switch:1"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Identity/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Switch_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1_MFM/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\377\377\377\377\020\000\000\000\020\000\000\000\002\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1_MFM/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Merge"
  input: "Light_CNN/Conv2d_3b_1x1_MFM/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1_MFM/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1_MFM/Max"
  op: "Max"
  input: "Light_CNN/Conv2d_3b_1x1_MFM/Reshape"
  input: "Light_CNN/Conv2d_3b_1x1_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Light_CNN/Conv2d_4a_3x3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 666
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3179
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_4a_3x3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Light_CNN/Conv2d_4a_3x3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Light_CNN/Conv2d_4a_3x3/weights/Initializer/truncated_normal/mul"
  input: "Light_CNN/Conv2d_4a_3x3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 192
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4a_3x3/weights"
  input: "Light_CNN/Conv2d_4a_3x3/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Light_CNN/Conv2d_4a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer/scale"
  input: "Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/Conv2D"
  op: "Conv2D"
  input: "Light_CNN/Conv2d_3b_1x1_MFM/Max"
  input: "Light_CNN/Conv2d_4a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Const"
  op: "Const"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Const_1"
  op: "Const"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Const"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/Const"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/Const"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_1"
  op: "Merge"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_2"
  op: "Merge"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_2"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_2"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Identity"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Identity/Switch:1"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Identity/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Switch_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3_MFM/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\377\377\377\377\020\000\000\000\020\000\000\000\002\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3_MFM/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Merge"
  input: "Light_CNN/Conv2d_4a_3x3_MFM/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3_MFM/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3_MFM/Max"
  op: "Max"
  input: "Light_CNN/Conv2d_4a_3x3_MFM/Reshape"
  input: "Light_CNN/Conv2d_4a_3x3_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Light_CNN/Conv2d_4b_1x1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 666
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3251
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_4b_1x1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Light_CNN/Conv2d_4b_1x1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Light_CNN/Conv2d_4b_1x1/weights/Initializer/truncated_normal/mul"
  input: "Light_CNN/Conv2d_4b_1x1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4b_1x1/weights"
  input: "Light_CNN/Conv2d_4b_1x1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Light_CNN/Conv2d_4b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer/scale"
  input: "Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/Conv2D"
  op: "Conv2D"
  input: "Light_CNN/Conv2d_4a_3x3_MFM/Max"
  input: "Light_CNN/Conv2d_4b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Const"
  op: "Const"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Const_1"
  op: "Const"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Const"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/Const"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/Const"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_1"
  op: "Merge"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_2"
  op: "Merge"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg/sub"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_2"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_2"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Identity"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Identity/Switch:1"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Identity/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Switch_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1_MFM/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\377\377\377\377\020\000\000\000\020\000\000\000\002\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1_MFM/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Merge"
  input: "Light_CNN/Conv2d_4b_1x1_MFM/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1_MFM/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1_MFM/Max"
  op: "Max"
  input: "Light_CNN/Conv2d_4b_1x1_MFM/Reshape"
  input: "Light_CNN/Conv2d_4b_1x1_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Light_CNN/Conv2d_5a_3x3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 666
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3323
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_5a_3x3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Light_CNN/Conv2d_5a_3x3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Light_CNN/Conv2d_5a_3x3/weights/Initializer/truncated_normal/mul"
  input: "Light_CNN/Conv2d_5a_3x3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_5a_3x3/weights"
  input: "Light_CNN/Conv2d_5a_3x3/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Light_CNN/Conv2d_5a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer/scale"
  input: "Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/Conv2D"
  op: "Conv2D"
  input: "Light_CNN/Conv2d_4b_1x1_MFM/Max"
  input: "Light_CNN/Conv2d_5a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Const"
  op: "Const"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Const_1"
  op: "Const"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Const"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/Const"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/Conv2D"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/Const"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_1"
  op: "Merge"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_2"
  op: "Merge"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/read"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg/sub"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/read"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_2"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_2"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Identity"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Identity/Switch:1"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Identity/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Switch_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3_MFM/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 5
          }
        }
        tensor_content: "\377\377\377\377\020\000\000\000\020\000\000\000\002\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3_MFM/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Merge"
  input: "Light_CNN/Conv2d_5a_3x3_MFM/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3_MFM/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3_MFM/Max"
  op: "Max"
  input: "Light_CNN/Conv2d_5a_3x3_MFM/Reshape"
  input: "Light_CNN/Conv2d_5a_3x3_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/maxpool5/MaxPool"
  op: "MaxPool"
  input: "Light_CNN/Conv2d_5a_3x3_MFM/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "Light_CNN/Logits/Flatten/flatten/Shape"
  op: "Shape"
  input: "Light_CNN/maxpool5/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/Logits/Flatten/flatten/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Light_CNN/Logits/Flatten/flatten/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Light_CNN/Logits/Flatten/flatten/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Light_CNN/Logits/Flatten/flatten/strided_slice"
  op: "StridedSlice"
  input: "Light_CNN/Logits/Flatten/flatten/Shape"
  input: "Light_CNN/Logits/Flatten/flatten/strided_slice/stack"
  input: "Light_CNN/Logits/Flatten/flatten/strided_slice/stack_1"
  input: "Light_CNN/Logits/Flatten/flatten/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Light_CNN/Logits/Flatten/flatten/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Light_CNN/Logits/Flatten/flatten/Reshape/shape"
  op: "Pack"
  input: "Light_CNN/Logits/Flatten/flatten/strided_slice"
  input: "Light_CNN/Logits/Flatten/flatten/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Light_CNN/Logits/Flatten/flatten/Reshape"
  op: "Reshape"
  input: "Light_CNN/maxpool5/MaxPool"
  input: "Light_CNN/Logits/Flatten/flatten/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Logits/Dropout/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Logits/Dropout/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/dropout/keep_prob"
  op: "Const"
  input: "^Light_CNN/Logits/Dropout/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.600000023842
      }
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/dropout/Shape"
  op: "Shape"
  input: "Light_CNN/Logits/Dropout/cond/dropout/Shape/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/dropout/Shape/Switch"
  op: "Switch"
  input: "Light_CNN/Logits/Flatten/flatten/Reshape"
  input: "Light_CNN/Logits/Dropout/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Logits/Flatten/flatten/Reshape"
      }
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/dropout/random_uniform/min"
  op: "Const"
  input: "^Light_CNN/Logits/Dropout/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/dropout/random_uniform/max"
  op: "Const"
  input: "^Light_CNN/Logits/Dropout/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "Light_CNN/Logits/Dropout/cond/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 666
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3410
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/dropout/random_uniform/sub"
  op: "Sub"
  input: "Light_CNN/Logits/Dropout/cond/dropout/random_uniform/max"
  input: "Light_CNN/Logits/Dropout/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/dropout/random_uniform/mul"
  op: "Mul"
  input: "Light_CNN/Logits/Dropout/cond/dropout/random_uniform/RandomUniform"
  input: "Light_CNN/Logits/Dropout/cond/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/dropout/random_uniform"
  op: "Add"
  input: "Light_CNN/Logits/Dropout/cond/dropout/random_uniform/mul"
  input: "Light_CNN/Logits/Dropout/cond/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/dropout/add"
  op: "Add"
  input: "Light_CNN/Logits/Dropout/cond/dropout/keep_prob"
  input: "Light_CNN/Logits/Dropout/cond/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/dropout/Floor"
  op: "Floor"
  input: "Light_CNN/Logits/Dropout/cond/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/dropout/div"
  op: "RealDiv"
  input: "Light_CNN/Logits/Dropout/cond/dropout/Shape/Switch:1"
  input: "Light_CNN/Logits/Dropout/cond/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/dropout/mul"
  op: "Mul"
  input: "Light_CNN/Logits/Dropout/cond/dropout/div"
  input: "Light_CNN/Logits/Dropout/cond/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/Identity"
  op: "Identity"
  input: "Light_CNN/Logits/Dropout/cond/Identity/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/Identity/Switch"
  op: "Switch"
  input: "Light_CNN/Logits/Flatten/flatten/Reshape"
  input: "Light_CNN/Logits/Dropout/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Logits/Flatten/flatten/Reshape"
      }
    }
  }
}
node {
  name: "Light_CNN/Logits/Dropout/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Logits/Dropout/cond/Identity"
  input: "Light_CNN/Logits/Dropout/cond/dropout/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000 \000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "Light_CNN/Bottleneck/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 666
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3424
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "Light_CNN/Bottleneck/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "Light_CNN/Bottleneck/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/Initializer/truncated_normal"
  op: "Add"
  input: "Light_CNN/Bottleneck/weights/Initializer/truncated_normal/mul"
  input: "Light_CNN/Bottleneck/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8192
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/Assign"
  op: "Assign"
  input: "Light_CNN/Bottleneck/weights"
  input: "Light_CNN/Bottleneck/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/read"
  op: "Identity"
  input: "Light_CNN/Bottleneck/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-06
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "Light_CNN/Bottleneck/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer/scale"
  input: "Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/MatMul"
  op: "MatMul"
  input: "Light_CNN/Logits/Dropout/cond/Merge"
  input: "Light_CNN/Bottleneck/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000\001\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/Reshape"
  op: "Reshape"
  input: "Light_CNN/Bottleneck/MatMul"
  input: "Light_CNN/Bottleneck/BatchNorm/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/Assign"
  op: "Assign"
  input: "Light_CNN/Bottleneck/BatchNorm/beta"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/read"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/Const"
  op: "Const"
  input: "^Light_CNN/Bottleneck/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/Const_1"
  op: "Const"
  input: "^Light_CNN/Bottleneck/BatchNorm/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm/Switch_2:1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/Const"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm/Switch"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/Reshape"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/Reshape"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/Const"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/read"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1"
  op: "FusedBatchNorm"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/Reshape"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/Reshape"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/Const"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/Const"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_2"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/read"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/read"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/read"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/Merge_1"
  op: "Merge"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond/Merge_2"
  op: "Merge"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm:2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/Switch"
  op: "Switch"
  input: "phase_train"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/switch_t"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/switch_f"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/pred_id"
  op: "Identity"
  input: "phase_train"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^Light_CNN/Bottleneck/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg/sub/Switch:1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/read"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/Merge_1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/cond/Merge_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg/sub"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg"
  op: "AssignSub"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg/Switch:1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^Light_CNN/Bottleneck/BatchNorm/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00499999988824
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch:1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/read"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg_1/sub/Switch_1"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/Merge_2"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/cond/Merge_2"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg_1/sub"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg_1/Switch:1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/Identity"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/Identity/Switch:1"
  input: "^Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg"
  input: "^Light_CNN/Bottleneck/BatchNorm/cond_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/Identity/Switch"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/Merge"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/Merge"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/cond/Merge"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/cond_1/Merge"
  op: "Merge"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/Switch_1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/Shape"
  op: "Shape"
  input: "Light_CNN/Bottleneck/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/Reshape_1"
  op: "Reshape"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/Merge"
  input: "Light_CNN/Bottleneck/BatchNorm/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/MFM_output/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\002\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/MFM_output/Reshape"
  op: "Reshape"
  input: "Light_CNN/Bottleneck/BatchNorm/Reshape_1"
  input: "Light_CNN/MFM_output/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Light_CNN/MFM_output/Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Light_CNN/MFM_output/Max"
  op: "Max"
  input: "Light_CNN/MFM_output/Reshape"
  input: "Light_CNN/MFM_output/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "embeddings/Square"
  op: "Square"
  input: "Light_CNN/MFM_output/Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "embeddings/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "embeddings/Sum"
  op: "Sum"
  input: "embeddings/Square"
  input: "embeddings/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "embeddings/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.00000001335e-10
      }
    }
  }
}
node {
  name: "embeddings/Maximum"
  op: "Maximum"
  input: "embeddings/Sum"
  input: "embeddings/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "embeddings/Rsqrt"
  op: "Rsqrt"
  input: "embeddings/Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "embeddings"
  op: "Mul"
  input: "Light_CNN/MFM_output/Max"
  input: "embeddings/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\003\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "embeddings"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "unstack_4"
  op: "Unpack"
  input: "Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 3
    }
  }
}
node {
  name: "triplet_loss/Sub"
  op: "Sub"
  input: "unstack_4"
  input: "unstack_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "triplet_loss/Square"
  op: "Square"
  input: "triplet_loss/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "triplet_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "triplet_loss/Sum"
  op: "Sum"
  input: "triplet_loss/Square"
  input: "triplet_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "triplet_loss/Sub_1"
  op: "Sub"
  input: "unstack_4"
  input: "unstack_4:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "triplet_loss/Square_1"
  op: "Square"
  input: "triplet_loss/Sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "triplet_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "triplet_loss/Sum_1"
  op: "Sum"
  input: "triplet_loss/Square_1"
  input: "triplet_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "triplet_loss/Sub_2"
  op: "Sub"
  input: "triplet_loss/Sum"
  input: "triplet_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "triplet_loss/Add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298
      }
    }
  }
}
node {
  name: "triplet_loss/Add"
  op: "Add"
  input: "triplet_loss/Sub_2"
  input: "triplet_loss/Add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "triplet_loss/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "triplet_loss/Maximum"
  op: "Maximum"
  input: "triplet_loss/Add"
  input: "triplet_loss/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "triplet_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "triplet_loss/Mean"
  op: "Mean"
  input: "triplet_loss/Maximum"
  input: "triplet_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialDecay/Cast"
  op: "Cast"
  input: "Variable/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100000
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1"
  op: "Cast"
  input: "ExponentialDecay/Cast_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialDecay/truediv"
  op: "RealDiv"
  input: "ExponentialDecay/Cast"
  input: "ExponentialDecay/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay/Floor"
  op: "Floor"
  input: "ExponentialDecay/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay/Pow"
  op: "Pow"
  input: "ExponentialDecay/Cast_2/x"
  input: "ExponentialDecay/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay"
  op: "Mul"
  input: "learning_rate"
  input: "ExponentialDecay/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "learning_rate_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate_1"
      }
    }
  }
}
node {
  name: "learning_rate_1"
  op: "ScalarSummary"
  input: "learning_rate_1/tags"
  input: "ExponentialDecay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "total_loss"
  op: "AddN"
  input: "triplet_loss/Mean"
  input: "Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer"
  input: "Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer"
  input: "Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer"
  input: "Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer"
  input: "Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer"
  input: "Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer"
  input: "Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer"
  input: "Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer"
  input: "Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer"
  input: "Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer"
  attr {
    key: "N"
    value {
      i: 11
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "total_loss/avg/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total_loss/avg"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "total_loss/avg/Assign"
  op: "Assign"
  input: "total_loss/avg"
  input: "total_loss/avg/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "total_loss/avg/read"
  op: "Identity"
  input: "total_loss/avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
}
node {
  name: "avg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub"
  op: "Sub"
  input: "avg/AssignMovingAvg/sub/x"
  input: "avg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "total_loss/avg/read"
  input: "total_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg/mul"
  op: "Mul"
  input: "avg/AssignMovingAvg/sub_1"
  input: "avg/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
}
node {
  name: "avg/AssignMovingAvg"
  op: "AssignSub"
  input: "total_loss/avg"
  input: "avg/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total_loss/avg"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "avg"
  op: "NoOp"
  input: "^avg/AssignMovingAvg"
}
node {
  name: "total_loss__raw_/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "total_loss__raw_"
      }
    }
  }
}
node {
  name: "total_loss__raw_"
  op: "ScalarSummary"
  input: "total_loss__raw_/tags"
  input: "total_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "total_loss_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "total_loss_1"
      }
    }
  }
}
node {
  name: "total_loss_1"
  op: "ScalarSummary"
  input: "total_loss_1/tags"
  input: "total_loss/avg/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Fill"
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_5"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_6"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_7"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_8"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_9"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/total_loss_grad/tuple/control_dependency_10"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/total_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Shape"
  op: "Shape"
  input: "triplet_loss/Maximum"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Size"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/add"
  op: "Add"
  input: "triplet_loss/Mean/reduction_indices"
  input: "gradients/triplet_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Mean_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "gradients/triplet_loss/Mean_grad/add"
  input: "gradients/triplet_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Mean_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/range/start"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/range/delta"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/range"
  op: "Range"
  input: "gradients/triplet_loss/Mean_grad/range/start"
  input: "gradients/triplet_loss/Mean_grad/Size"
  input: "gradients/triplet_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Mean_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Fill/value"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Fill"
  op: "Fill"
  input: "gradients/triplet_loss/Mean_grad/Shape_1"
  input: "gradients/triplet_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Mean_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/triplet_loss/Mean_grad/range"
  input: "gradients/triplet_loss/Mean_grad/mod"
  input: "gradients/triplet_loss/Mean_grad/Shape"
  input: "gradients/triplet_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Mean_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Maximum/y"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/triplet_loss/Mean_grad/DynamicStitch"
  input: "gradients/triplet_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Mean_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/triplet_loss/Mean_grad/Shape"
  input: "gradients/triplet_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Mean_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/total_loss_grad/tuple/control_dependency"
  input: "gradients/triplet_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/triplet_loss/Mean_grad/Reshape"
  input: "gradients/triplet_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "triplet_loss/Maximum"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Shape_3"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Const"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/triplet_loss/Mean_grad/Shape_2"
  input: "gradients/triplet_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Const_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/triplet_loss/Mean_grad/Shape_3"
  input: "gradients/triplet_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/triplet_loss/Mean_grad/Prod_1"
  input: "gradients/triplet_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/triplet_loss/Mean_grad/Prod"
  input: "gradients/triplet_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/triplet_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/triplet_loss/Mean_grad/Tile"
  input: "gradients/triplet_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer_grad/Mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_1"
  input: "Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_1"
  input: "Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer_grad/Mul_1"
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_2"
  input: "Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_2"
  input: "Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_3"
  input: "Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_3"
  input: "Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_4"
  input: "Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_4"
  input: "Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_5"
  input: "Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_5"
  input: "Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_6"
  input: "Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_6"
  input: "Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_7"
  input: "Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_7"
  input: "Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_8"
  input: "Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_8"
  input: "Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_9"
  input: "Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_9"
  input: "Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer_grad/Mul"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_10"
  input: "Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  op: "Mul"
  input: "gradients/total_loss_grad/tuple/control_dependency_10"
  input: "Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer/scale"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer_grad/Mul_1"
}
node {
  name: "gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer_grad/Mul"
  input: "^gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer_grad/Mul_1"
  input: "^gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/Shape"
  op: "Shape"
  input: "triplet_loss/Add"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/Shape_2"
  op: "Shape"
  input: "gradients/triplet_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/zeros/Const"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/zeros"
  op: "Fill"
  input: "gradients/triplet_loss/Maximum_grad/Shape_2"
  input: "gradients/triplet_loss/Maximum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "triplet_loss/Add"
  input: "triplet_loss/Maximum/y"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/triplet_loss/Maximum_grad/Shape"
  input: "gradients/triplet_loss/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/Select"
  op: "Select"
  input: "gradients/triplet_loss/Maximum_grad/GreaterEqual"
  input: "gradients/triplet_loss/Mean_grad/truediv"
  input: "gradients/triplet_loss/Maximum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/Select_1"
  op: "Select"
  input: "gradients/triplet_loss/Maximum_grad/GreaterEqual"
  input: "gradients/triplet_loss/Maximum_grad/zeros"
  input: "gradients/triplet_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/Sum"
  op: "Sum"
  input: "gradients/triplet_loss/Maximum_grad/Select"
  input: "gradients/triplet_loss/Maximum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/Reshape"
  op: "Reshape"
  input: "gradients/triplet_loss/Maximum_grad/Sum"
  input: "gradients/triplet_loss/Maximum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/Sum_1"
  op: "Sum"
  input: "gradients/triplet_loss/Maximum_grad/Select_1"
  input: "gradients/triplet_loss/Maximum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/triplet_loss/Maximum_grad/Sum_1"
  input: "gradients/triplet_loss/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/triplet_loss/Maximum_grad/Reshape"
  input: "^gradients/triplet_loss/Maximum_grad/Reshape_1"
}
node {
  name: "gradients/triplet_loss/Maximum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/triplet_loss/Maximum_grad/Reshape"
  input: "^gradients/triplet_loss/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Maximum_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Maximum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/triplet_loss/Maximum_grad/Reshape_1"
  input: "^gradients/triplet_loss/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Maximum_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_1a_5x5/weights/read"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_1b_1x1/weights/read"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_2a_3x3/weights/read"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_2b_1x1/weights/read"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_3a_3x3/weights/read"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_3b_1x1/weights/read"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_4a_3x3/weights/read"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_4b_1x1/weights/read"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  op: "Mul"
  input: "Light_CNN/Conv2d_5a_3x3/weights/read"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  op: "Mul"
  input: "Light_CNN/Bottleneck/weights/read"
  input: "gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/triplet_loss/Add_grad/Shape"
  op: "Shape"
  input: "triplet_loss/Sub_2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Add_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/triplet_loss/Add_grad/Shape"
  input: "gradients/triplet_loss/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Add_grad/Sum"
  op: "Sum"
  input: "gradients/triplet_loss/Maximum_grad/tuple/control_dependency"
  input: "gradients/triplet_loss/Add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/triplet_loss/Add_grad/Reshape"
  op: "Reshape"
  input: "gradients/triplet_loss/Add_grad/Sum"
  input: "gradients/triplet_loss/Add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Add_grad/Sum_1"
  op: "Sum"
  input: "gradients/triplet_loss/Maximum_grad/tuple/control_dependency"
  input: "gradients/triplet_loss/Add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/triplet_loss/Add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/triplet_loss/Add_grad/Sum_1"
  input: "gradients/triplet_loss/Add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/triplet_loss/Add_grad/Reshape"
  input: "^gradients/triplet_loss/Add_grad/Reshape_1"
}
node {
  name: "gradients/triplet_loss/Add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/triplet_loss/Add_grad/Reshape"
  input: "^gradients/triplet_loss/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Add_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/triplet_loss/Add_grad/Reshape_1"
  input: "^gradients/triplet_loss/Add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_2_grad/Shape"
  op: "Shape"
  input: "triplet_loss/Sum"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_2_grad/Shape_1"
  op: "Shape"
  input: "triplet_loss/Sum_1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/triplet_loss/Sub_2_grad/Shape"
  input: "gradients/triplet_loss/Sub_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_2_grad/Sum"
  op: "Sum"
  input: "gradients/triplet_loss/Add_grad/tuple/control_dependency"
  input: "gradients/triplet_loss/Sub_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/triplet_loss/Sub_2_grad/Sum"
  input: "gradients/triplet_loss/Sub_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/triplet_loss/Add_grad/tuple/control_dependency"
  input: "gradients/triplet_loss/Sub_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_2_grad/Neg"
  op: "Neg"
  input: "gradients/triplet_loss/Sub_2_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/triplet_loss/Sub_2_grad/Neg"
  input: "gradients/triplet_loss/Sub_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/triplet_loss/Sub_2_grad/Reshape"
  input: "^gradients/triplet_loss/Sub_2_grad/Reshape_1"
}
node {
  name: "gradients/triplet_loss/Sub_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/triplet_loss/Sub_2_grad/Reshape"
  input: "^gradients/triplet_loss/Sub_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sub_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/triplet_loss/Sub_2_grad/Reshape_1"
  input: "^gradients/triplet_loss/Sub_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sub_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/Shape"
  op: "Shape"
  input: "triplet_loss/Square"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/Size"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/add"
  op: "Add"
  input: "triplet_loss/Sum/reduction_indices"
  input: "gradients/triplet_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/triplet_loss/Sum_grad/add"
  input: "gradients/triplet_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/range/start"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/range/delta"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/range"
  op: "Range"
  input: "gradients/triplet_loss/Sum_grad/range/start"
  input: "gradients/triplet_loss/Sum_grad/Size"
  input: "gradients/triplet_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/Fill/value"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/triplet_loss/Sum_grad/Shape_1"
  input: "gradients/triplet_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/triplet_loss/Sum_grad/range"
  input: "gradients/triplet_loss/Sum_grad/mod"
  input: "gradients/triplet_loss/Sum_grad/Shape"
  input: "gradients/triplet_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/Maximum/y"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/triplet_loss/Sum_grad/DynamicStitch"
  input: "gradients/triplet_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/triplet_loss/Sum_grad/Shape"
  input: "gradients/triplet_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/triplet_loss/Sub_2_grad/tuple/control_dependency"
  input: "gradients/triplet_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/triplet_loss/Sum_grad/Reshape"
  input: "gradients/triplet_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/Shape"
  op: "Shape"
  input: "triplet_loss/Square_1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/Size"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/add"
  op: "Add"
  input: "triplet_loss/Sum_1/reduction_indices"
  input: "gradients/triplet_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_1_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/mod"
  op: "FloorMod"
  input: "gradients/triplet_loss/Sum_1_grad/add"
  input: "gradients/triplet_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_1_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/range/start"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/range/delta"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/range"
  op: "Range"
  input: "gradients/triplet_loss/Sum_1_grad/range/start"
  input: "gradients/triplet_loss/Sum_1_grad/Size"
  input: "gradients/triplet_loss/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_1_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/Fill/value"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/Fill"
  op: "Fill"
  input: "gradients/triplet_loss/Sum_1_grad/Shape_1"
  input: "gradients/triplet_loss/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_1_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/triplet_loss/Sum_1_grad/range"
  input: "gradients/triplet_loss/Sum_1_grad/mod"
  input: "gradients/triplet_loss/Sum_1_grad/Shape"
  input: "gradients/triplet_loss/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_1_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/Maximum/y"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/triplet_loss/Sum_1_grad/DynamicStitch"
  input: "gradients/triplet_loss/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_1_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/triplet_loss/Sum_1_grad/Shape"
  input: "gradients/triplet_loss/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sum_1_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/triplet_loss/Sub_2_grad/tuple/control_dependency_1"
  input: "gradients/triplet_loss/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/triplet_loss/Sum_1_grad/Reshape"
  input: "gradients/triplet_loss/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Square_grad/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/triplet_loss/Sum_grad/Tile"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Square_grad/Mul"
  op: "Mul"
  input: "triplet_loss/Sub"
  input: "gradients/triplet_loss/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/triplet_loss/Square_grad/Mul_1"
  op: "Mul"
  input: "gradients/triplet_loss/Sum_grad/Tile"
  input: "gradients/triplet_loss/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/triplet_loss/Square_1_grad/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/triplet_loss/Sum_1_grad/Tile"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Square_1_grad/Mul"
  op: "Mul"
  input: "triplet_loss/Sub_1"
  input: "gradients/triplet_loss/Square_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/triplet_loss/Square_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/triplet_loss/Sum_1_grad/Tile"
  input: "gradients/triplet_loss/Square_1_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_grad/Shape"
  op: "Shape"
  input: "unstack_4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_grad/Shape_1"
  op: "Shape"
  input: "unstack_4:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/triplet_loss/Sub_grad/Shape"
  input: "gradients/triplet_loss/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_grad/Sum"
  op: "Sum"
  input: "gradients/triplet_loss/Square_grad/Mul_1"
  input: "gradients/triplet_loss/Sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/triplet_loss/Sub_grad/Sum"
  input: "gradients/triplet_loss/Sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/triplet_loss/Square_grad/Mul_1"
  input: "gradients/triplet_loss/Sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/triplet_loss/Sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/triplet_loss/Sub_grad/Neg"
  input: "gradients/triplet_loss/Sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/triplet_loss/Sub_grad/Reshape"
  input: "^gradients/triplet_loss/Sub_grad/Reshape_1"
}
node {
  name: "gradients/triplet_loss/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/triplet_loss/Sub_grad/Reshape"
  input: "^gradients/triplet_loss/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/triplet_loss/Sub_grad/Reshape_1"
  input: "^gradients/triplet_loss/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_1_grad/Shape"
  op: "Shape"
  input: "unstack_4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_1_grad/Shape_1"
  op: "Shape"
  input: "unstack_4:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/triplet_loss/Sub_1_grad/Shape"
  input: "gradients/triplet_loss/Sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_1_grad/Sum"
  op: "Sum"
  input: "gradients/triplet_loss/Square_1_grad/Mul_1"
  input: "gradients/triplet_loss/Sub_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/triplet_loss/Sub_1_grad/Sum"
  input: "gradients/triplet_loss/Sub_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/triplet_loss/Square_1_grad/Mul_1"
  input: "gradients/triplet_loss/Sub_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_1_grad/Neg"
  op: "Neg"
  input: "gradients/triplet_loss/Sub_1_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/triplet_loss/Sub_1_grad/Neg"
  input: "gradients/triplet_loss/Sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/triplet_loss/Sub_1_grad/Reshape"
  input: "^gradients/triplet_loss/Sub_1_grad/Reshape_1"
}
node {
  name: "gradients/triplet_loss/Sub_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/triplet_loss/Sub_1_grad/Reshape"
  input: "^gradients/triplet_loss/Sub_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sub_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/triplet_loss/Sub_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/triplet_loss/Sub_1_grad/Reshape_1"
  input: "^gradients/triplet_loss/Sub_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sub_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/triplet_loss/Sub_grad/tuple/control_dependency"
  input: "gradients/triplet_loss/Sub_1_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/triplet_loss/Sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/unstack_4_grad/stack"
  op: "Pack"
  input: "gradients/AddN"
  input: "gradients/triplet_loss/Sub_grad/tuple/control_dependency_1"
  input: "gradients/triplet_loss/Sub_1_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/Reshape_grad/Shape"
  op: "Shape"
  input: "embeddings"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/unstack_4_grad/stack"
  input: "gradients/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings_grad/Shape"
  op: "Shape"
  input: "Light_CNN/MFM_output/Max"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings_grad/Shape_1"
  op: "Shape"
  input: "embeddings/Rsqrt"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/embeddings_grad/Shape"
  input: "gradients/embeddings_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings_grad/Mul"
  op: "Mul"
  input: "gradients/Reshape_grad/Reshape"
  input: "embeddings/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/embeddings_grad/Sum"
  op: "Sum"
  input: "gradients/embeddings_grad/Mul"
  input: "gradients/embeddings_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/embeddings_grad/Reshape"
  op: "Reshape"
  input: "gradients/embeddings_grad/Sum"
  input: "gradients/embeddings_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings_grad/Mul_1"
  op: "Mul"
  input: "Light_CNN/MFM_output/Max"
  input: "gradients/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/embeddings_grad/Sum_1"
  op: "Sum"
  input: "gradients/embeddings_grad/Mul_1"
  input: "gradients/embeddings_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/embeddings_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/embeddings_grad/Sum_1"
  input: "gradients/embeddings_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/embeddings_grad/Reshape"
  input: "^gradients/embeddings_grad/Reshape_1"
}
node {
  name: "gradients/embeddings_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/embeddings_grad/Reshape"
  input: "^gradients/embeddings_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/embeddings_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/embeddings_grad/Reshape_1"
  input: "^gradients/embeddings_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/embeddings/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "embeddings/Rsqrt"
  input: "gradients/embeddings_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/Shape"
  op: "Shape"
  input: "embeddings/Sum"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/Shape_2"
  op: "Shape"
  input: "gradients/embeddings/Rsqrt_grad/RsqrtGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/zeros/Const"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/zeros"
  op: "Fill"
  input: "gradients/embeddings/Maximum_grad/Shape_2"
  input: "gradients/embeddings/Maximum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "embeddings/Sum"
  input: "embeddings/Maximum/y"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/embeddings/Maximum_grad/Shape"
  input: "gradients/embeddings/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/Select"
  op: "Select"
  input: "gradients/embeddings/Maximum_grad/GreaterEqual"
  input: "gradients/embeddings/Rsqrt_grad/RsqrtGrad"
  input: "gradients/embeddings/Maximum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/Select_1"
  op: "Select"
  input: "gradients/embeddings/Maximum_grad/GreaterEqual"
  input: "gradients/embeddings/Maximum_grad/zeros"
  input: "gradients/embeddings/Rsqrt_grad/RsqrtGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/Sum"
  op: "Sum"
  input: "gradients/embeddings/Maximum_grad/Select"
  input: "gradients/embeddings/Maximum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/Reshape"
  op: "Reshape"
  input: "gradients/embeddings/Maximum_grad/Sum"
  input: "gradients/embeddings/Maximum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/Sum_1"
  op: "Sum"
  input: "gradients/embeddings/Maximum_grad/Select_1"
  input: "gradients/embeddings/Maximum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/embeddings/Maximum_grad/Sum_1"
  input: "gradients/embeddings/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/embeddings/Maximum_grad/Reshape"
  input: "^gradients/embeddings/Maximum_grad/Reshape_1"
}
node {
  name: "gradients/embeddings/Maximum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/embeddings/Maximum_grad/Reshape"
  input: "^gradients/embeddings/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Maximum_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/embeddings/Maximum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/embeddings/Maximum_grad/Reshape_1"
  input: "^gradients/embeddings/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Maximum_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/Shape"
  op: "Shape"
  input: "embeddings/Square"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/Size"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/add"
  op: "Add"
  input: "embeddings/Sum/reduction_indices"
  input: "gradients/embeddings/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/embeddings/Sum_grad/add"
  input: "gradients/embeddings/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/range/start"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/range/delta"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/range"
  op: "Range"
  input: "gradients/embeddings/Sum_grad/range/start"
  input: "gradients/embeddings/Sum_grad/Size"
  input: "gradients/embeddings/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/Fill/value"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/embeddings/Sum_grad/Shape_1"
  input: "gradients/embeddings/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/embeddings/Sum_grad/range"
  input: "gradients/embeddings/Sum_grad/mod"
  input: "gradients/embeddings/Sum_grad/Shape"
  input: "gradients/embeddings/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/Maximum/y"
  op: "Const"
  input: "^avg"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/embeddings/Sum_grad/DynamicStitch"
  input: "gradients/embeddings/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/embeddings/Sum_grad/Shape"
  input: "gradients/embeddings/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/embeddings/Maximum_grad/tuple/control_dependency"
  input: "gradients/embeddings/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/embeddings/Sum_grad/Reshape"
  input: "gradients/embeddings/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings/Square_grad/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/embeddings/Sum_grad/Tile"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/embeddings/Square_grad/Mul"
  op: "Mul"
  input: "Light_CNN/MFM_output/Max"
  input: "gradients/embeddings/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/embeddings/Square_grad/Mul_1"
  op: "Mul"
  input: "gradients/embeddings/Sum_grad/Tile"
  input: "gradients/embeddings/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/embeddings_grad/tuple/control_dependency"
  input: "gradients/embeddings/Square_grad/Mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/embeddings_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/Shape"
  op: "Shape"
  input: "Light_CNN/MFM_output/Reshape"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/Size"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/add"
  op: "Add"
  input: "Light_CNN/MFM_output/Max/reduction_indices"
  input: "gradients/Light_CNN/MFM_output/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/mod"
  op: "FloorMod"
  input: "gradients/Light_CNN/MFM_output/Max_grad/add"
  input: "gradients/Light_CNN/MFM_output/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/range/start"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/range/delta"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/range"
  op: "Range"
  input: "gradients/Light_CNN/MFM_output/Max_grad/range/start"
  input: "gradients/Light_CNN/MFM_output/Max_grad/Size"
  input: "gradients/Light_CNN/MFM_output/Max_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/Fill/value"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/Fill"
  op: "Fill"
  input: "gradients/Light_CNN/MFM_output/Max_grad/Shape_1"
  input: "gradients/Light_CNN/MFM_output/Max_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Light_CNN/MFM_output/Max_grad/range"
  input: "gradients/Light_CNN/MFM_output/Max_grad/mod"
  input: "gradients/Light_CNN/MFM_output/Max_grad/Shape"
  input: "gradients/Light_CNN/MFM_output/Max_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/Reshape"
  op: "Reshape"
  input: "Light_CNN/MFM_output/Max"
  input: "gradients/Light_CNN/MFM_output/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/AddN_1"
  input: "gradients/Light_CNN/MFM_output/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/Equal"
  op: "Equal"
  input: "gradients/Light_CNN/MFM_output/Max_grad/Reshape"
  input: "Light_CNN/MFM_output/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/Cast"
  op: "Cast"
  input: "gradients/Light_CNN/MFM_output/Max_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/Sum"
  op: "Sum"
  input: "gradients/Light_CNN/MFM_output/Max_grad/Cast"
  input: "Light_CNN/MFM_output/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Light_CNN/MFM_output/Max_grad/Sum"
  input: "gradients/Light_CNN/MFM_output/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/div"
  op: "RealDiv"
  input: "gradients/Light_CNN/MFM_output/Max_grad/Cast"
  input: "gradients/Light_CNN/MFM_output/Max_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Max_grad/mul"
  op: "Mul"
  input: "gradients/Light_CNN/MFM_output/Max_grad/div"
  input: "gradients/Light_CNN/MFM_output/Max_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Reshape_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Bottleneck/BatchNorm/Reshape_1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/MFM_output/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/Light_CNN/MFM_output/Max_grad/mul"
  input: "gradients/Light_CNN/MFM_output/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/Reshape_1_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/Merge"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/Light_CNN/MFM_output/Reshape_grad/Reshape"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/Reshape_1_grad/Reshape"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/Reshape_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/Reshape_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/Reshape_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/Merge"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_1"
  op: "Shape"
  input: "gradients/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Fill"
  input: "gradients/Shape_1"
  input: "gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/zeros"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/Merge"
  input: "Light_CNN/Bottleneck/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_2"
  op: "Shape"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_1/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_1"
  op: "Fill"
  input: "gradients/Shape_2"
  input: "gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_1"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/AddN_2"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_1"
  op: "ZerosLike"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_2"
  op: "ZerosLike"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_3"
  op: "ZerosLike"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_4"
  op: "ZerosLike"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_5"
  op: "ZerosLike"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_6"
  op: "ZerosLike"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_7"
  op: "ZerosLike"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm:3"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/Reshape"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_3"
  op: "Shape"
  input: "gradients/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_2/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_2"
  op: "Fill"
  input: "gradients/Shape_3"
  input: "gradients/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  input: "gradients/zeros_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/read"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_4"
  op: "Shape"
  input: "gradients/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_3/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_3"
  op: "Fill"
  input: "gradients/Shape_4"
  input: "gradients/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  input: "gradients/zeros_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_4"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/Reshape"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_5"
  op: "Shape"
  input: "gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_4/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_4"
  op: "Fill"
  input: "gradients/Shape_5"
  input: "gradients/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_4"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_5"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/read"
  input: "Light_CNN/Bottleneck/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_6"
  op: "Shape"
  input: "gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_5/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_5"
  op: "Fill"
  input: "gradients/Shape_6"
  input: "gradients/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_5"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/Reshape_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Bottleneck/MatMul"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/BatchNorm/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_3"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/Reshape_grad/Reshape"
  input: "Light_CNN/Bottleneck/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Light_CNN/Logits/Dropout/cond/Merge"
  input: "gradients/Light_CNN/Bottleneck/BatchNorm/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Bottleneck/MatMul_grad/MatMul"
  input: "^gradients/Light_CNN/Bottleneck/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/Light_CNN/Bottleneck/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/MatMul_grad/MatMul"
  input: "^gradients/Light_CNN/Bottleneck/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Bottleneck/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Bottleneck/MatMul_grad/MatMul_1"
  input: "^gradients/Light_CNN/Bottleneck/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/Light_CNN/Bottleneck/MatMul_grad/tuple/control_dependency"
  input: "Light_CNN/Logits/Dropout/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Logits/Dropout/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Logits/Dropout/cond/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Logits/Dropout/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Logits/Dropout/cond/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Logits/Dropout/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  input: "gradients/Light_CNN/Bottleneck/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Bottleneck/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Logits/Dropout/cond/dropout/div"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "Light_CNN/Logits/Dropout/cond/dropout/Floor"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Shape"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/Light_CNN/Logits/Dropout/cond/Merge_grad/tuple/control_dependency_1"
  input: "Light_CNN/Logits/Dropout/cond/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Mul"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Sum"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "Light_CNN/Logits/Dropout/cond/dropout/div"
  input: "gradients/Light_CNN/Logits/Dropout/cond/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Mul_1"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Sum_1"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Reshape"
  input: "^gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Reshape"
  input: "^gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Reshape_1"
  input: "^gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Switch_6"
  op: "Switch"
  input: "Light_CNN/Logits/Flatten/flatten/Reshape"
  input: "Light_CNN/Logits/Dropout/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_7"
  op: "Shape"
  input: "gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_6/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_6"
  op: "Fill"
  input: "gradients/Shape_7"
  input: "gradients/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Logits/Dropout/cond/Merge_grad/tuple/control_dependency"
  input: "gradients/zeros_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Logits/Dropout/cond/dropout/Shape/Switch:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Shape"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/tuple/control_dependency"
  input: "Light_CNN/Logits/Dropout/cond/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Sum"
  op: "Sum"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/RealDiv"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Sum"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Neg"
  op: "Neg"
  input: "Light_CNN/Logits/Dropout/cond/dropout/Shape/Switch:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Neg"
  input: "Light_CNN/Logits/Dropout/cond/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/RealDiv_1"
  input: "Light_CNN/Logits/Dropout/cond/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/mul"
  op: "Mul"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/mul"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Sum_1"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Reshape"
  input: "^gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Reshape_1"
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Reshape"
  input: "^gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Reshape_1"
  input: "^gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/Switch_7"
  op: "Switch"
  input: "Light_CNN/Logits/Flatten/flatten/Reshape"
  input: "Light_CNN/Logits/Dropout/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_8"
  op: "Shape"
  input: "gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_7/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_7"
  op: "Fill"
  input: "gradients/Shape_8"
  input: "gradients/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Dropout/cond/dropout/Shape/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_7"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/div_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/Light_CNN/Logits/Dropout/cond/Identity/Switch_grad/cond_grad"
  input: "gradients/Light_CNN/Logits/Dropout/cond/dropout/Shape/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Logits/Dropout/cond/Identity/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Flatten/flatten/Reshape_grad/Shape"
  op: "Shape"
  input: "Light_CNN/maxpool5/MaxPool"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Logits/Flatten/flatten/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_6"
  input: "gradients/Light_CNN/Logits/Flatten/flatten/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/maxpool5/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "Light_CNN/Conv2d_5a_3x3_MFM/Max"
  input: "Light_CNN/maxpool5/MaxPool"
  input: "gradients/Light_CNN/Logits/Flatten/flatten/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_5a_3x3_MFM/Reshape"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Size"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/add"
  op: "Add"
  input: "Light_CNN/Conv2d_5a_3x3_MFM/Max/reduction_indices"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/mod"
  op: "FloorMod"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/add"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/range/start"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/range/delta"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/range"
  op: "Range"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/range/start"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Size"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Fill/value"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Fill"
  op: "Fill"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Shape_1"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/range"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/mod"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Shape"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_5a_3x3_MFM/Max"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Light_CNN/maxpool5/MaxPool_grad/MaxPoolGrad"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Equal"
  op: "Equal"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Reshape"
  input: "Light_CNN/Conv2d_5a_3x3_MFM/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Cast"
  op: "Cast"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Sum"
  op: "Sum"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Cast"
  input: "Light_CNN/Conv2d_5a_3x3_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Sum"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/div"
  op: "RealDiv"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Cast"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/mul"
  op: "Mul"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/div"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Reshape_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Merge"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Max_grad/mul"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/Light_CNN/Conv2d_5a_3x3_MFM/Reshape_grad/Reshape"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Switch_8"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_9"
  op: "Shape"
  input: "gradients/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_8/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_8"
  op: "Fill"
  input: "gradients/Shape_9"
  input: "gradients/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/zeros_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_9"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_10"
  op: "Shape"
  input: "gradients/Switch_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_9/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_9"
  op: "Fill"
  input: "gradients/Shape_10"
  input: "gradients/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_9"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/AddN_7"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_8"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_9"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_10"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_11"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_12"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_13"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_14"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_15"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm:3"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_10"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_11"
  op: "Shape"
  input: "gradients/Switch_10:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_10/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_10"
  op: "Fill"
  input: "gradients/Shape_11"
  input: "gradients/zeros_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  input: "gradients/zeros_10"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_11"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_12"
  op: "Shape"
  input: "gradients/Switch_11:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_11/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_11"
  op: "Fill"
  input: "gradients/Shape_12"
  input: "gradients/zeros_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  input: "gradients/zeros_11"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_12"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_13"
  op: "Shape"
  input: "gradients/Switch_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_12/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_12"
  op: "Fill"
  input: "gradients/Shape_13"
  input: "gradients/zeros_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_12"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_13"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_14"
  op: "Shape"
  input: "gradients/Switch_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_13/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_13"
  op: "Fill"
  input: "gradients/Shape_14"
  input: "gradients/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_13"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Light_CNN/Conv2d_4b_1x1_MFM/Max"
  input: "Light_CNN/Conv2d_5a_3x3/weights/read"
  input: "^avg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/Const"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/ShapeN"
  input: "Light_CNN/Conv2d_5a_3x3/weights/read"
  input: "gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Light_CNN/Conv2d_4b_1x1_MFM/Max"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/Const"
  input: "gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/AddN_9"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_4b_1x1_MFM/Reshape"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Size"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/add"
  op: "Add"
  input: "Light_CNN/Conv2d_4b_1x1_MFM/Max/reduction_indices"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/mod"
  op: "FloorMod"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/add"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/range/start"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/range/delta"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/range"
  op: "Range"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/range/start"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Size"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Fill/value"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Fill"
  op: "Fill"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Shape_1"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/range"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/mod"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Shape"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_4b_1x1_MFM/Max"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/tuple/control_dependency"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Equal"
  op: "Equal"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Reshape"
  input: "Light_CNN/Conv2d_4b_1x1_MFM/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Cast"
  op: "Cast"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Sum"
  op: "Sum"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Cast"
  input: "Light_CNN/Conv2d_4b_1x1_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Sum"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/div"
  op: "RealDiv"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Cast"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/mul"
  op: "Mul"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/div"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_10"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  input: "gradients/Light_CNN/Conv2d_5a_3x3/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_5a_3x3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Reshape_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Merge"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Max_grad/mul"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/Light_CNN/Conv2d_4b_1x1_MFM/Reshape_grad/Reshape"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Switch_14"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_15"
  op: "Shape"
  input: "gradients/Switch_14:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_14/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_14"
  op: "Fill"
  input: "gradients/Shape_15"
  input: "gradients/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/zeros_14"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_15"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_16"
  op: "Shape"
  input: "gradients/Switch_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_15/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_15"
  op: "Fill"
  input: "gradients/Shape_16"
  input: "gradients/zeros_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_15"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_11"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/AddN_11"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_16"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_17"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_18"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_19"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_20"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_21"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_22"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_23"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm:3"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_16"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_17"
  op: "Shape"
  input: "gradients/Switch_16:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_16/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_16"
  op: "Fill"
  input: "gradients/Shape_17"
  input: "gradients/zeros_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  input: "gradients/zeros_16"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_17"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_18"
  op: "Shape"
  input: "gradients/Switch_17:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_17/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_17"
  op: "Fill"
  input: "gradients/Shape_18"
  input: "gradients/zeros_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  input: "gradients/zeros_17"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_18"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_19"
  op: "Shape"
  input: "gradients/Switch_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_18/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_18"
  op: "Fill"
  input: "gradients/Shape_19"
  input: "gradients/zeros_18/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_18"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_19"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_20"
  op: "Shape"
  input: "gradients/Switch_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_19/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_19"
  op: "Fill"
  input: "gradients/Shape_20"
  input: "gradients/zeros_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_19"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_12"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Light_CNN/Conv2d_4a_3x3_MFM/Max"
  input: "Light_CNN/Conv2d_4b_1x1/weights/read"
  input: "^avg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/Const"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/ShapeN"
  input: "Light_CNN/Conv2d_4b_1x1/weights/read"
  input: "gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Light_CNN/Conv2d_4a_3x3_MFM/Max"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/Const"
  input: "gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/AddN_13"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_4a_3x3_MFM/Reshape"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Size"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/add"
  op: "Add"
  input: "Light_CNN/Conv2d_4a_3x3_MFM/Max/reduction_indices"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/mod"
  op: "FloorMod"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/add"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/range/start"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/range/delta"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/range"
  op: "Range"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/range/start"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Size"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Fill/value"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Fill"
  op: "Fill"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Shape_1"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/range"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/mod"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Shape"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_4a_3x3_MFM/Max"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/tuple/control_dependency"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Equal"
  op: "Equal"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Reshape"
  input: "Light_CNN/Conv2d_4a_3x3_MFM/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Cast"
  op: "Cast"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Sum"
  op: "Sum"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Cast"
  input: "Light_CNN/Conv2d_4a_3x3_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Sum"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/div"
  op: "RealDiv"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Cast"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/mul"
  op: "Mul"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/div"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_14"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  input: "gradients/Light_CNN/Conv2d_4b_1x1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4b_1x1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Reshape_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Merge"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Max_grad/mul"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/Light_CNN/Conv2d_4a_3x3_MFM/Reshape_grad/Reshape"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Switch_20"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_21"
  op: "Shape"
  input: "gradients/Switch_20:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_20/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_20"
  op: "Fill"
  input: "gradients/Shape_21"
  input: "gradients/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/zeros_20"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_21"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_22"
  op: "Shape"
  input: "gradients/Switch_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_21/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_21"
  op: "Fill"
  input: "gradients/Shape_22"
  input: "gradients/zeros_21/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_21"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_15"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/AddN_15"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_24"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_25"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_26"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_27"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_28"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_29"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_30"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_31"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm:3"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_22"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_23"
  op: "Shape"
  input: "gradients/Switch_22:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_22/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_22"
  op: "Fill"
  input: "gradients/Shape_23"
  input: "gradients/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  input: "gradients/zeros_22"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_23"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_24"
  op: "Shape"
  input: "gradients/Switch_23:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_23/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_23"
  op: "Fill"
  input: "gradients/Shape_24"
  input: "gradients/zeros_23/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  input: "gradients/zeros_23"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_24"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_25"
  op: "Shape"
  input: "gradients/Switch_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_24/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_24"
  op: "Fill"
  input: "gradients/Shape_25"
  input: "gradients/zeros_24/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_24"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_25"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_26"
  op: "Shape"
  input: "gradients/Switch_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_25/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_25"
  op: "Fill"
  input: "gradients/Shape_26"
  input: "gradients/zeros_25/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_25"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_16"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Light_CNN/Conv2d_3b_1x1_MFM/Max"
  input: "Light_CNN/Conv2d_4a_3x3/weights/read"
  input: "^avg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/Const"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/ShapeN"
  input: "Light_CNN/Conv2d_4a_3x3/weights/read"
  input: "gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Light_CNN/Conv2d_3b_1x1_MFM/Max"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/Const"
  input: "gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/AddN_17"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_3b_1x1_MFM/Reshape"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Size"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/add"
  op: "Add"
  input: "Light_CNN/Conv2d_3b_1x1_MFM/Max/reduction_indices"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/mod"
  op: "FloorMod"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/add"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/range/start"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/range/delta"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/range"
  op: "Range"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/range/start"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Size"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Fill/value"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Fill"
  op: "Fill"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Shape_1"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/range"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/mod"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Shape"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_3b_1x1_MFM/Max"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/tuple/control_dependency"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Equal"
  op: "Equal"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Reshape"
  input: "Light_CNN/Conv2d_3b_1x1_MFM/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Cast"
  op: "Cast"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Sum"
  op: "Sum"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Cast"
  input: "Light_CNN/Conv2d_3b_1x1_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Sum"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/div"
  op: "RealDiv"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Cast"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/mul"
  op: "Mul"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/div"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_18"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  input: "gradients/Light_CNN/Conv2d_4a_3x3/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_4a_3x3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Reshape_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Merge"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Max_grad/mul"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/Light_CNN/Conv2d_3b_1x1_MFM/Reshape_grad/Reshape"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Switch_26"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_27"
  op: "Shape"
  input: "gradients/Switch_26:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_26/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_26"
  op: "Fill"
  input: "gradients/Shape_27"
  input: "gradients/zeros_26/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/zeros_26"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_27"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_28"
  op: "Shape"
  input: "gradients/Switch_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_27/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_27"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_27"
  op: "Fill"
  input: "gradients/Shape_28"
  input: "gradients/zeros_27/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_27"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_19"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/AddN_19"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_32"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_33"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_34"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_35"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_36"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_37"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_38"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_39"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm:3"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_28"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_29"
  op: "Shape"
  input: "gradients/Switch_28:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_28/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_28"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_28"
  op: "Fill"
  input: "gradients/Shape_29"
  input: "gradients/zeros_28/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  input: "gradients/zeros_28"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_29"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_30"
  op: "Shape"
  input: "gradients/Switch_29:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_29/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_29"
  op: "Fill"
  input: "gradients/Shape_30"
  input: "gradients/zeros_29/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  input: "gradients/zeros_29"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_30"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_31"
  op: "Shape"
  input: "gradients/Switch_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_30/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_30"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_30"
  op: "Fill"
  input: "gradients/Shape_31"
  input: "gradients/zeros_30/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_30"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_31"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_32"
  op: "Shape"
  input: "gradients/Switch_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_31/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_31"
  op: "Fill"
  input: "gradients/Shape_32"
  input: "gradients/zeros_31/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_31"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_20"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Light_CNN/maxpool3/MaxPool"
  input: "Light_CNN/Conv2d_3b_1x1/weights/read"
  input: "^avg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/Const"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\300\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/ShapeN"
  input: "Light_CNN/Conv2d_3b_1x1/weights/read"
  input: "gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Light_CNN/maxpool3/MaxPool"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/Const"
  input: "gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/AddN_21"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/maxpool3/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "Light_CNN/Conv2d_3a_3x3_MFM/Max"
  input: "Light_CNN/maxpool3/MaxPool"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_22"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  input: "gradients/Light_CNN/Conv2d_3b_1x1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3b_1x1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_3a_3x3_MFM/Reshape"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Size"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/add"
  op: "Add"
  input: "Light_CNN/Conv2d_3a_3x3_MFM/Max/reduction_indices"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/mod"
  op: "FloorMod"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/add"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/range/start"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/range/delta"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/range"
  op: "Range"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/range/start"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Size"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Fill/value"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Fill"
  op: "Fill"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Shape_1"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/range"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/mod"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Shape"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_3a_3x3_MFM/Max"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Light_CNN/maxpool3/MaxPool_grad/MaxPoolGrad"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Equal"
  op: "Equal"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Reshape"
  input: "Light_CNN/Conv2d_3a_3x3_MFM/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Cast"
  op: "Cast"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Sum"
  op: "Sum"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Cast"
  input: "Light_CNN/Conv2d_3a_3x3_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Sum"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/div"
  op: "RealDiv"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Cast"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/mul"
  op: "Mul"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/div"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Reshape_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Merge"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Max_grad/mul"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/Light_CNN/Conv2d_3a_3x3_MFM/Reshape_grad/Reshape"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Switch_32"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_33"
  op: "Shape"
  input: "gradients/Switch_32:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_32/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_32"
  op: "Fill"
  input: "gradients/Shape_33"
  input: "gradients/zeros_32/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/zeros_32"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_33"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_34"
  op: "Shape"
  input: "gradients/Switch_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_33/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_33"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_33"
  op: "Fill"
  input: "gradients/Shape_34"
  input: "gradients/zeros_33/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_33"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_23"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/AddN_23"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_40"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_41"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_42"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_43"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_44"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_45"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_46"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_47"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm:3"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_34"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_35"
  op: "Shape"
  input: "gradients/Switch_34:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_34/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_34"
  op: "Fill"
  input: "gradients/Shape_35"
  input: "gradients/zeros_34/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  input: "gradients/zeros_34"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_35"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_36"
  op: "Shape"
  input: "gradients/Switch_35:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_35/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_35"
  op: "Fill"
  input: "gradients/Shape_36"
  input: "gradients/zeros_35/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  input: "gradients/zeros_35"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_36"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_37"
  op: "Shape"
  input: "gradients/Switch_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_36/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_36"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_36"
  op: "Fill"
  input: "gradients/Shape_37"
  input: "gradients/zeros_36/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_36"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_37"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_38"
  op: "Shape"
  input: "gradients/Switch_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_37/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_37"
  op: "Fill"
  input: "gradients/Shape_38"
  input: "gradients/zeros_37/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_37"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_24"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Light_CNN/Conv2d_2b_1x1_MFM/Max"
  input: "Light_CNN/Conv2d_3a_3x3/weights/read"
  input: "^avg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/Const"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/ShapeN"
  input: "Light_CNN/Conv2d_3a_3x3/weights/read"
  input: "gradients/AddN_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Light_CNN/Conv2d_2b_1x1_MFM/Max"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/Const"
  input: "gradients/AddN_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/AddN_25"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_2b_1x1_MFM/Reshape"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Size"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/add"
  op: "Add"
  input: "Light_CNN/Conv2d_2b_1x1_MFM/Max/reduction_indices"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/mod"
  op: "FloorMod"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/add"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/range/start"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/range/delta"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/range"
  op: "Range"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/range/start"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Size"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Fill/value"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Fill"
  op: "Fill"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Shape_1"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/range"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/mod"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Shape"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_2b_1x1_MFM/Max"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/tuple/control_dependency"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Equal"
  op: "Equal"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Reshape"
  input: "Light_CNN/Conv2d_2b_1x1_MFM/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Cast"
  op: "Cast"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Sum"
  op: "Sum"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Cast"
  input: "Light_CNN/Conv2d_2b_1x1_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Sum"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/div"
  op: "RealDiv"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Cast"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/mul"
  op: "Mul"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/div"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_26"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  input: "gradients/Light_CNN/Conv2d_3a_3x3/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_3a_3x3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Reshape_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Merge"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Max_grad/mul"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/Light_CNN/Conv2d_2b_1x1_MFM/Reshape_grad/Reshape"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Switch_38"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_39"
  op: "Shape"
  input: "gradients/Switch_38:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_38/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_38"
  op: "Fill"
  input: "gradients/Shape_39"
  input: "gradients/zeros_38/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/zeros_38"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_39"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_40"
  op: "Shape"
  input: "gradients/Switch_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_39/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_39"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_39"
  op: "Fill"
  input: "gradients/Shape_40"
  input: "gradients/zeros_39/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_39"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_27"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/AddN_27"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_48"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_49"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_50"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_51"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_52"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_53"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_54"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_55"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm:3"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_40"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_41"
  op: "Shape"
  input: "gradients/Switch_40:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_40/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_40"
  op: "Fill"
  input: "gradients/Shape_41"
  input: "gradients/zeros_40/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  input: "gradients/zeros_40"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_41"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_42"
  op: "Shape"
  input: "gradients/Switch_41:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_41/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_41"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_41"
  op: "Fill"
  input: "gradients/Shape_42"
  input: "gradients/zeros_41/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  input: "gradients/zeros_41"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_42"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_43"
  op: "Shape"
  input: "gradients/Switch_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_42/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_42"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_42"
  op: "Fill"
  input: "gradients/Shape_43"
  input: "gradients/zeros_42/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_42"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_43"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_44"
  op: "Shape"
  input: "gradients/Switch_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_43/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_43"
  op: "Fill"
  input: "gradients/Shape_44"
  input: "gradients/zeros_43/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_43"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_28"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Light_CNN/maxpool2/MaxPool"
  input: "Light_CNN/Conv2d_2b_1x1/weights/read"
  input: "^avg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/Const"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000`\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/ShapeN"
  input: "Light_CNN/Conv2d_2b_1x1/weights/read"
  input: "gradients/AddN_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Light_CNN/maxpool2/MaxPool"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/Const"
  input: "gradients/AddN_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/AddN_29"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/maxpool2/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "Light_CNN/Conv2d_2a_3x3_MFM/Max"
  input: "Light_CNN/maxpool2/MaxPool"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_30"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  input: "gradients/Light_CNN/Conv2d_2b_1x1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2b_1x1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_2a_3x3_MFM/Reshape"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Size"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/add"
  op: "Add"
  input: "Light_CNN/Conv2d_2a_3x3_MFM/Max/reduction_indices"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/mod"
  op: "FloorMod"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/add"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/range/start"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/range/delta"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/range"
  op: "Range"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/range/start"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Size"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Fill/value"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Fill"
  op: "Fill"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Shape_1"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/range"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/mod"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Shape"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_2a_3x3_MFM/Max"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Light_CNN/maxpool2/MaxPool_grad/MaxPoolGrad"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Equal"
  op: "Equal"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Reshape"
  input: "Light_CNN/Conv2d_2a_3x3_MFM/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Cast"
  op: "Cast"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Sum"
  op: "Sum"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Cast"
  input: "Light_CNN/Conv2d_2a_3x3_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Sum"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/div"
  op: "RealDiv"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Cast"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/mul"
  op: "Mul"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/div"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Reshape_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Merge"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Max_grad/mul"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/Light_CNN/Conv2d_2a_3x3_MFM/Reshape_grad/Reshape"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Switch_44"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_45"
  op: "Shape"
  input: "gradients/Switch_44:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_44/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_44"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_44"
  op: "Fill"
  input: "gradients/Shape_45"
  input: "gradients/zeros_44/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/zeros_44"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_45"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_46"
  op: "Shape"
  input: "gradients/Switch_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_45/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_45"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_45"
  op: "Fill"
  input: "gradients/Shape_46"
  input: "gradients/zeros_45/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_45"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_31"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/AddN_31"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_56"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_57"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_58"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_59"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_60"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_61"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_62"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_63"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm:3"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_46"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_47"
  op: "Shape"
  input: "gradients/Switch_46:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_46/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_46"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_46"
  op: "Fill"
  input: "gradients/Shape_47"
  input: "gradients/zeros_46/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  input: "gradients/zeros_46"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_47"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_48"
  op: "Shape"
  input: "gradients/Switch_47:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_47/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_47"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_47"
  op: "Fill"
  input: "gradients/Shape_48"
  input: "gradients/zeros_47/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  input: "gradients/zeros_47"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_48"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/Conv2D"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_49"
  op: "Shape"
  input: "gradients/Switch_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_48/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_48"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_48"
  op: "Fill"
  input: "gradients/Shape_49"
  input: "gradients/zeros_48/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_48"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_49"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_50"
  op: "Shape"
  input: "gradients/Switch_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_49/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_49"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_49"
  op: "Fill"
  input: "gradients/Shape_50"
  input: "gradients/zeros_49/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_49"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_32"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Light_CNN/Conv2d_1b_1x1_MFM/Max"
  input: "Light_CNN/Conv2d_2a_3x3/weights/read"
  input: "^avg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/Const"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\0000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/ShapeN"
  input: "Light_CNN/Conv2d_2a_3x3/weights/read"
  input: "gradients/AddN_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Light_CNN/Conv2d_1b_1x1_MFM/Max"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/Const"
  input: "gradients/AddN_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/AddN_33"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_1b_1x1_MFM/Reshape"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Size"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/add"
  op: "Add"
  input: "Light_CNN/Conv2d_1b_1x1_MFM/Max/reduction_indices"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/mod"
  op: "FloorMod"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/add"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/range/start"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/range/delta"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/range"
  op: "Range"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/range/start"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Size"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Fill/value"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Fill"
  op: "Fill"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Shape_1"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/range"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/mod"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Shape"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_1b_1x1_MFM/Max"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/tuple/control_dependency"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Equal"
  op: "Equal"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Reshape"
  input: "Light_CNN/Conv2d_1b_1x1_MFM/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Cast"
  op: "Cast"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Sum"
  op: "Sum"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Cast"
  input: "Light_CNN/Conv2d_1b_1x1_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Sum"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/div"
  op: "RealDiv"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Cast"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/mul"
  op: "Mul"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/div"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_34"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  input: "gradients/Light_CNN/Conv2d_2a_3x3/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_2a_3x3/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Reshape_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Merge"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Max_grad/mul"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/Light_CNN/Conv2d_1b_1x1_MFM/Reshape_grad/Reshape"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Switch_50"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_51"
  op: "Shape"
  input: "gradients/Switch_50:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_50/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_50"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_50"
  op: "Fill"
  input: "gradients/Shape_51"
  input: "gradients/zeros_50/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/zeros_50"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_51"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_52"
  op: "Shape"
  input: "gradients/Switch_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_51/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_51"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_51"
  op: "Fill"
  input: "gradients/Shape_52"
  input: "gradients/zeros_51/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_51"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_35"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/AddN_35"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_64"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_65"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_66"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_67"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_68"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_69"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_70"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_71"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm:3"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_52"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_53"
  op: "Shape"
  input: "gradients/Switch_52:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_52/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_52"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_52"
  op: "Fill"
  input: "gradients/Shape_53"
  input: "gradients/zeros_52/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  input: "gradients/zeros_52"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_53"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_54"
  op: "Shape"
  input: "gradients/Switch_53:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_53/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_53"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_53"
  op: "Fill"
  input: "gradients/Shape_54"
  input: "gradients/zeros_53/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  input: "gradients/zeros_53"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_54"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/Conv2D"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_55"
  op: "Shape"
  input: "gradients/Switch_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_54/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_54"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_54"
  op: "Fill"
  input: "gradients/Shape_55"
  input: "gradients/zeros_54/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_54"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_55"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_56"
  op: "Shape"
  input: "gradients/Switch_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_55/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_55"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_55"
  op: "Fill"
  input: "gradients/Shape_56"
  input: "gradients/zeros_55/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_55"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_36"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "Light_CNN/maxpool1/MaxPool"
  input: "Light_CNN/Conv2d_1b_1x1/weights/read"
  input: "^avg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/Const"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\0000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/ShapeN"
  input: "Light_CNN/Conv2d_1b_1x1/weights/read"
  input: "gradients/AddN_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Light_CNN/maxpool1/MaxPool"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/Const"
  input: "gradients/AddN_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/AddN_37"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/maxpool1/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "Light_CNN/Conv2d_1a_5x5_MFM/Max"
  input: "Light_CNN/maxpool1/MaxPool"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_38"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  input: "gradients/Light_CNN/Conv2d_1b_1x1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1b_1x1/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_1a_5x5_MFM/Reshape"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Size"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/add"
  op: "Add"
  input: "Light_CNN/Conv2d_1a_5x5_MFM/Max/reduction_indices"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/mod"
  op: "FloorMod"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/add"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Shape_1"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/range/start"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/range/delta"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/range"
  op: "Range"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/range/start"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Size"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Fill/value"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Fill"
  op: "Fill"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Shape_1"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/range"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/mod"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Shape"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Reshape"
  op: "Reshape"
  input: "Light_CNN/Conv2d_1a_5x5_MFM/Max"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Light_CNN/maxpool1/MaxPool_grad/MaxPoolGrad"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Equal"
  op: "Equal"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Reshape"
  input: "Light_CNN/Conv2d_1a_5x5_MFM/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Cast"
  op: "Cast"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Sum"
  op: "Sum"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Cast"
  input: "Light_CNN/Conv2d_1a_5x5_MFM/Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Sum"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/div"
  op: "RealDiv"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Cast"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/mul"
  op: "Mul"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/div"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Reshape_grad/Shape"
  op: "Shape"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Merge"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Max_grad/mul"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/Light_CNN/Conv2d_1a_5x5_MFM/Reshape_grad/Reshape"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5_MFM/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/Switch_56"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_57"
  op: "Shape"
  input: "gradients/Switch_56:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_56/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_56"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_56"
  op: "Fill"
  input: "gradients/Shape_57"
  input: "gradients/zeros_56/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Merge_grad/tuple/control_dependency"
  input: "gradients/zeros_56"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_57"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_58"
  op: "Shape"
  input: "gradients/Switch_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_57/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_57"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_57"
  op: "Fill"
  input: "gradients/Shape_58"
  input: "gradients/zeros_57/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_57"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Merge_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_39"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Switch_1_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Identity/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/AddN_39"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_grad/cond_grad"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_grad/cond_grad:1"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond_1/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_72"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_73"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_74"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_75"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_grad/tuple/control_dependency"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_3"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_76"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm:1"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_77"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm:2"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_78"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm:3"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_79"
  op: "ZerosLike"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm:4"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/Merge_grad/tuple/control_dependency_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm/Switch:1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm/Switch_1:1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm:3"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000475
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_58"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/Conv2D"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_59"
  op: "Shape"
  input: "gradients/Switch_58:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_58/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_58"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_58"
  op: "Fill"
  input: "gradients/Shape_59"
  input: "gradients/zeros_58/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency"
  input: "gradients/zeros_58"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_59"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_60"
  op: "Shape"
  input: "gradients/Switch_59:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_59/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_59"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_59"
  op: "Fill"
  input: "gradients/Shape_60"
  input: "gradients/zeros_59/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1_grad/tuple/control_dependency_2"
  input: "gradients/zeros_59"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_60"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/Conv2D"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_61"
  op: "Shape"
  input: "gradients/Switch_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_60/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_60"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_60"
  op: "Fill"
  input: "gradients/Shape_61"
  input: "gradients/zeros_60/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_60"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_61"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/read"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/pred_id"
  input: "^avg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_62"
  op: "Shape"
  input: "gradients/Switch_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_61/Const"
  op: "Const"
  input: "^avg"
  input: "^gradients/Switch_61"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_61"
  op: "Fill"
  input: "gradients/Shape_62"
  input: "gradients/zeros_61/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_61"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_40"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "input"
  input: "Light_CNN/Conv2d_1a_5x5/weights/read"
  input: "^avg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/Const"
  op: "Const"
  input: "^avg"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/ShapeN"
  input: "Light_CNN/Conv2d_1a_5x5/weights/read"
  input: "gradients/AddN_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "input"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/Const"
  input: "gradients/AddN_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^avg"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/AddN_41"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm/Switch_2_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/BatchNorm/cond/FusedBatchNorm_1/Switch_2_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_42"
  op: "AddN"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
  input: "gradients/Light_CNN/Conv2d_1a_5x5/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Light_CNN/Conv2d_1a_5x5/kernel/Regularizer/l2_regularizer/L2Loss_grad/mul"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/Momentum/Initializer/zeros"
  op: "Fill"
  input: "Light_CNN/Conv2d_1a_5x5/weights/Momentum/Initializer/zeros/shape_as_tensor"
  input: "Light_CNN/Conv2d_1a_5x5/weights/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1a_5x5/weights/Momentum"
  input: "Light_CNN/Conv2d_1a_5x5/weights/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/weights/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Momentum"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\0000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/Momentum/Initializer/zeros"
  op: "Fill"
  input: "Light_CNN/Conv2d_1b_1x1/weights/Momentum/Initializer/zeros/shape_as_tensor"
  input: "Light_CNN/Conv2d_1b_1x1/weights/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 48
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1b_1x1/weights/Momentum"
  input: "Light_CNN/Conv2d_1b_1x1/weights/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/weights/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Momentum"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\0000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/Momentum/Initializer/zeros"
  op: "Fill"
  input: "Light_CNN/Conv2d_2a_3x3/weights/Momentum/Initializer/zeros/shape_as_tensor"
  input: "Light_CNN/Conv2d_2a_3x3/weights/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 48
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2a_3x3/weights/Momentum"
  input: "Light_CNN/Conv2d_2a_3x3/weights/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/weights/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Momentum"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000`\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/Momentum/Initializer/zeros"
  op: "Fill"
  input: "Light_CNN/Conv2d_2b_1x1/weights/Momentum/Initializer/zeros/shape_as_tensor"
  input: "Light_CNN/Conv2d_2b_1x1/weights/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2b_1x1/weights/Momentum"
  input: "Light_CNN/Conv2d_2b_1x1/weights/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/weights/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Momentum"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/Momentum/Initializer/zeros"
  op: "Fill"
  input: "Light_CNN/Conv2d_3a_3x3/weights/Momentum/Initializer/zeros/shape_as_tensor"
  input: "Light_CNN/Conv2d_3a_3x3/weights/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3a_3x3/weights/Momentum"
  input: "Light_CNN/Conv2d_3a_3x3/weights/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/weights/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Momentum"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\300\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/Momentum/Initializer/zeros"
  op: "Fill"
  input: "Light_CNN/Conv2d_3b_1x1/weights/Momentum/Initializer/zeros/shape_as_tensor"
  input: "Light_CNN/Conv2d_3b_1x1/weights/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 192
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3b_1x1/weights/Momentum"
  input: "Light_CNN/Conv2d_3b_1x1/weights/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/weights/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Momentum"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/Momentum/Initializer/zeros"
  op: "Fill"
  input: "Light_CNN/Conv2d_4a_3x3/weights/Momentum/Initializer/zeros/shape_as_tensor"
  input: "Light_CNN/Conv2d_4a_3x3/weights/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 192
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4a_3x3/weights/Momentum"
  input: "Light_CNN/Conv2d_4a_3x3/weights/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/weights/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Momentum"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/Momentum/Initializer/zeros"
  op: "Fill"
  input: "Light_CNN/Conv2d_4b_1x1/weights/Momentum/Initializer/zeros/shape_as_tensor"
  input: "Light_CNN/Conv2d_4b_1x1/weights/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4b_1x1/weights/Momentum"
  input: "Light_CNN/Conv2d_4b_1x1/weights/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/weights/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Momentum"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/Momentum/Initializer/zeros"
  op: "Fill"
  input: "Light_CNN/Conv2d_5a_3x3/weights/Momentum/Initializer/zeros/shape_as_tensor"
  input: "Light_CNN/Conv2d_5a_3x3/weights/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_5a_3x3/weights/Momentum"
  input: "Light_CNN/Conv2d_5a_3x3/weights/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/weights/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Momentum"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/Momentum/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000 \000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/Momentum/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/Momentum/Initializer/zeros"
  op: "Fill"
  input: "Light_CNN/Bottleneck/weights/Momentum/Initializer/zeros/shape_as_tensor"
  input: "Light_CNN/Bottleneck/weights/Momentum/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8192
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Bottleneck/weights/Momentum"
  input: "Light_CNN/Bottleneck/weights/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Bottleneck/weights/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/Momentum/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/Momentum"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/Momentum/Assign"
  op: "Assign"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/Momentum"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/Momentum/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/Momentum/read"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/Momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Momentum/momentum"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_1a_5x5/weights/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_1a_5x5/weights"
  input: "Light_CNN/Conv2d_1a_5x5/weights/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_42"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_41"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_1b_1x1/weights/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_1b_1x1/weights"
  input: "Light_CNN/Conv2d_1b_1x1/weights/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_38"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_37"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_2a_3x3/weights/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_2a_3x3/weights"
  input: "Light_CNN/Conv2d_2a_3x3/weights/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_34"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_33"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_2b_1x1/weights/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_2b_1x1/weights"
  input: "Light_CNN/Conv2d_2b_1x1/weights/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_30"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_29"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_3a_3x3/weights/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_3a_3x3/weights"
  input: "Light_CNN/Conv2d_3a_3x3/weights/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_26"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_25"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_3b_1x1/weights/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_3b_1x1/weights"
  input: "Light_CNN/Conv2d_3b_1x1/weights/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_22"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_21"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_4a_3x3/weights/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_4a_3x3/weights"
  input: "Light_CNN/Conv2d_4a_3x3/weights/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_18"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_17"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_4b_1x1/weights/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_4b_1x1/weights"
  input: "Light_CNN/Conv2d_4b_1x1/weights/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_14"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_13"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_5a_3x3/weights/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_5a_3x3/weights"
  input: "Light_CNN/Conv2d_5a_3x3/weights/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_10"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_9"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Bottleneck/weights/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Bottleneck/weights"
  input: "Light_CNN/Bottleneck/weights/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_5"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update_Light_CNN/Bottleneck/BatchNorm/beta/ApplyMomentum"
  op: "ApplyMomentum"
  input: "Light_CNN/Bottleneck/BatchNorm/beta"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/Momentum"
  input: "ExponentialDecay"
  input: "gradients/AddN_4"
  input: "Momentum/momentum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: true
    }
  }
}
node {
  name: "Momentum/update"
  op: "NoOp"
  input: "^Momentum/update_Light_CNN/Bottleneck/BatchNorm/beta/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Bottleneck/weights/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_1a_5x5/weights/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_1b_1x1/weights/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_2a_3x3/weights/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_2b_1x1/weights/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_3a_3x3/weights/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_3b_1x1/weights/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_4a_3x3/weights/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_4b_1x1/weights/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ApplyMomentum"
  input: "^Momentum/update_Light_CNN/Conv2d_5a_3x3/weights/ApplyMomentum"
}
node {
  name: "Momentum/value"
  op: "Const"
  input: "^Momentum/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Momentum"
  op: "AssignAdd"
  input: "Variable"
  input: "Momentum/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_1a_5x5/weights_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_1a_5x5/weights_1/tag"
  input: "Light_CNN/Conv2d_1a_5x5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta_1/tag"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean_1/tag"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance_1/tag"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_1b_1x1/weights_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_1b_1x1/weights_1/tag"
  input: "Light_CNN/Conv2d_1b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta_1/tag"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean_1/tag"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance_1/tag"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_2a_3x3/weights_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_2a_3x3/weights_1/tag"
  input: "Light_CNN/Conv2d_2a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta_1/tag"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean_1/tag"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance_1/tag"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_2b_1x1/weights_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_2b_1x1/weights_1/tag"
  input: "Light_CNN/Conv2d_2b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta_1/tag"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean_1/tag"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance_1/tag"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_3a_3x3/weights_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_3a_3x3/weights_1/tag"
  input: "Light_CNN/Conv2d_3a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta_1/tag"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean_1/tag"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance_1/tag"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_3b_1x1/weights_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_3b_1x1/weights_1/tag"
  input: "Light_CNN/Conv2d_3b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta_1/tag"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean_1/tag"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance_1/tag"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_4a_3x3/weights_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_4a_3x3/weights_1/tag"
  input: "Light_CNN/Conv2d_4a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta_1/tag"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean_1/tag"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance_1/tag"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_4b_1x1/weights_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_4b_1x1/weights_1/tag"
  input: "Light_CNN/Conv2d_4b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta_1/tag"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean_1/tag"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance_1/tag"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_5a_3x3/weights_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_5a_3x3/weights_1/tag"
  input: "Light_CNN/Conv2d_5a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta_1/tag"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean_1/tag"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance_1"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance_1/tag"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Bottleneck/weights_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights_1"
  op: "HistogramSummary"
  input: "Light_CNN/Bottleneck/weights_1/tag"
  input: "Light_CNN/Bottleneck/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Bottleneck/BatchNorm/beta_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta_1"
  op: "HistogramSummary"
  input: "Light_CNN/Bottleneck/BatchNorm/beta_1/tag"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Bottleneck/BatchNorm/moving_mean_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean_1"
  op: "HistogramSummary"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean_1/tag"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance_1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Bottleneck/BatchNorm/moving_variance_1"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance_1"
  op: "HistogramSummary"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance_1/tag"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_1a_5x5/weights/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_1a_5x5/weights/gradients/tag"
  input: "gradients/AddN_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/gradients/tag"
  input: "gradients/AddN_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_1b_1x1/weights/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_1b_1x1/weights/gradients/tag"
  input: "gradients/AddN_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/gradients/tag"
  input: "gradients/AddN_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_2a_3x3/weights/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_2a_3x3/weights/gradients/tag"
  input: "gradients/AddN_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/gradients/tag"
  input: "gradients/AddN_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_2b_1x1/weights/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_2b_1x1/weights/gradients/tag"
  input: "gradients/AddN_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/gradients/tag"
  input: "gradients/AddN_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_3a_3x3/weights/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_3a_3x3/weights/gradients/tag"
  input: "gradients/AddN_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/gradients/tag"
  input: "gradients/AddN_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_3b_1x1/weights/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_3b_1x1/weights/gradients/tag"
  input: "gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/gradients/tag"
  input: "gradients/AddN_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_4a_3x3/weights/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_4a_3x3/weights/gradients/tag"
  input: "gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/gradients/tag"
  input: "gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_4b_1x1/weights/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_4b_1x1/weights/gradients/tag"
  input: "gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/gradients/tag"
  input: "gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_5a_3x3/weights/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_5a_3x3/weights/gradients/tag"
  input: "gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/gradients/tag"
  input: "gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Bottleneck/weights/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Bottleneck/weights/gradients/tag"
  input: "gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/gradients/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Light_CNN/Bottleneck/BatchNorm/beta/gradients"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/gradients"
  op: "HistogramSummary"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/gradients/tag"
  input: "gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1a_5x5/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond/Switch"
  op: "Switch"
  input: "IsVariableInitialized"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/switch_t"
  op: "Identity"
  input: "cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/switch_f"
  op: "Identity"
  input: "cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/pred_id"
  op: "Identity"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond/read"
  op: "Identity"
  input: "cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1a_5x5/weights"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/weights/Initializer/truncated_normal"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "cond/Merge"
  op: "Merge"
  input: "cond/Switch_1"
  input: "cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1a_5x5/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1a_5x5/weights"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/weights/Initializer/truncated_normal"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/read/Switch_Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/Merge"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/read_Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/read/Switch_Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/Merge_Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond/Switch_1"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/read_Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/cond/Merge_Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_1/Switch"
  op: "Switch"
  input: "IsVariableInitialized_1"
  input: "IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/switch_t"
  op: "Identity"
  input: "cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/switch_f"
  op: "Identity"
  input: "cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_1/read"
  op: "Identity"
  input: "cond_1/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_1/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_1/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Initializer/zeros"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_1/Merge"
  op: "Merge"
  input: "cond_1/Switch_1"
  input: "cond_1/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Initializer/zeros"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond_1/read/Switch_Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  input: "cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond_1/read_Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond_1/read/Switch_Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond_1/Merge_Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_1/Switch_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond_1/read_Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/cond_1/Merge_Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_2/Switch"
  op: "Switch"
  input: "IsVariableInitialized_2"
  input: "IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/switch_t"
  op: "Identity"
  input: "cond_2/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/switch_f"
  op: "Identity"
  input: "cond_2/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_2/read"
  op: "Identity"
  input: "cond_2/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_2/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_2/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/Initializer/zeros"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_2/Merge"
  op: "Merge"
  input: "cond_2/Switch_1"
  input: "cond_2/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/Initializer/zeros"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond_2/read/Switch_Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  input: "cond_2/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond_2/read_Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond_2/read/Switch_Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond_2/Merge_Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_2/Switch_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond_2/read_Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/cond_2/Merge_Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_3/Switch"
  op: "Switch"
  input: "IsVariableInitialized_3"
  input: "IsVariableInitialized_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/switch_t"
  op: "Identity"
  input: "cond_3/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/switch_f"
  op: "Identity"
  input: "cond_3/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_3/read"
  op: "Identity"
  input: "cond_3/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_3/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
  input: "cond_3/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_3/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/Initializer/ones"
  input: "cond_3/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_3/Merge"
  op: "Merge"
  input: "cond_3/Switch_1"
  input: "cond_3/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/Initializer/ones"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond_3/read/Switch_Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  input: "cond_3/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond_3/read_Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond_3/read/Switch_Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond_3/Merge_Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_3/Switch_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond_3/read_Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/cond_3/Merge_Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1b_1x1/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_4/Switch"
  op: "Switch"
  input: "IsVariableInitialized_4"
  input: "IsVariableInitialized_4"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/switch_t"
  op: "Identity"
  input: "cond_4/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/switch_f"
  op: "Identity"
  input: "cond_4/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_4"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_4/read"
  op: "Identity"
  input: "cond_4/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_4/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1b_1x1/weights"
  input: "cond_4/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "cond_4/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/weights/Initializer/truncated_normal"
  input: "cond_4/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "cond_4/Merge"
  op: "Merge"
  input: "cond_4/Switch_1"
  input: "cond_4/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 48
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1b_1x1/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1b_1x1/weights"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/weights/Initializer/truncated_normal"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond_4/read/Switch_Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond/Merge"
  input: "cond_4/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond_4/read_Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond_4/read/Switch_Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond_4/Merge_Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_4/Switch_1"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond_4/read_Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/cond_4/Merge_Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_5/Switch"
  op: "Switch"
  input: "IsVariableInitialized_5"
  input: "IsVariableInitialized_5"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/switch_t"
  op: "Identity"
  input: "cond_5/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/switch_f"
  op: "Identity"
  input: "cond_5/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_5"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_5/read"
  op: "Identity"
  input: "cond_5/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_5/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
  input: "cond_5/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_5/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Initializer/zeros"
  input: "cond_5/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_5/Merge"
  op: "Merge"
  input: "cond_5/Switch_1"
  input: "cond_5/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Initializer/zeros"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_5/read/Switch_Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  input: "cond_5/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_5/read_Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_5/read/Switch_Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_5/Merge_Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_5/Switch_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_5/read_Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_5/Merge_Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_6/Switch"
  op: "Switch"
  input: "IsVariableInitialized_6"
  input: "IsVariableInitialized_6"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/switch_t"
  op: "Identity"
  input: "cond_6/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/switch_f"
  op: "Identity"
  input: "cond_6/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_6"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_6/read"
  op: "Identity"
  input: "cond_6/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_6/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
  input: "cond_6/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_6/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  input: "cond_6/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_6/Merge"
  op: "Merge"
  input: "cond_6/Switch_1"
  input: "cond_6/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_6/read/Switch_Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  input: "cond_6/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_6/read_Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_6/read/Switch_Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_6/Merge_Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_6/Switch_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_6/read_Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_6/Merge_Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_7/Switch"
  op: "Switch"
  input: "IsVariableInitialized_7"
  input: "IsVariableInitialized_7"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/switch_t"
  op: "Identity"
  input: "cond_7/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/switch_f"
  op: "Identity"
  input: "cond_7/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_7"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_7/read"
  op: "Identity"
  input: "cond_7/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_7/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
  input: "cond_7/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_7/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/Initializer/ones"
  input: "cond_7/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_7/Merge"
  op: "Merge"
  input: "cond_7/Switch_1"
  input: "cond_7/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/Initializer/ones"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_7/read/Switch_Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  input: "cond_7/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_7/read_Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_7/read/Switch_Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_7/Merge_Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_7/Switch_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_7/read_Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_7/Merge_Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2a_3x3/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_8/Switch"
  op: "Switch"
  input: "IsVariableInitialized_8"
  input: "IsVariableInitialized_8"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_8/switch_t"
  op: "Identity"
  input: "cond_8/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_8/switch_f"
  op: "Identity"
  input: "cond_8/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_8/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_8"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_8/read"
  op: "Identity"
  input: "cond_8/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_8/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2a_3x3/weights"
  input: "cond_8/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "cond_8/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/weights/Initializer/truncated_normal"
  input: "cond_8/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "cond_8/Merge"
  op: "Merge"
  input: "cond_8/Switch_1"
  input: "cond_8/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 48
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2a_3x3/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2a_3x3/weights"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/weights/Initializer/truncated_normal"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond_8/read/Switch_Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond/Merge"
  input: "cond_8/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond_8/read_Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond_8/read/Switch_Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond_8/Merge_Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_8/Switch_1"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond_8/read_Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/cond_8/Merge_Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_9/Switch"
  op: "Switch"
  input: "IsVariableInitialized_9"
  input: "IsVariableInitialized_9"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_9/switch_t"
  op: "Identity"
  input: "cond_9/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_9/switch_f"
  op: "Identity"
  input: "cond_9/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_9/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_9"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_9/read"
  op: "Identity"
  input: "cond_9/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_9/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
  input: "cond_9/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_9/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Initializer/zeros"
  input: "cond_9/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_9/Merge"
  op: "Merge"
  input: "cond_9/Switch_1"
  input: "cond_9/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Initializer/zeros"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_9/read/Switch_Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  input: "cond_9/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_9/read_Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_9/read/Switch_Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_9/Merge_Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_9/Switch_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_9/read_Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_9/Merge_Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_10/Switch"
  op: "Switch"
  input: "IsVariableInitialized_10"
  input: "IsVariableInitialized_10"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_10/switch_t"
  op: "Identity"
  input: "cond_10/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_10/switch_f"
  op: "Identity"
  input: "cond_10/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_10/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_10"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_10/read"
  op: "Identity"
  input: "cond_10/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_10/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
  input: "cond_10/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_10/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  input: "cond_10/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_10/Merge"
  op: "Merge"
  input: "cond_10/Switch_1"
  input: "cond_10/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_10/read/Switch_Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  input: "cond_10/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_10/read_Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_10/read/Switch_Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_10/Merge_Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_10/Switch_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_10/read_Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_10/Merge_Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_11/Switch"
  op: "Switch"
  input: "IsVariableInitialized_11"
  input: "IsVariableInitialized_11"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_11/switch_t"
  op: "Identity"
  input: "cond_11/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_11/switch_f"
  op: "Identity"
  input: "cond_11/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_11/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_11"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_11/read"
  op: "Identity"
  input: "cond_11/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_11/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
  input: "cond_11/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_11/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/Initializer/ones"
  input: "cond_11/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_11/Merge"
  op: "Merge"
  input: "cond_11/Switch_1"
  input: "cond_11/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/Initializer/ones"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_11/read/Switch_Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  input: "cond_11/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_11/read_Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_11/read/Switch_Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_11/Merge_Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_11/Switch_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_11/read_Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_11/Merge_Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2b_1x1/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_12/Switch"
  op: "Switch"
  input: "IsVariableInitialized_12"
  input: "IsVariableInitialized_12"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_12/switch_t"
  op: "Identity"
  input: "cond_12/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_12/switch_f"
  op: "Identity"
  input: "cond_12/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_12/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_12"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_12/read"
  op: "Identity"
  input: "cond_12/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_12/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2b_1x1/weights"
  input: "cond_12/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "cond_12/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/weights/Initializer/truncated_normal"
  input: "cond_12/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "cond_12/Merge"
  op: "Merge"
  input: "cond_12/Switch_1"
  input: "cond_12/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2b_1x1/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2b_1x1/weights"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/weights/Initializer/truncated_normal"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond_12/read/Switch_Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond/Merge"
  input: "cond_12/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond_12/read_Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond_12/read/Switch_Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond_12/Merge_Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_12/Switch_1"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond_12/read_Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/cond_12/Merge_Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_13/Switch"
  op: "Switch"
  input: "IsVariableInitialized_13"
  input: "IsVariableInitialized_13"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_13/switch_t"
  op: "Identity"
  input: "cond_13/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_13/switch_f"
  op: "Identity"
  input: "cond_13/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_13/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_13"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_13/read"
  op: "Identity"
  input: "cond_13/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_13/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
  input: "cond_13/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_13/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Initializer/zeros"
  input: "cond_13/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_13/Merge"
  op: "Merge"
  input: "cond_13/Switch_1"
  input: "cond_13/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Initializer/zeros"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_13/read/Switch_Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  input: "cond_13/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_13/read_Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_13/read/Switch_Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_13/Merge_Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_13/Switch_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_13/read_Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_13/Merge_Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_14/Switch"
  op: "Switch"
  input: "IsVariableInitialized_14"
  input: "IsVariableInitialized_14"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_14/switch_t"
  op: "Identity"
  input: "cond_14/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_14/switch_f"
  op: "Identity"
  input: "cond_14/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_14/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_14"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_14/read"
  op: "Identity"
  input: "cond_14/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_14/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
  input: "cond_14/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_14/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  input: "cond_14/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_14/Merge"
  op: "Merge"
  input: "cond_14/Switch_1"
  input: "cond_14/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_14/read/Switch_Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  input: "cond_14/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_14/read_Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_14/read/Switch_Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_14/Merge_Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_14/Switch_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_14/read_Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_14/Merge_Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_15/Switch"
  op: "Switch"
  input: "IsVariableInitialized_15"
  input: "IsVariableInitialized_15"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_15/switch_t"
  op: "Identity"
  input: "cond_15/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_15/switch_f"
  op: "Identity"
  input: "cond_15/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_15/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_15"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_15/read"
  op: "Identity"
  input: "cond_15/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_15/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
  input: "cond_15/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_15/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/Initializer/ones"
  input: "cond_15/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_15/Merge"
  op: "Merge"
  input: "cond_15/Switch_1"
  input: "cond_15/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/Initializer/ones"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_15/read/Switch_Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  input: "cond_15/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_15/read_Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_15/read/Switch_Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_15/Merge_Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_15/Switch_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_15/read_Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_15/Merge_Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3a_3x3/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_16/Switch"
  op: "Switch"
  input: "IsVariableInitialized_16"
  input: "IsVariableInitialized_16"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_16/switch_t"
  op: "Identity"
  input: "cond_16/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_16/switch_f"
  op: "Identity"
  input: "cond_16/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_16/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_16"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_16/read"
  op: "Identity"
  input: "cond_16/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_16/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3a_3x3/weights"
  input: "cond_16/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "cond_16/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/weights/Initializer/truncated_normal"
  input: "cond_16/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "cond_16/Merge"
  op: "Merge"
  input: "cond_16/Switch_1"
  input: "cond_16/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3a_3x3/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3a_3x3/weights"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/weights/Initializer/truncated_normal"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond_16/read/Switch_Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond/Merge"
  input: "cond_16/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond_16/read_Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond_16/read/Switch_Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond_16/Merge_Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_16/Switch_1"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond_16/read_Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/cond_16/Merge_Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_17/Switch"
  op: "Switch"
  input: "IsVariableInitialized_17"
  input: "IsVariableInitialized_17"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_17/switch_t"
  op: "Identity"
  input: "cond_17/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_17/switch_f"
  op: "Identity"
  input: "cond_17/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_17/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_17"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_17/read"
  op: "Identity"
  input: "cond_17/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_17/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
  input: "cond_17/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_17/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Initializer/zeros"
  input: "cond_17/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_17/Merge"
  op: "Merge"
  input: "cond_17/Switch_1"
  input: "cond_17/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Initializer/zeros"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_17/read/Switch_Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  input: "cond_17/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_17/read_Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_17/read/Switch_Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_17/Merge_Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_17/Switch_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_17/read_Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_17/Merge_Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_18/Switch"
  op: "Switch"
  input: "IsVariableInitialized_18"
  input: "IsVariableInitialized_18"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_18/switch_t"
  op: "Identity"
  input: "cond_18/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_18/switch_f"
  op: "Identity"
  input: "cond_18/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_18/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_18"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_18/read"
  op: "Identity"
  input: "cond_18/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_18/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
  input: "cond_18/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_18/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  input: "cond_18/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_18/Merge"
  op: "Merge"
  input: "cond_18/Switch_1"
  input: "cond_18/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_18/read/Switch_Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  input: "cond_18/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_18/read_Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_18/read/Switch_Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_18/Merge_Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_18/Switch_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_18/read_Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_18/Merge_Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_19/Switch"
  op: "Switch"
  input: "IsVariableInitialized_19"
  input: "IsVariableInitialized_19"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_19/switch_t"
  op: "Identity"
  input: "cond_19/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_19/switch_f"
  op: "Identity"
  input: "cond_19/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_19/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_19"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_19/read"
  op: "Identity"
  input: "cond_19/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_19/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
  input: "cond_19/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_19/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/Initializer/ones"
  input: "cond_19/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_19/Merge"
  op: "Merge"
  input: "cond_19/Switch_1"
  input: "cond_19/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/Initializer/ones"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_19/read/Switch_Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  input: "cond_19/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_19/read_Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_19/read/Switch_Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_19/Merge_Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_19/Switch_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_19/read_Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_19/Merge_Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3b_1x1/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_20/Switch"
  op: "Switch"
  input: "IsVariableInitialized_20"
  input: "IsVariableInitialized_20"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_20/switch_t"
  op: "Identity"
  input: "cond_20/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_20/switch_f"
  op: "Identity"
  input: "cond_20/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_20/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_20"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_20/read"
  op: "Identity"
  input: "cond_20/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_20/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3b_1x1/weights"
  input: "cond_20/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "cond_20/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/weights/Initializer/truncated_normal"
  input: "cond_20/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "cond_20/Merge"
  op: "Merge"
  input: "cond_20/Switch_1"
  input: "cond_20/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 192
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3b_1x1/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3b_1x1/weights"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/weights/Initializer/truncated_normal"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond_20/read/Switch_Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond/Merge"
  input: "cond_20/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond_20/read_Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond_20/read/Switch_Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond_20/Merge_Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_20/Switch_1"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond_20/read_Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/cond_20/Merge_Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_21/Switch"
  op: "Switch"
  input: "IsVariableInitialized_21"
  input: "IsVariableInitialized_21"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_21/switch_t"
  op: "Identity"
  input: "cond_21/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_21/switch_f"
  op: "Identity"
  input: "cond_21/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_21/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_21"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_21/read"
  op: "Identity"
  input: "cond_21/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_21/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
  input: "cond_21/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_21/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Initializer/zeros"
  input: "cond_21/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_21/Merge"
  op: "Merge"
  input: "cond_21/Switch_1"
  input: "cond_21/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Initializer/zeros"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_21/read/Switch_Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  input: "cond_21/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_21/read_Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_21/read/Switch_Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_21/Merge_Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_21/Switch_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_21/read_Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_21/Merge_Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_22/Switch"
  op: "Switch"
  input: "IsVariableInitialized_22"
  input: "IsVariableInitialized_22"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_22/switch_t"
  op: "Identity"
  input: "cond_22/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_22/switch_f"
  op: "Identity"
  input: "cond_22/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_22/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_22"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_22/read"
  op: "Identity"
  input: "cond_22/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_22/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
  input: "cond_22/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_22/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  input: "cond_22/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_22/Merge"
  op: "Merge"
  input: "cond_22/Switch_1"
  input: "cond_22/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_22/read/Switch_Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  input: "cond_22/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_22/read_Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_22/read/Switch_Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_22/Merge_Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_22/Switch_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_22/read_Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_22/Merge_Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_23/Switch"
  op: "Switch"
  input: "IsVariableInitialized_23"
  input: "IsVariableInitialized_23"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_23/switch_t"
  op: "Identity"
  input: "cond_23/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_23/switch_f"
  op: "Identity"
  input: "cond_23/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_23/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_23"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_23/read"
  op: "Identity"
  input: "cond_23/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_23/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
  input: "cond_23/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_23/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/Initializer/ones"
  input: "cond_23/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_23/Merge"
  op: "Merge"
  input: "cond_23/Switch_1"
  input: "cond_23/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/Initializer/ones"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_23/read/Switch_Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  input: "cond_23/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_23/read_Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_23/read/Switch_Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_23/Merge_Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_23/Switch_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_23/read_Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_23/Merge_Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4a_3x3/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_24/Switch"
  op: "Switch"
  input: "IsVariableInitialized_24"
  input: "IsVariableInitialized_24"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_24/switch_t"
  op: "Identity"
  input: "cond_24/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_24/switch_f"
  op: "Identity"
  input: "cond_24/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_24/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_24"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_24/read"
  op: "Identity"
  input: "cond_24/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_24/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4a_3x3/weights"
  input: "cond_24/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "cond_24/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/weights/Initializer/truncated_normal"
  input: "cond_24/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "cond_24/Merge"
  op: "Merge"
  input: "cond_24/Switch_1"
  input: "cond_24/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 192
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4a_3x3/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4a_3x3/weights"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/weights/Initializer/truncated_normal"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond_24/read/Switch_Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond/Merge"
  input: "cond_24/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond_24/read_Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond_24/read/Switch_Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond_24/Merge_Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_24/Switch_1"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond_24/read_Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/cond_24/Merge_Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_25/Switch"
  op: "Switch"
  input: "IsVariableInitialized_25"
  input: "IsVariableInitialized_25"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_25/switch_t"
  op: "Identity"
  input: "cond_25/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_25/switch_f"
  op: "Identity"
  input: "cond_25/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_25/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_25"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_25/read"
  op: "Identity"
  input: "cond_25/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_25/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
  input: "cond_25/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_25/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Initializer/zeros"
  input: "cond_25/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_25/Merge"
  op: "Merge"
  input: "cond_25/Switch_1"
  input: "cond_25/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Initializer/zeros"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_25/read/Switch_Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  input: "cond_25/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_25/read_Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_25/read/Switch_Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_25/Merge_Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_25/Switch_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_25/read_Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_25/Merge_Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_26/Switch"
  op: "Switch"
  input: "IsVariableInitialized_26"
  input: "IsVariableInitialized_26"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_26/switch_t"
  op: "Identity"
  input: "cond_26/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_26/switch_f"
  op: "Identity"
  input: "cond_26/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_26/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_26"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_26/read"
  op: "Identity"
  input: "cond_26/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_26/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
  input: "cond_26/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_26/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  input: "cond_26/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_26/Merge"
  op: "Merge"
  input: "cond_26/Switch_1"
  input: "cond_26/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_26/read/Switch_Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  input: "cond_26/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_26/read_Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_26/read/Switch_Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_26/Merge_Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_26/Switch_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_26/read_Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_26/Merge_Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_27/Switch"
  op: "Switch"
  input: "IsVariableInitialized_27"
  input: "IsVariableInitialized_27"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_27/switch_t"
  op: "Identity"
  input: "cond_27/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_27/switch_f"
  op: "Identity"
  input: "cond_27/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_27/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_27"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_27/read"
  op: "Identity"
  input: "cond_27/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_27/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
  input: "cond_27/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_27/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/Initializer/ones"
  input: "cond_27/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_27/Merge"
  op: "Merge"
  input: "cond_27/Switch_1"
  input: "cond_27/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/Initializer/ones"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_27/read/Switch_Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  input: "cond_27/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_27/read_Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_27/read/Switch_Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_27/Merge_Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_27/Switch_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_27/read_Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_27/Merge_Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4b_1x1/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_28/Switch"
  op: "Switch"
  input: "IsVariableInitialized_28"
  input: "IsVariableInitialized_28"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_28/switch_t"
  op: "Identity"
  input: "cond_28/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_28/switch_f"
  op: "Identity"
  input: "cond_28/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_28/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_28"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_28/read"
  op: "Identity"
  input: "cond_28/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_28/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4b_1x1/weights"
  input: "cond_28/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "cond_28/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/weights/Initializer/truncated_normal"
  input: "cond_28/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "cond_28/Merge"
  op: "Merge"
  input: "cond_28/Switch_1"
  input: "cond_28/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4b_1x1/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4b_1x1/weights"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/weights/Initializer/truncated_normal"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond_28/read/Switch_Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond/Merge"
  input: "cond_28/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond_28/read_Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond_28/read/Switch_Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond_28/Merge_Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_28/Switch_1"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond_28/read_Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/cond_28/Merge_Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_29/Switch"
  op: "Switch"
  input: "IsVariableInitialized_29"
  input: "IsVariableInitialized_29"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_29/switch_t"
  op: "Identity"
  input: "cond_29/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_29/switch_f"
  op: "Identity"
  input: "cond_29/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_29/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_29"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_29/read"
  op: "Identity"
  input: "cond_29/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_29/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
  input: "cond_29/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_29/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Initializer/zeros"
  input: "cond_29/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_29/Merge"
  op: "Merge"
  input: "cond_29/Switch_1"
  input: "cond_29/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Initializer/zeros"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_29/read/Switch_Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  input: "cond_29/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_29/read_Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_29/read/Switch_Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_29/Merge_Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_29/Switch_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_29/read_Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/cond_29/Merge_Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_30/Switch"
  op: "Switch"
  input: "IsVariableInitialized_30"
  input: "IsVariableInitialized_30"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_30/switch_t"
  op: "Identity"
  input: "cond_30/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_30/switch_f"
  op: "Identity"
  input: "cond_30/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_30/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_30"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_30/read"
  op: "Identity"
  input: "cond_30/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_30/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
  input: "cond_30/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_30/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  input: "cond_30/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_30/Merge"
  op: "Merge"
  input: "cond_30/Switch_1"
  input: "cond_30/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/Initializer/zeros"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_30/read/Switch_Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  input: "cond_30/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_30/read_Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_30/read/Switch_Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_30/Merge_Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_30/Switch_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_30/read_Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/cond_30/Merge_Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_31/Switch"
  op: "Switch"
  input: "IsVariableInitialized_31"
  input: "IsVariableInitialized_31"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_31/switch_t"
  op: "Identity"
  input: "cond_31/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_31/switch_f"
  op: "Identity"
  input: "cond_31/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_31/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_31"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_31/read"
  op: "Identity"
  input: "cond_31/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_31/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
  input: "cond_31/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_31/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/Initializer/ones"
  input: "cond_31/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_31/Merge"
  op: "Merge"
  input: "cond_31/Switch_1"
  input: "cond_31/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/Initializer/ones"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_31/read/Switch_Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  input: "cond_31/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_31/read_Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_31/read/Switch_Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_31/Merge_Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_31/Switch_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_31/read_Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/cond_31/Merge_Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_5a_3x3/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_32/Switch"
  op: "Switch"
  input: "IsVariableInitialized_32"
  input: "IsVariableInitialized_32"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_32/switch_t"
  op: "Identity"
  input: "cond_32/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_32/switch_f"
  op: "Identity"
  input: "cond_32/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_32/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_32"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_32/read"
  op: "Identity"
  input: "cond_32/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_32/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_5a_3x3/weights"
  input: "cond_32/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "cond_32/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/weights/Initializer/truncated_normal"
  input: "cond_32/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "cond_32/Merge"
  op: "Merge"
  input: "cond_32/Switch_1"
  input: "cond_32/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_5a_3x3/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_5a_3x3/weights"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/weights/Initializer/truncated_normal"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond_32/read/Switch_Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond/Merge"
  input: "cond_32/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond_32/read_Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond_32/read/Switch_Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond_32/Merge_Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_32/Switch_1"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond_32/read_Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/cond_32/Merge_Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_33/Switch"
  op: "Switch"
  input: "IsVariableInitialized_33"
  input: "IsVariableInitialized_33"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_33/switch_t"
  op: "Identity"
  input: "cond_33/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_33/switch_f"
  op: "Identity"
  input: "cond_33/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_33/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_33"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_33/read"
  op: "Identity"
  input: "cond_33/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_33/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
  input: "cond_33/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_33/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Initializer/zeros"
  input: "cond_33/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_33/Merge"
  op: "Merge"
  input: "cond_33/Switch_1"
  input: "cond_33/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Initializer/zeros"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_33/read/Switch_Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  input: "cond_33/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_33/read_Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_33/read/Switch_Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_33/Merge_Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_33/Switch_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_33/read_Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/cond_33/Merge_Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_34/Switch"
  op: "Switch"
  input: "IsVariableInitialized_34"
  input: "IsVariableInitialized_34"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_34/switch_t"
  op: "Identity"
  input: "cond_34/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_34/switch_f"
  op: "Identity"
  input: "cond_34/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_34/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_34"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_34/read"
  op: "Identity"
  input: "cond_34/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_34/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
  input: "cond_34/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_34/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  input: "cond_34/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_34/Merge"
  op: "Merge"
  input: "cond_34/Switch_1"
  input: "cond_34/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/Initializer/zeros"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_34/read/Switch_Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  input: "cond_34/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_34/read_Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_34/read/Switch_Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_34/Merge_Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_34/Switch_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_34/read_Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/cond_34/Merge_Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_35/Switch"
  op: "Switch"
  input: "IsVariableInitialized_35"
  input: "IsVariableInitialized_35"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_35/switch_t"
  op: "Identity"
  input: "cond_35/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_35/switch_f"
  op: "Identity"
  input: "cond_35/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_35/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_35"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_35/read"
  op: "Identity"
  input: "cond_35/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_35/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
  input: "cond_35/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_35/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/Initializer/ones"
  input: "cond_35/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_35/Merge"
  op: "Merge"
  input: "cond_35/Switch_1"
  input: "cond_35/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/Initializer/ones"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_35/read/Switch_Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  input: "cond_35/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_35/read_Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_35/read/Switch_Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_35/Merge_Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_35/Switch_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_35/read_Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/cond_35/Merge_Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "Light_CNN/Bottleneck/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_36/Switch"
  op: "Switch"
  input: "IsVariableInitialized_36"
  input: "IsVariableInitialized_36"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_36/switch_t"
  op: "Identity"
  input: "cond_36/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_36/switch_f"
  op: "Identity"
  input: "cond_36/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_36/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_36"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_36/read"
  op: "Identity"
  input: "cond_36/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_36/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Bottleneck/weights"
  input: "cond_36/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "cond_36/Switch_1"
  op: "Switch"
  input: "Light_CNN/Bottleneck/weights/Initializer/truncated_normal"
  input: "cond_36/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "cond_36/Merge"
  op: "Merge"
  input: "cond_36/Switch_1"
  input: "cond_36/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8192
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Bottleneck/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Bottleneck/weights"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Bottleneck/weights/Initializer/truncated_normal"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond_36/read/Switch_Light_CNN/Bottleneck/weights/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond/Merge"
  input: "cond_36/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond_36/read_Light_CNN/Bottleneck/weights/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond_36/read/Switch_Light_CNN/Bottleneck/weights/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond_36/Merge_Light_CNN/Bottleneck/weights/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_36/Switch_1"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond_36/read_Light_CNN/Bottleneck/weights/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/cond_36/Merge_Light_CNN/Bottleneck/weights/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "Light_CNN/Bottleneck/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_37/Switch"
  op: "Switch"
  input: "IsVariableInitialized_37"
  input: "IsVariableInitialized_37"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_37/switch_t"
  op: "Identity"
  input: "cond_37/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_37/switch_f"
  op: "Identity"
  input: "cond_37/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_37/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_37"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_37/read"
  op: "Identity"
  input: "cond_37/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_37/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Bottleneck/BatchNorm/beta"
  input: "cond_37/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_37/Switch_1"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/Initializer/zeros"
  input: "cond_37/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "cond_37/Merge"
  op: "Merge"
  input: "cond_37/Switch_1"
  input: "cond_37/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Bottleneck/BatchNorm/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Bottleneck/BatchNorm/beta"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/Initializer/zeros"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond_37/read/Switch_Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond/Merge"
  input: "cond_37/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond_37/read_Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond_37/read/Switch_Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond_37/Merge_Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_37/Switch_1"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond_37/read_Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/cond_37/Merge_Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_38/Switch"
  op: "Switch"
  input: "IsVariableInitialized_38"
  input: "IsVariableInitialized_38"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_38/switch_t"
  op: "Identity"
  input: "cond_38/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_38/switch_f"
  op: "Identity"
  input: "cond_38/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_38/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_38"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_38/read"
  op: "Identity"
  input: "cond_38/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_38/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean"
  input: "cond_38/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_38/Switch_1"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/Initializer/zeros"
  input: "cond_38/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "cond_38/Merge"
  op: "Merge"
  input: "cond_38/Switch_1"
  input: "cond_38/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/Initializer/zeros"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond_38/read/Switch_Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond/Merge"
  input: "cond_38/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond_38/read_Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond_38/read/Switch_Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond_38/Merge_Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_38/Switch_1"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond_38/read_Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/cond_38/Merge_Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_39/Switch"
  op: "Switch"
  input: "IsVariableInitialized_39"
  input: "IsVariableInitialized_39"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_39/switch_t"
  op: "Identity"
  input: "cond_39/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_39/switch_f"
  op: "Identity"
  input: "cond_39/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_39/pred_id"
  op: "Identity"
  input: "IsVariableInitialized_39"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "cond_39/read"
  op: "Identity"
  input: "cond_39/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cond_39/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance"
  input: "cond_39/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_39/Switch_1"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/Initializer/ones"
  input: "cond_39/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "cond_39/Merge"
  op: "Merge"
  input: "cond_39/Switch_1"
  input: "cond_39/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_t"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/switch_f"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read/Switch"
  op: "RefSwitch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/Initializer/ones"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  op: "Merge"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Switch_1"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond_39/read/Switch_Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Switch"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond/Merge"
  input: "cond_39/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond_39/read_Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond_39/read/Switch_Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage_0:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond_39/Merge_Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  op: "Merge"
  input: "cond_39/Switch_1"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond_39/read_Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/cond_39/Merge_Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  op: "Identity"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999899983406
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/num_updates"
  op: "Cast"
  input: "Variable/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ExponentialMovingAverage/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/add"
  op: "Add"
  input: "ExponentialMovingAverage/add/x"
  input: "ExponentialMovingAverage/num_updates"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialMovingAverage/add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/add_1"
  op: "Add"
  input: "ExponentialMovingAverage/add_1/x"
  input: "ExponentialMovingAverage/num_updates"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialMovingAverage/truediv"
  op: "RealDiv"
  input: "ExponentialMovingAverage/add"
  input: "ExponentialMovingAverage/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialMovingAverage/Minimum"
  op: "Minimum"
  input: "ExponentialMovingAverage/decay"
  input: "ExponentialMovingAverage/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_1a_5x5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_3"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_1b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_4"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_5"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_6"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_7"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_7/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_8/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_8/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_8/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_8/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_2a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_8/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_8/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_8/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_8"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_8/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_9/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_9/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_9/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_9/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_9/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_9/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_9/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_9"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_9/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_10/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_10/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_10/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_10/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_10/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_10/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_10/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_10"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_10/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_11/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_11/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_11/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_11/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_11/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_11/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_11/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_11"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_11/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_12/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_12/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_12/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_12/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_2b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_12/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_12/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_12/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_12"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_12/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_13/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_13/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_13/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_13/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_13/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_13/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_13/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_13"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_13/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_14/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_14/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_14/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_14/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_14/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_14/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_14/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_14"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_14/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_15/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_15/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_15/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_15/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_15/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_15/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_15/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_15"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_15/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_16/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_16/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_16/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_16/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_3a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_16/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_16/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_16/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_16"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_16/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_17/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_17/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_17/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_17/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_17/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_17/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_17/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_17"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_17/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_18/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_18/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_18/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_18/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_18/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_18/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_18/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_18"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_18/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_19/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_19/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_19/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_19/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_19/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_19/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_19/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_19"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_19/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_20/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_20/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_20/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_20/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_3b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_20/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_20/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_20/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_20"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_20/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_21/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_21/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_21/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_21/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_21/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_21/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_21/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_21"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_21/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_22/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_22/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_22/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_22/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_22/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_22/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_22/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_22"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_22/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_23/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_23/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_23/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_23/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_23/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_23/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_23/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_23"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_23/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_24/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_24/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_24/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_24/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_4a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_24/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_24/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_24/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_24"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_24/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_25/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_25/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_25/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_25/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_25/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_25/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_25/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_25"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_25/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_26/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_26/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_26/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_26/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_26/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_26/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_26/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_26"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_26/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_27/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_27/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_27/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_27/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_27/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_27/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_27/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_27"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_27/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_28/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_28/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_28/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_28/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_4b_1x1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_28/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_28/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_28/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_28"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_28/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_29/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_29/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_29/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_29/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_29/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_29/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_29/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_29"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_29/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_30/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_30/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_30/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_30/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_30/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_30/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_30/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_30"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_30/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_31/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_31/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_31/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_31/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_31/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_31/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_31/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_31"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_31/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_32/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_32/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_32/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_32/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_5a_3x3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_32/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_32/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_32/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_32"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_32/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_33/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_33/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_33/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_33/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_33/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_33/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_33/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_33"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_33/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_34/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_34/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_34/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_34/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_34/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_34/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_34/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_34"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_34/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_35/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_35/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_35/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_35/sub_1"
  op: "Sub"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_35/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_35/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_35/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_35"
  op: "AssignSub"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_35/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_36/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_36/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_36/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_36/sub_1"
  op: "Sub"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage/read"
  input: "Light_CNN/Bottleneck/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_36/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_36/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_36/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_36"
  op: "AssignSub"
  input: "Light_CNN/Bottleneck/weights/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_36/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_37/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_37/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_37/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_37/sub_1"
  op: "Sub"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/read"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_37/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_37/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_37/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_37"
  op: "AssignSub"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_37/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_38/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_38/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_38/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_38/sub_1"
  op: "Sub"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/read"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_38/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_38/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_38/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_38"
  op: "AssignSub"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_38/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_39/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_39/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_39/sub/x"
  input: "ExponentialMovingAverage/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_39/sub_1"
  op: "Sub"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/read"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_39/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_39/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_39/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_39"
  op: "AssignSub"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_39/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage"
  op: "NoOp"
  input: "^ExponentialMovingAverage/AssignMovingAvg"
  input: "^ExponentialMovingAverage/AssignMovingAvg_1"
  input: "^ExponentialMovingAverage/AssignMovingAvg_10"
  input: "^ExponentialMovingAverage/AssignMovingAvg_11"
  input: "^ExponentialMovingAverage/AssignMovingAvg_12"
  input: "^ExponentialMovingAverage/AssignMovingAvg_13"
  input: "^ExponentialMovingAverage/AssignMovingAvg_14"
  input: "^ExponentialMovingAverage/AssignMovingAvg_15"
  input: "^ExponentialMovingAverage/AssignMovingAvg_16"
  input: "^ExponentialMovingAverage/AssignMovingAvg_17"
  input: "^ExponentialMovingAverage/AssignMovingAvg_18"
  input: "^ExponentialMovingAverage/AssignMovingAvg_19"
  input: "^ExponentialMovingAverage/AssignMovingAvg_2"
  input: "^ExponentialMovingAverage/AssignMovingAvg_20"
  input: "^ExponentialMovingAverage/AssignMovingAvg_21"
  input: "^ExponentialMovingAverage/AssignMovingAvg_22"
  input: "^ExponentialMovingAverage/AssignMovingAvg_23"
  input: "^ExponentialMovingAverage/AssignMovingAvg_24"
  input: "^ExponentialMovingAverage/AssignMovingAvg_25"
  input: "^ExponentialMovingAverage/AssignMovingAvg_26"
  input: "^ExponentialMovingAverage/AssignMovingAvg_27"
  input: "^ExponentialMovingAverage/AssignMovingAvg_28"
  input: "^ExponentialMovingAverage/AssignMovingAvg_29"
  input: "^ExponentialMovingAverage/AssignMovingAvg_3"
  input: "^ExponentialMovingAverage/AssignMovingAvg_30"
  input: "^ExponentialMovingAverage/AssignMovingAvg_31"
  input: "^ExponentialMovingAverage/AssignMovingAvg_32"
  input: "^ExponentialMovingAverage/AssignMovingAvg_33"
  input: "^ExponentialMovingAverage/AssignMovingAvg_34"
  input: "^ExponentialMovingAverage/AssignMovingAvg_35"
  input: "^ExponentialMovingAverage/AssignMovingAvg_36"
  input: "^ExponentialMovingAverage/AssignMovingAvg_37"
  input: "^ExponentialMovingAverage/AssignMovingAvg_38"
  input: "^ExponentialMovingAverage/AssignMovingAvg_39"
  input: "^ExponentialMovingAverage/AssignMovingAvg_4"
  input: "^ExponentialMovingAverage/AssignMovingAvg_5"
  input: "^ExponentialMovingAverage/AssignMovingAvg_6"
  input: "^ExponentialMovingAverage/AssignMovingAvg_7"
  input: "^ExponentialMovingAverage/AssignMovingAvg_8"
  input: "^ExponentialMovingAverage/AssignMovingAvg_9"
}
node {
  name: "train"
  op: "NoOp"
  input: "^ExponentialMovingAverage"
  input: "^Momentum"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 40
          }
        }
        string_val: "Light_CNN/Bottleneck/BatchNorm/beta"
        string_val: "Light_CNN/Bottleneck/BatchNorm/moving_mean"
        string_val: "Light_CNN/Bottleneck/BatchNorm/moving_variance"
        string_val: "Light_CNN/Bottleneck/weights"
        string_val: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_1a_5x5/weights"
        string_val: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_1b_1x1/weights"
        string_val: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_2a_3x3/weights"
        string_val: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_2b_1x1/weights"
        string_val: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_3a_3x3/weights"
        string_val: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_3b_1x1/weights"
        string_val: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_4a_3x3/weights"
        string_val: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_4b_1x1/weights"
        string_val: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 40
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "Light_CNN/Bottleneck/BatchNorm/beta"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance"
  input: "Light_CNN/Bottleneck/weights"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_1a_5x5/weights"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_1b_1x1/weights"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_2a_3x3/weights"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_2b_1x1/weights"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_3a_3x3/weights"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_3b_1x1/weights"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_4a_3x3/weights"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_4b_1x1/weights"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
  input: "Light_CNN/Conv2d_5a_3x3/weights"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 40
          }
        }
        string_val: "Light_CNN/Bottleneck/BatchNorm/beta"
        string_val: "Light_CNN/Bottleneck/BatchNorm/moving_mean"
        string_val: "Light_CNN/Bottleneck/BatchNorm/moving_variance"
        string_val: "Light_CNN/Bottleneck/weights"
        string_val: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_1a_5x5/weights"
        string_val: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_1b_1x1/weights"
        string_val: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_2a_3x3/weights"
        string_val: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_2b_1x1/weights"
        string_val: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_3a_3x3/weights"
        string_val: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_3b_1x1/weights"
        string_val: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_4a_3x3/weights"
        string_val: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_4b_1x1/weights"
        string_val: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
        string_val: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
        string_val: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
        string_val: "Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 40
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "Light_CNN/Bottleneck/BatchNorm/beta"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "Light_CNN/Bottleneck/weights"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Bottleneck/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "Light_CNN/Conv2d_1a_5x5/weights"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1a_5x5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "Light_CNN/Conv2d_1b_1x1/weights"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_1b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "Light_CNN/Conv2d_2a_3x3/weights"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "Light_CNN/Conv2d_2b_1x1/weights"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_2b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "Light_CNN/Conv2d_3a_3x3/weights"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "Light_CNN/Conv2d_3b_1x1/weights"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_3b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "Light_CNN/Conv2d_4a_3x3/weights"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "Light_CNN/Conv2d_4b_1x1/weights"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_4b_1x1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "Light_CNN/Conv2d_5a_3x3/weights"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Light_CNN/Conv2d_5a_3x3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "batch_join/fraction_of_1440_full"
  input: "learning_rate_1"
  input: "total_loss__raw_"
  input: "total_loss_1"
  input: "Light_CNN/Conv2d_1a_5x5/weights_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean_1"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance_1"
  input: "Light_CNN/Conv2d_1b_1x1/weights_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean_1"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance_1"
  input: "Light_CNN/Conv2d_2a_3x3/weights_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean_1"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance_1"
  input: "Light_CNN/Conv2d_2b_1x1/weights_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean_1"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance_1"
  input: "Light_CNN/Conv2d_3a_3x3/weights_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean_1"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance_1"
  input: "Light_CNN/Conv2d_3b_1x1/weights_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean_1"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance_1"
  input: "Light_CNN/Conv2d_4a_3x3/weights_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean_1"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance_1"
  input: "Light_CNN/Conv2d_4b_1x1/weights_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean_1"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance_1"
  input: "Light_CNN/Conv2d_5a_3x3/weights_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean_1"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance_1"
  input: "Light_CNN/Bottleneck/weights_1"
  input: "Light_CNN/Bottleneck/BatchNorm/beta_1"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_mean_1"
  input: "Light_CNN/Bottleneck/BatchNorm/moving_variance_1"
  input: "Light_CNN/Conv2d_1a_5x5/weights/gradients"
  input: "Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/gradients"
  input: "Light_CNN/Conv2d_1b_1x1/weights/gradients"
  input: "Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/gradients"
  input: "Light_CNN/Conv2d_2a_3x3/weights/gradients"
  input: "Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/gradients"
  input: "Light_CNN/Conv2d_2b_1x1/weights/gradients"
  input: "Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/gradients"
  input: "Light_CNN/Conv2d_3a_3x3/weights/gradients"
  input: "Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/gradients"
  input: "Light_CNN/Conv2d_3b_1x1/weights/gradients"
  input: "Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/gradients"
  input: "Light_CNN/Conv2d_4a_3x3/weights/gradients"
  input: "Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/gradients"
  input: "Light_CNN/Conv2d_4b_1x1/weights/gradients"
  input: "Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/gradients"
  input: "Light_CNN/Conv2d_5a_3x3/weights/gradients"
  input: "Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/gradients"
  input: "Light_CNN/Bottleneck/weights/gradients"
  input: "Light_CNN/Bottleneck/BatchNorm/beta/gradients"
  attr {
    key: "N"
    value {
      i: 64
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^Light_CNN/Bottleneck/BatchNorm/beta/Assign"
  input: "^Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Bottleneck/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Bottleneck/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Bottleneck/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Bottleneck/weights/Assign"
  input: "^Light_CNN/Bottleneck/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Bottleneck/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/weights/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/weights/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/weights/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/weights/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/weights/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/weights/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/weights/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/weights/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/weights/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/weights/Momentum/Assign"
  input: "^Variable/Assign"
  input: "^total_loss/avg/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^Variable/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/weights/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/weights/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/weights/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/weights/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/weights/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/weights/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/weights/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/weights/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/weights/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/Assign"
  input: "^Light_CNN/Bottleneck/weights/Assign"
  input: "^Light_CNN/Bottleneck/BatchNorm/beta/Assign"
  input: "^Light_CNN/Bottleneck/BatchNorm/moving_mean/Assign"
  input: "^Light_CNN/Bottleneck/BatchNorm/moving_variance/Assign"
  input: "^total_loss/avg/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/weights/Momentum/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Bottleneck/weights/Momentum/Assign"
  input: "^Light_CNN/Bottleneck/BatchNorm/beta/Momentum/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1a_5x5/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_1b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_2b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_3b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_4b_1x1/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Conv2d_5a_3x3/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Bottleneck/weights/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Bottleneck/BatchNorm/beta/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Bottleneck/BatchNorm/moving_mean/ExponentialMovingAverage/Assign"
  input: "^Light_CNN/Bottleneck/BatchNorm/moving_variance/ExponentialMovingAverage/Assign"
}
node {
  name: "init_3"
  op: "NoOp"
}
versions {
  producer: 26
}
